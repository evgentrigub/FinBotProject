{"version":3,"sources":["./src/app/services/user-stats.service.ts","./src/app/components/table-bots/table-bots.component.ts","./src/app/components/table-bots/table-bots.component.html","./src/app/components/account/about/about.component.ts","./src/app/components/account/about/about.component.html","./src/app/components/navigation-bar/navigation-bar.component.ts","./src/app/components/navigation-bar/navigation-bar.component.html","./src/app/models/user.ts","./src/app/models/enums.ts","./src/app/models/strategy.ts","./src/environments/environment.ts","./src/app/components/create-bot/create-bot.component.ts","./src/app/components/create-bot/create-bot.component.html","./src/app/components/account/login/login.component.ts","./src/app/components/account/login/login.component.html","./src/app/components/main-dashboard/add-modey-to-account/add-modey-to-account.component.ts","./src/app/components/main-dashboard/add-modey-to-account/add-modey-to-account.component.html","./src/app/components/account/register/register.component.ts","./src/app/components/account/register/register.component.html","./src/app/app.component.ts","./src/app/app.component.html","./src/app/guards/auth.guard.ts","./src/app/app.module.ts","./src/app/app.routing.ts","./src/app/helpers/jwt.interceptor.ts","./src/app/services/authentication.service.ts","./src/app/helpers/error.interceptor.ts","./src/app/services/task.service.ts","./src/app/components/main-dashboard/main-dashboard.component.ts","./src/app/components/main-dashboard/main-dashboard.component.html","./src/app/services/trading-bots.service.ts","./src/app/components/table-bots/bot-stats-dialog/bot-stats-dialog.component.ts","./src/app/components/table-bots/bot-stats-dialog/bot-stats-dialog.component.html","./src/app/services/user.service.ts","./src/app/components/create-bot/create-bot.service.ts","./src/app/components/account/settings/settings.component.ts","./src/app/components/account/settings/settings.component.html","./src/app/components/main-dashboard/widgets/widgets.component.ts","./src/app/components/main-dashboard/widgets/widgets.component.html","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2C;AAEwB;AAExB;AACa;;;AAKjD,MAAM,gBAAgB;IAI3B,YAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;QAF5B,WAAM,GAAG,KAAK,CAAC;QAGrB,IAAI,CAAC,MAAM,GAAG,IAAI,oDAAe,CAAY,EAAE,MAAM,EAAE,CAAC,EAAE,OAAO,EAAE,CAAC,EAAE,aAAa,EAAE,CAAC,EAAE,QAAQ,EAAE,mEAAqB,CAAC,UAAU,EAAE,CAAC,CAAC;IACxI,CAAC;IAED;;;OAGG;IACH,YAAY,CAAC,EAAU;QACrB,4EAA4E;QAC5E,sBAAsB;QACtB,OAAO,IAAI,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,gEAAS,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;QAChE,IAAI;QACJ,sBAAsB;IACxB,CAAC;IAEO,aAAa,CAAC,EAAU;QAC9B,OAAO,+CAAE,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,OAAO,EAAE,CAAC,EAAE,aAAa,EAAE,CAAC,EAAE,QAAQ,EAAE,mEAAqB,CAAC,UAAU,EAAE,CAAC;QAClG,kFAAkF;QAClF,kCAAkC;QAClC,sBAAsB;QACtB,kCAAkC;QAClC,0BAA0B;QAC1B,OAAO;QACP,KAAK;IACP,CAAC;IAEO,WAAW,CAAC,KAAwB;QAC1C,IAAI,GAAW,CAAC;QAChB,IAAI,KAAK,CAAC,KAAK,YAAY,UAAU,EAAE;YACrC,GAAG,GAAG,mBAAmB,GAAG,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC;SACjD;aAAM;YACL,GAAG,GAAG,qBAAqB,KAAK,CAAC,KAAK,gBAAgB,KAAK,CAAC,MAAM,EAAE,CAAC;SACtE;QACD,OAAO,uDAAU,CAAC,GAAG,CAAC,CAAC;IACzB,CAAC;;gFAvCU,gBAAgB;mGAAhB,gBAAgB,WAAhB,gBAAgB,mBAFf,MAAM;6FAEP,gBAAgB;cAH5B,wDAAU;eAAC;gBACV,UAAU,EAAE,MAAM;aACnB;;;;;;;;;;;;;;ACTD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkD;AACsC;AACnD;AAGwB;;;;;;;;;;;;ICsCvD,sFACuB;;;IAInB,yEAAsD;IAAA,iEAAC;IAAA,4DAAK;;;IAC5D,yEAAkD;IAAA,uDAAW;IAAA,4DAAK;;;IAAhB,0DAAW;IAAX,0EAAW;;;IAU7D,yEAAsD;IAAA,iHAAS;IAAA,4DAAK;;;IACpE,yEAAmC;IAAA,uDAAgB;IAAA,4DAAK;;;IAArB,0DAAgB;IAAhB,+EAAgB;;;IAInD,yEAAsD;IAAA,iHAAS;IAAA,4DAAK;;;IACpE,yEAAmC;IAAA,uDAAkB;IAAA,4DAAK;;;IAAvB,0DAAkB;IAAlB,iFAAkB;;;IAIrD,yEAAsD;IAAA,8HAAY;IAAA,4DAAK;;;IACvE,yEAAmC;IAAA,uDAAoB;IAAA,4DAAK;;;IAAzB,0DAAoB;IAApB,mFAAoB;;;IAIvD,yEAAsD;IAAA,uHAAU;IAAA,4DAAK;;;IACrE,yEAAmC;IAAA,uDAAiB;IAAA,4DAAK;;;IAAtB,0DAAiB;IAAjB,yFAAiB;;;IAIpD,yEAAsD;IAAA,2GAAQ;IAAA,4DAAK;;;;IAEjE,+EAEE;IAF6B,oaAAsB;IAEnD,gFACF;IAAA,4DAAW;;;;IACX,+EAEE;IAF8B,oaAAsB;IAEpD,+EACF;IAAA,4DAAW;;;;IARb,yEACE;IAAA,+HAGW;IACX,+HAGW;IACX,+EACE;IADQ,8VAAqB;IAC7B,mEACF;IAAA,4DAAW;IACX,+EAEE;IADA,kWAAyB;IACzB,oEACF;IAAA,4DAAW;IACb,4DAAK;;;IAfQ,0DAAkB;IAAlB,kFAAkB;IAIlB,0DAAmB;IAAnB,mFAAmB;;;IAclC,oEAA4D;;;IAC5D,oEAAgF;;ADtFjF,MAAM,kBAAkB;IAK7B,YAA6B,kBAAsC,EAAmB,QAAqB,EAAS,MAAiB;QAAxG,uBAAkB,GAAlB,kBAAkB,CAAoB;QAAmB,aAAQ,GAAR,QAAQ,CAAa;QAAS,WAAM,GAAN,MAAM,CAAW;QAJrI,qBAAgB,GAAa,CAAC,IAAI,EAAE,QAAQ,EAAE,UAAU,EAAE,WAAW,EAAE,QAAQ,EAAE,SAAS,CAAC,CAAC;QAC5F,eAAU,GAAmC,IAAI,0EAAkB,EAAE,CAAC;QACtE,cAAS,GAAG,IAAI,CAAC;IAEwH,CAAC;IAE1I,QAAQ;QACN,IAAI,CAAC,SAAS,EAAE,CAAC;IACnB,CAAC;IAED,SAAS;QACP,IAAI,CAAC,kBAAkB,CAAC,aAAa,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE;YACvD,OAAO,CAAC,GAAG,CAAC,kHAAkH,EAAE,IAAI,CAAC;YACrI,IAAI,CAAC,UAAU,CAAC,IAAI,GAAG,IAAI,CAAC;YAC5B,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;QACzB,CAAC,CAAC,CAAC;IACL,CAAC;IAED,OAAO,CAAC,GAAe;QACrB,GAAG,CAAC,QAAQ,GAAG,CAAC,GAAG,CAAC,QAAQ,CAAC;QAC7B,IAAI,CAAC,kBAAkB;aACpB,eAAe,CAAC,GAAG,CAAC;aACpB,IAAI,CACH,0DAAG,CACD,CAAC,CAAC,EAAE;YACF,CAAC,GAAG,CAAC,QAAQ,KAAK,KAAK,CAAC;gBACtB,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,oCAAoC,CAAC;gBACxD,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,iCAAiC,CAAC,CAAC;QAC1D,CAAC,EACD,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAC7B,CAAC;aACH,SAAS,EAAE,CAAC;IACjB,CAAC;IAED,MAAM,CAAC,GAAe;QACpB,IAAI,CAAC,kBAAkB,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC,SAAS,EAAE,CAAC;QACzD,IAAI,CAAC,SAAS,EAAE,CAAC;IACnB,CAAC;IAED,UAAU,CAAC,GAAe;QACxB,MAAM,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,oGAAuB,EAAE;YAC1D,UAAU,EAAE,QAAQ;YACpB,KAAK,EAAE,OAAO;YACd,MAAM,EAAE,OAAO;YACf,IAAI,EAAE,GAAG;YACT,YAAY,EAAE,IAAI;SACnB,CAAC,CAAC;QACH,SAAS,CAAC,aAAa,EAAE,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE;YAC3C,IAAI,OAAO,CAAC,eAAe,CAAC,EAAE;gBAC5B,SAAS,CAAC,KAAK,EAAE,CAAC;aACnB;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAEO,WAAW,CAAC,GAAQ;QAC1B,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,EAAE,SAAS,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC;IACzD,CAAC;;oFAzDU,kBAAkB;kGAAlB,kBAAkB;QCd/B,yEACE;QAAA,2EACE;QAAA,kFACE;QAAA,oFACE;QAAA,kJACF;QAAA,4DAAiB;QACjB,uFACE;QAAA,yEACE;QAAA,sEACE;QAAA,sbAAyE;QAAA,gEACzE;QAAA,geAAkF;QAAA,iEAClF;QAAA,iEACA;QAAA,yQACF;QAAA,4DAAM;QACN,sEACE;QAAA,sEACE;QAAA,0EACE;QAAA,gYACA;QAAA,+EAAsD;QAAA,mEAAO;QAAA,4DAAW;QAC1E,4DAAM;QACR,4DAAK;QACL,sEACE;QAAA,0EACE;QAAA,uEAAK;QAAA,gOAA6B;QAAA,4DAAM;QACxC,+EAAqD;QAAA,+EAAmB;QAAA,4DAAW;QACrF,4DAAM;QACN,0EACE;QAAA,uEAAK;QAAA,gNAA4B;QAAA,4DAAM;QACvC,+EAAqD;QAAA,8EAAkB;QAAA,4DAAW;QACpF,4DAAM;QACR,4DAAK;QACL,sEACE;QAAA,0EACE;QAAA,uEAAK;QAAA,2IAAc;QAAA,4DAAM;QACzB,+EAAoD;QAAA,kEAAM;QAAA,4DAAW;QACvE,4DAAM;QACR,4DAAK;QACP,4DAAK;QACL,iEACF;QAAA,4DAAM;QACR,4DAAoB;QACtB,4DAAkB;QAClB,oFACE;QAAA,mJACuB;QAEvB,6EACE;QAAA,6EACE;QAAA,+GAA4D;QAC5D,+GAAkE;QACpE,qEAAe;QAQf,6EACE;QAAA,+GAAoE;QACpE,+GAAwD;QAC1D,qEAAe;QAEf,6EACE;QAAA,+GAAoE;QACpE,+GAA0D;QAC5D,qEAAe;QAEf,6EACE;QAAA,+GAAuE;QACvE,+GAA4D;QAC9D,qEAAe;QAEf,6EACE;QAAA,+GAAqE;QACrE,+GAAyD;QAC3D,qEAAe;QAEf,6EACE;QAAA,+GAAmE;QACnE,+GAgBK;QACP,qEAAe;QAEf,+GAA4D;QAC5D,+GAAgF;QAClF,4DAAQ;QACV,4DAAmB;QACrB,4DAAW;QACb,4DAAM;;QA7DuB,2DAAe;QAAf,+EAAe;QAGrB,0DAAyB;QAAzB,sFAAyB;QAqDpB,2DAAiC;QAAjC,iGAAiC;QACpB,0DAA2B;QAA3B,kGAA2B;;6FDtFvD,kBAAkB;cAL9B,uDAAS;eAAC;gBACT,QAAQ,EAAE,gBAAgB;gBAC1B,WAAW,EAAE,6BAA6B;gBAC1C,SAAS,EAAE,CAAC,4BAA4B,CAAC;aAC1C;;;;;;;;;;;;;;AEbD;AAAA;AAAA;AAAkD;;AAO3C,MAAM,cAAc;IACzB,gBAAe,CAAC;IAEhB,QAAQ,KAAI,CAAC;;4EAHF,cAAc;8FAAd,cAAc;QCP3B,yEACE;QAAA,yEACE;QAAA,yEACE;QAAA,yEACE;QAAA,qEAAI;QAAA,oNAA4B;QAAA,4DAAK;QACvC,4DAAM;QACR,4DAAM;QACR,4DAAM;QACR,4DAAM;;6FDDO,cAAc;cAL1B,uDAAS;eAAC;gBACT,QAAQ,EAAE,WAAW;gBACrB,WAAW,EAAE,wBAAwB;gBACrC,SAAS,EAAE,CAAC,uBAAuB,CAAC;aACrC;;;;;;;;;;;;;;AEND;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAqD;AACiB;AAEjC;;;;;;;;;;;;;;ICDnC,oFAGE;;;;IAAA,iFAA6B;IAAA,mFAAI;IAAA,4DAAc;IAC/C,+EACE;IAAA,uEAAyC;IAAA,+FAAM;IAAA,4DAAI;IACnD,wEAAqC;IAAA,mHAAU;IAAA,4DAAI;IACnD,wEAAsC;IAAA,2IAAc;IAAA,4DAAI;IAC1D,4DAAe;IACjB,4DAAc;;;IARiD,sKAA+C;IAA5G,+KAA4D;;;;IAY1D,6EAEE;IAFgE,sTAAS,sBAAe,IAAC;IAEzF,+EAA4C;IAAA,+DAAI;IAAA,4DAAW;IAC7D,4DAAS;;;;IALX,kFACE;IACA,uIAGS;;IAET,uEAAM;IAAA,uJAAiB;IAAA,4DAAO;IAE9B,sEAAoC;IAEpC,+EAA6C;IAAA,wEAAa;IAAA,4DAAW;IACrE,+EAAiC;IAAA,wEAAa;IAAA,4DAAW;IACzD,8EAAqE;IAAA,wDAAuB;IAAA,4DAAS;IACrG,oFACE;IAAA,8EAA6C;IAAA,kHAAS;IAAA,4DAAS;IAC/D,8EAAyC;IAAnB,gUAAkB;IAAC,0FAAK;IAAA,4DAAS;IACzD,4DAAW;IACb,4DAAc;;;;IAfT,0DAAwB;IAAxB,oJAAwB;IAUe,0DAA0B;IAA1B,kFAA0B;IAAC,0DAAuB;IAAvB,yFAAuB;IAClE,0DAAwB;IAAxB,iFAAwB;;;IAKpD,8EACE;IAAA,uEAAM;IAAA,sEAAW;IAAA,4DAAO;IACxB,6EAA8D;IAAA,4GAAS;IAAA,4DAAS;IAChF,6EAA8D;IAAA,yFAAK;IAAA,4DAAS;IAC5E,6EAAiE;IAAA,6HAAW;IAAA,4DAAS;IACvF,4DAAc;;;ADxBX,MAAM,sBAAsB;IAOjC,YACU,kBAAsC,EACtC,MAAc,EACd,qBAA4C;QAF5C,uBAAkB,GAAlB,kBAAkB,CAAoB;QACtC,WAAM,GAAN,MAAM,CAAQ;QACd,0BAAqB,GAArB,qBAAqB,CAAuB;QATtD,WAAM,GAAG,IAAI,CAAC;QAId,eAAU,GAAwB,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,+DAAW,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,0DAAG,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC;QAOzH,IAAI,CAAC,uBAAuB,GAAG,IAAI,CAAC,qBAAqB,CAAC,YAAY,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE;YACtF,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,IAAI;YACpB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QAC1B,CAAC,CAAC,CAAC;IACL,CAAC;IAED,WAAW;QACT,IAAI,CAAC,uBAAuB,CAAC,WAAW,EAAE,CAAC;IAC7C,CAAC;IAED,MAAM;QACJ,IAAI,CAAC,qBAAqB,CAAC,MAAM,EAAE,CAAC;QACpC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;IACnC,CAAC;;4FAzBU,sBAAsB;sGAAtB,sBAAsB;;QCbnC,2FACE;QACA,mIASc;QACd,sFACE;QAAA,mIAkBc;QACd,kIAKc;QACd,6DAAyB;QAC3B,4DAAsB;QACxB,4DAAwB;;QAtCR,0DAAY;QAAZ,4EAAY;QAWV,0DAAY;QAAZ,4EAAY;QAmBZ,0DAAa;QAAb,6EAAa;;6FDnBlB,sBAAsB;cALlC,uDAAS;eAAC;gBACT,QAAQ,EAAE,oBAAoB;gBAC9B,WAAW,EAAE,iCAAiC;gBAC9C,SAAS,EAAE,CAAC,gCAAgC,CAAC;aAC9C;;;;;;;;;;;;;;AETD;AAAA;AAAO,MAAM,IAAI;CAOhB;AAQA,CAAC;AAeD,CAAC;;;;;;;;;;;;;ACjCF;AAAA;AAAA;AAAA,yBAAyB;AACzB,YAAY;AACZ,kBAAkB;AAClB,mBAAmB;AACnB,oBAAoB;AACpB,qBAAqB;AACrB,iBAAiB;AACjB,gBAAgB;AAChB,qBAAqB;AACrB,sBAAsB;AACtB,4BAA4B;AAC5B,IAAI;AAEJ,IAAY,qBAOX;AAPD,WAAY,qBAAqB;IAC/B,6EAAc;IACd,kFAAiB;IACjB,0EAAa;IACb,sEAAW;IACX,0FAAqB;IACrB,oFAAkB;AACpB,CAAC,EAPW,qBAAqB,KAArB,qBAAqB,QAOhC;AAED,IAAY,mBAGX;AAHD,WAAY,mBAAmB;IAC7B,sCAAe;IACf,sCAAe;AACjB,CAAC,EAHW,mBAAmB,KAAnB,mBAAmB,QAG9B;;;;;;;;;;;;;ACzBD;AAAA;AAAA;;;;GAIG;AACH,IAAY,YAIX;AAJD,WAAY,YAAY;IACtB,qCAAqB;IACrB,6CAA6B;IAC7B,2CAA2B;AAC7B,CAAC,EAJW,YAAY,KAAZ,YAAY,QAIvB;;;;;;;;;;;;;ACTD;AAAA;AAAA,gFAAgF;AAChF,0EAA0E;AAC1E,gEAAgE;AAEzD,MAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;IACjB,MAAM,EAAE,2BAA2B;CACpC,CAAC;AAEF;;;;;;GAMG;AACH,mEAAmE;;;;;;;;;;;;;AChBnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkD;AAE+B;AAIxB;;;;;;;;;;;;;;IC2FnB,2QAAsC;;;IAI1D,iFAEE;IAAA,uDAAyB;IAAA,4DAAa;;;IADtC,wGAA4C;IAC5C,0DAAyB;IAAzB,iGAAyB;;;IAK3B,iFAAkE;IAAA,uDAAiB;IAAA,4DAAa;;;IAArD,kFAAsB;IAAC,0DAAiB;IAAjB,+EAAiB;;;IAKnF,iFAC0B;IAAA,uDAC1B;IAAA,4DAAa;;;IAFmC,yGAA6C;IACnE,0DAC1B;IAD0B,2FAC1B;;;IAYoB,gJAAe;;;IAKvC,4EACE;IAAA,6PACF;IAAA,4DAAY;;ADtHnB,MAAM,kBAAkB;IAU7B,YACU,OAAyB,EACzB,WAAwB,EACf,QAAqB,EAC9B,qBAA4C;QAH5C,YAAO,GAAP,OAAO,CAAkB;QACzB,gBAAW,GAAX,WAAW,CAAa;QACf,aAAQ,GAAR,QAAQ,CAAa;QAC9B,0BAAqB,GAArB,qBAAqB,CAAuB;QAZtD,yBAAoB,GAAa,EAAE,CAAC;QACpC,YAAO,GAAa,EAAE,CAAC;QACvB,eAAU,GAAwB,EAAE,CAAC;QAGrC,oBAAe,GAAgB,IAAI,0DAAW,EAAE,CAAC;QACjD,sBAAiB,GAAgB,IAAI,0DAAW,EAAE,CAAC;QAQjD,IAAI,CAAC,qBAAqB,CAAC,YAAY,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,CAAC;QACnF,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,OAAO,CAAC,uBAAuB,EAAE,CAAC;QACnE,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,iEAAmB,CAAC,KAAK,CAAC,CAAC;QACrE,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE;QAE9C,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,iEAAmB,CAAC,KAAK,EAAE,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;QACpG,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;QACxE,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,kBAAkB,EAAE,CAAC;IAC7C,CAAC;IAED,QAAQ;IACR,CAAC;IAED,SAAS;QACP,MAAM,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC;QACnC,MAAM,QAAQ,GAAW;YACvB,MAAM,EAAE,KAAK,CAAC,MAAM;YACpB,QAAQ,EAAE,KAAK,CAAC,QAAQ;SACzB;QACD,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,QAAQ,CAAC;aAC7B,SAAS,CACR,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,WAAW,CAAC,2BAA2B,QAAQ,CAAC,MAAM,qBAAqB,CAAC,EACtF,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAC7B,CAAC;IACN,CAAC;IAEO,kBAAkB;QACxB,OAAO,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;YAC5B,QAAQ,EAAE,IAAI,CAAC,eAAe;YAC9B,UAAU,EAAE,IAAI,CAAC,iBAAiB;YAClC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC;SACpC,CAAC,CAAC;IACL,CAAC;IAEO,WAAW,CAAC,GAAQ;QAC1B,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,EAAE,SAAS,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC;IACzD,CAAC;;oFApDU,kBAAkB;kGAAlB,kBAAkB;;QChB/B,yEACE;QAAA,2EACE;QAAA,kFACE;QAAA,oFACE;QAAA,4IACF;QAAA,4DAAiB;QACjB,uFACE;QAAA,4RACA;QAAA,qEACE;QAAA,wEACE;QAAA,saACF;QAAA,4DAAK;QACL,yEACE;QAAA,yTAA+C;QAAA,iEAC/C;QAAA,sRACF;QAAA,4DAAK;QACL,yEACE;QAAA,ySAA8C;QAAA,iEAC9C;QAAA,4TAAkD;QAAA,iEAClD;QAAA,oSAA8C;QAAA,iEAC9C;QAAA,yYACF;QAAA,4DAAK;QACL,yEACE;QAAA,2VAAwD;QAAA,iEACxD;QAAA,0SACF;QAAA,4DAAK;QACP,4DAAK;QACP,4DAAoB;QACtB,4DAAkB;QAClB,oFACE;QAAA,2EACE;QAAA,8FACE;QAgEA,4EACE;QAAA,gIAA8E;QAC9E,0EACE;QAAA,qFACE;QAAA,kFACE;QAAA,+HAEwC;QAC1C,4DAAa;QACf,4DAAiB;QACjB,qFACE;QAAA,kFACE;QAAA,+HAAgG;QAClG,4DAAa;QACf,4DAAiB;QACjB,sFACE;QAAA,kFACE;QAAA,+HAEa;QACf,4DAAa;QACb,uEAAqB;QACvB,4DAAiB;QACnB,4DAAM;QACN,uEACE;QAAA,8EAAuF;QAAA,0FAAK;QAAA,4DAAS;QACrG,8EAAyD;QAAA,0FAAK;QAAA,4DAAS;QACzE,4DAAM;QACR,4DAAW;QAEX,4EACE;QAAA,gIAAuD;QACvD,2EACE;QAAA,8EACE;QADuC,2IAAS,eAAW,IAAC;QAC5D,6IACF;QAAA,4DAAS;QACT,6HAEY;QACd,4DAAM;QACN,uEACE;QAAA,8EAAuF;QAAA,0FAAK;QAAA,4DAAS;QACrG,8EAAkE;QAA1B,yRAAS,WAAe,IAAC;QAAC,qIAAa;QAAA,4DAAS;QAC1F,4DAAM;QACR,4DAAW;QACb,4DAAuB;QACzB,4DAAO;QACT,4DAAmB;QACrB,4DAAW;QACb,4DAAM;;QAnHM,2DAAuB;QAAvB,oFAAuB;QAuE2B,0DAAuB;QAAvB,6FAAuB;QAOpC,0DAAU;QAAV,gFAAU;QAKR,0DAAa;QAAb,mFAAa;QAgBa,2DAA6B;QAA7B,0FAA6B;QAGhF,0DAAsB;QAAtB,sFAAsB;;6FDpHnC,kBAAkB;cAL9B,uDAAS;eAAC;gBACT,QAAQ,EAAE,gBAAgB;gBAC1B,WAAW,EAAE,6BAA6B;gBAC1C,SAAS,EAAE,CAAC,4BAA4B,CAAC;aAC1C;;;;;;;;;;;;;;AEfD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkD;AACkB;AAE7B;;;;;;;;;;;;;ICkB7B,0EACE;IAAA,6EAEE;IAAA,2FACF;IAAA,4DAAS;IAYX,4DAAM;;;IACN,sEACE;IAAA,sFACuB;IACzB,4DAAM;;;AD5BT,MAAM,cAAc;IASzB,YACU,WAAwB,EACxB,KAAqB,EACrB,MAAc,EACd,qBAA4C,EAC5C,QAAqB;QAJrB,gBAAW,GAAX,WAAW,CAAa;QACxB,UAAK,GAAL,KAAK,CAAgB;QACrB,WAAM,GAAN,MAAM,CAAQ;QACd,0BAAqB,GAArB,qBAAqB,CAAuB;QAC5C,aAAQ,GAAR,QAAQ,CAAa;QAb/B,SAAI,GAAG,IAAI,CAAC;QACZ,eAAU,GAAG,EAAE,CAAC;QAGhB,YAAO,GAAG,KAAK,CAAC;QAChB,cAAS,GAAG,KAAK,CAAC;QAUhB,IAAI,IAAI,CAAC,qBAAqB,CAAC,gBAAgB,EAAE;YAC/C,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;SACtC;IACH,CAAC;IAED,QAAQ;QACN,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;YACtC,KAAK,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC;YAChC,QAAQ,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC;SACpC,CAAC,CAAC;QAEH,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,WAAW,CAAC,WAAW,CAAC,IAAI,WAAW,CAAC;IAC/E,CAAC;IAED,IAAI,QAAQ;QACV,OAAO,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC;IACjC,CAAC;IACD,yCAAyC;IACzC,aAAa;QACX,OAAO,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,4BAA4B,CAAC,CAAC,CAAC,EAAE,CAAC;IAC9F,CAAC;IACD,gBAAgB;QACd,OAAO,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,6BAA6B,CAAC,CAAC,CAAC,EAAE,CAAC;IAClG,CAAC;IAED,QAAQ;QACN,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QAEtB,IAAI,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE;YAC1B,OAAO;SACR;QAED,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QACpB,qBAAqB;QACrB,IAAI,CAAC,qBAAqB;aACvB,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC;aAC3B,IAAI,CAAC,4DAAK,EAAE,CAAC;aACb,SAAS,CACR,GAAG,EAAE;YACH,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;YACrB,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;YACvC,IAAI,CAAC,WAAW,CAAC,uBAAuB,CAAC,CAAC;QAC5C,CAAC,EACD,CAAC,KAAwB,EAAE,EAAE;YAC3B,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;YAC7B,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;QACvB,CAAC,CACF,CAAC;QACJ,YAAY;IACd,CAAC;IAED,cAAc;QACZ,IAAI,CAAC,WAAW,CAAC,0BAA0B,CAAC,CAAC;IAC/C,CAAC;IAEO,gBAAgB,CAAC,SAA4B;QACnD,OAAO,CAAC,GAAG,CAAC,6FAA6F,EAAE,SAAS,CAAC;QACrH,IAAI,SAAS,CAAC,KAAK,CAAC,KAAK,IAAI,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,EAAE;YACzD,MAAM,GAAG,GAAG,SAAS,CAAC,KAAK,CAAC,KAAmB,CAAC;YAChD,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC,EAAE;gBACf,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC;YACvD,CAAC,CAAC;SACH;aAAM;YACL,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC;SACnE;IACH,CAAC;IACO,WAAW,CAAC,OAAY;QAC9B,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC;QACtD,wBAAwB;IAC1B,CAAC;;4EArFU,cAAc;8FAAd,cAAc;QCb3B,yEACE;QAAA,yEACE;QAAA,yEACE;QAAA,yEACE;QAAA,qEAAI;QAAA,qIAAc;QAAA,4DAAK;QACvB,0EACE;QAD4B,0IAAY,cAAU,IAAC;QACnD,yEACE;QAAA,oFACE;QAAA,4EAAW;QAAA,iEAAK;QAAA,4DAAY;QAC5B,uEAEF;QAAA,4DAAiB;QACnB,4DAAM;QACN,0EACE;QAAA,qFACE;QAAA,6EAAW;QAAA,gGAAM;QAAA,4DAAY;QAC7B,uEAEA;QAAA,+EAA2C;QAAvB,iKAAsB;QAAC,wDAA4C;QAAA,4DAAW;QACpG,4DAAiB;QACnB,4DAAM;QACN,6GAgBM;QACN,6GAGM;QACR,4DAAO;QACT,4DAAM;QACR,4DAAM;QACR,4DAAM;QACR,4DAAM;;QAzCQ,0DAAuB;QAAvB,oFAAuB;QAKrB,0DAAgE;QAAhE,sLAAgE;QAMlD,0DAAmC;QAAnC,gGAAmC;QAER,0DAA4C;QAA5C,2GAA4C;QAGrF,0DAAc;QAAd,8EAAc;QAiBd,0DAAa;QAAb,6EAAa;;6FDzBhB,cAAc;cAL1B,uDAAS;eAAC;gBACT,QAAQ,EAAE,WAAW;gBACrB,WAAW,EAAE,wBAAwB;gBACrC,SAAS,EAAE,CAAC,uBAAuB,CAAC;aACrC;;;;;;;;;;;;;;AEZD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0D;AACU;AACK;;;;;;;;;AASlE,MAAM,0BAA0B;IAIrC,YACU,WAAwB,EACzB,SAAmD,EAC1B,IAAU;QAFlC,gBAAW,GAAX,WAAW,CAAa;QACzB,cAAS,GAAT,SAAS,CAA0C;QAC1B,SAAI,GAAJ,IAAI,CAAM;QAE1C,IAAI,CAAC,QAAQ,GAAG,IAAI,wDAAS,CAAC;YAC5B,KAAK,EAAE,IAAI,0DAAW,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC;SAChD,CAAC,CAAC;IACL,CAAC;IAED,QAAQ,KAAK,CAAC;IAEd,QAAQ,CAAC,KAAa;QACpB,kCAAkC;QAClC,6BAA6B;QAC7B,yDAAyD;QACzD,sCAAsC;QACtC,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;IACzB,CAAC;;oGAtBU,0BAA0B,+UAO3B,wEAAe;0GAPd,0BAA0B;QCXvC,2SAEA;QAAA,0EACE;QAAA,iFACE;QAAA,0EAAgB;QAAA,mEAAQ;QAAA,4DAAO;QAC/B,sEACA;QAAA,8EAAoB;QAAA,oEAAS;QAAA,4DAAW;QAC1C,4DAAiB;QACjB,4EACE;QAD4D,kJAAS,aAAS,iBAAa,OAAO,CAAC,OAAO,IAAC;QAC3G,mHACF;QAAA,4DAAS;QACX,4DAAO;;QATD,0DAAsB;QAAtB,mFAAsB;QAMM,0DAA6B;QAA7B,0FAA6B;;6FDGlD,0BAA0B;cALtC,uDAAS;eAAC;gBACT,QAAQ,EAAE,0BAA0B;gBACpC,WAAW,EAAE,uCAAuC;gBACpD,SAAS,EAAE,CAAC,sCAAsC,CAAC;aACpD;;sBAQI,oDAAM;uBAAC,wEAAe;;;;;;;;;;;;;;AElB3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkD;AACkB;AAE7B;;;;;;;;;;;;;ICsB7B,sEACE;IAAA,sFACyC;IAC3C,4DAAM;;;ADdT,MAAM,iBAAiB;IAY5B,YACU,WAAwB,EACxB,MAAc,EACd,qBAA4C,EAC5C,QAAqB;QAHrB,gBAAW,GAAX,WAAW,CAAa;QACxB,WAAM,GAAN,MAAM,CAAQ;QACd,0BAAqB,GAArB,qBAAqB,CAAuB;QAC5C,aAAQ,GAAR,QAAQ,CAAa;QAf/B,SAAI,GAAG,IAAI,CAAC;QACZ,YAAO,GAAG,KAAK,CAAC;QAChB,cAAS,GAAG,KAAK,CAAC;QAGlB,eAAU,GAAG,EAAE,CAAC;QAYd,IAAI,IAAI,CAAC,qBAAqB,CAAC,gBAAgB,EAAE;YAC/C,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;SAC7B;IACH,CAAC;IAbD,IAAI,QAAQ;QACV,OAAO,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC;IAC5B,CAAC;IAaD,QAAQ;QACN,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;YACjC,KAAK,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC;YAChC,QAAQ,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC;SACpC,CAAC,CAAC;IACL,CAAC;IAED,QAAQ;QACN,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QACtB,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;YACrB,OAAO;SACR;QAED,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QACpB,qBAAqB;QACrB,IAAI,CAAC,qBAAqB;aACvB,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC;aACzB,IAAI,CAAC,4DAAK,EAAE,CAAC;aACb,SAAS,CAAC,CAAC,CAAC,EAAE;YACb,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;YACpC,IAAI,CAAC,WAAW,CAAC,qBAAqB,CAAC,CAAC;YACxC,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;QACvB,CAAC,EAAE,KAAK,CAAC,EAAE;YACT,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;YACrB,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;QAC/B,CAAC,CAAC,CAAC;QACL,YAAY;IACd,CAAC;IAEO,gBAAgB,CAAC,OAA0B;QACjD,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,EAAE,IAAI,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC;IACtE,CAAC;IACO,WAAW,CAAC,OAAY;QAC9B,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC;IACxD,CAAC;;kFAzDU,iBAAiB;iGAAjB,iBAAiB;QCd9B,yEACE;QAAA,yEACE;QAAA,yEACE;QAAA,yEACE;QAAA,qEAAI;QAAA,6HAAW;QAAA,4DAAK;QACpB,0EACE;QADuB,6IAAY,cAAU,IAAC;QAC9C,yEACE;QAAA,oFACE;QAAA,4EAAW;QAAA,kEAAM;QAAA,4DAAY;QAC7B,uEAEF;QAAA,4DAAiB;QACnB,4DAAM;QACN,0EACE;QAAA,qFACE;QAAA,6EAAW;QAAA,gGAAM;QAAA,4DAAY;QAC7B,uEAEA;QAAA,+EAA2C;QAAvB,oKAAsB;QAAC,wDAA4C;QAAA,4DAAW;QACpG,4DAAiB;QACnB,4DAAM;QACN,2EACE;QAAA,8EACqD;QAAA,wKAAkB;QAAA,4DAAS;QAClF,4DAAM;QACN,gHAGM;QACR,4DAAO;QACT,4DAAM;QACR,4DAAM;QACR,4DAAM;QACR,4DAAM;;QA5BQ,0DAAkB;QAAlB,+EAAkB;QAKhB,0DAAgE;QAAhE,sLAAgE;QAMlD,0DAAmC;QAAnC,gGAAmC;QAER,0DAA4C;QAA5C,2GAA4C;QAOrF,0DAAa;QAAb,6EAAa;;6FDXhB,iBAAiB;cAL7B,uDAAS;eAAC;gBACT,QAAQ,EAAE,cAAc;gBACxB,WAAW,EAAE,2BAA2B;gBACxC,SAAS,EAAE,CAAC,0BAA0B,CAAC;aACxC;;;;;;;;;;;;;;AEbD;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0C;;;;;AAUnC,MAAM,YAAY;IAIvB,YAAoB,MAAc,EAAU,qBAA4C;QAApE,WAAM,GAAN,MAAM,CAAQ;QAAU,0BAAqB,GAArB,qBAAqB,CAAuB;QAFxF,kBAAa,GAAG,KAAK,CAAC;QAGpB,IAAI,CAAC,qBAAqB,CAAC,YAAY,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE;YACvD,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;YACxB,IAAI,IAAI,EAAE;gBACR,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;aAC3B;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED,MAAM;QACJ,IAAI,CAAC,qBAAqB,CAAC,MAAM,EAAE,CAAC;QACpC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;IACnC,CAAC;;wEAhBU,YAAY;4FAAZ,YAAY;QCVzB,qFACE;QAAA,2EAA+B;QACjC,4DAAqB;;6FDQR,YAAY;cALxB,uDAAS;eAAC;gBACT,QAAQ,EAAE,UAAU;gBACpB,WAAW,EAAE,sBAAsB;gBACnC,SAAS,EAAE,CAAC,qBAAqB,CAAC;aACnC;;;;;;;;;;;;;;AETD;AAAA;AAAA;AAAA;AAAA;AAA2C;;;;AAKpC,MAAM,SAAS;IACpB,YAAoB,MAAc,EAAU,qBAA4C;QAApE,WAAM,GAAN,MAAM,CAAQ;QAAU,0BAAqB,GAArB,qBAAqB,CAAuB;IAAI,CAAC;IAE7F,WAAW,CAAC,KAA6B,EAAE,KAA0B;QACnE,MAAM,WAAW,GAAG,IAAI,CAAC,qBAAqB,CAAC,gBAAgB,CAAC;QAChE,IAAI,WAAW,EAAE;YACf,4BAA4B;YAC5B,OAAO,IAAI,CAAC;SACb;QAED,8DAA8D;QAC9D,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,EAAE,EAAE,WAAW,EAAE,EAAE,SAAS,EAAE,KAAK,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;QAC5E,OAAO,KAAK,CAAC;IACf,CAAC;;kEAbU,SAAS;4FAAT,SAAS,WAAT,SAAS,mBADI,MAAM;6FACnB,SAAS;cADrB,wDAAU;eAAC,EAAE,UAAU,EAAE,MAAM,EAAE;;;;;;;;;;;;;;ACJlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0D;AACjB;AACsC;AAC5B;AACJ;AACmB;AACS;AACjB;AACM;AACH;AACF;AACE;AACN;AACA;AACS;AACT;AACA;AACW;AACT;AACqB;AACnB;AACA;AACF;AACI;AACJ;AACI;AACS;AACH;AACZ;AACE;AACE;AAC8B;AACb;AACS;AACyB;AAC5B;AACnC;AACP;AACoC;AACS;AACH;AAC2C;AAC/B;AACA;AACjC;AACF;AACI;;;;AAgExD,MAAM,SAAS;;wFAAT,SAAS,cAFR,4DAAY;4IAEb,SAAS,mBART;QACT,iFAAmB;QACnB,2EAAmB;QACnB,EAAE,OAAO,EAAE,sEAAiB,EAAE,QAAQ,EAAE,wEAAc,EAAE,KAAK,EAAE,IAAI,EAAE;QACrE,EAAE,OAAO,EAAE,sEAAiB,EAAE,QAAQ,EAAE,4EAAgB,EAAE,KAAK,EAAE,IAAI,EAAE;KACxE,YA5CQ;YACP,uEAAa;YACb,4FAAuB;YACvB,kEAAmB;YACnB,qEAAgB;YAChB,gEAAY;YACZ,4DAAY;YACZ,0DAAW;YACX,qDAAO;YAEP,WAAW;YACX,0EAAgB;YAChB,yEAAe;YACf,2EAAgB;YAChB,qEAAa;YACb,qEAAa;YACb,8EAAiB;YACjB,qEAAa;YACb,qEAAa;YACb,gFAAkB;YAClB,uEAAc;YACd,qEAAa;YACb,6EAAiB;YACjB,4FAAwB;YACxB,yEAAe;YACf,yEAAe;YACf,uEAAc;YACd,uEAAc;YACd,2EAAgB;YAChB,uEAAc;YACd,2EAAgB;YAChB,oFAAoB;YACpB,qEAAa;YACb,yEAAe;YACf,uEAAkB,CAAC,OAAO,EAAE;YAC5B,iFAAmB;YACnB,2EAAmB;SACpB;mIAUU,SAAS,mBA5DlB,4DAAY;QACZ,2GAAsB;QACtB,2GAAsB;QACtB,kGAAiB;QACjB,yFAAc;QACd,kGAAiB;QACjB,yFAAc;QACd,+FAAkB;QAClB,+FAAkB;QAClB,sGAAgB;QAChB,0IAA0B;QAC1B,2HAAuB,aAGvB,uEAAa;QACb,4FAAuB;QACvB,kEAAmB;QACnB,qEAAgB;QAChB,gEAAY;QACZ,4DAAY;QACZ,0DAAW;QAGX,WAAW;QACX,0EAAgB;QAChB,yEAAe;QACf,2EAAgB;QAChB,qEAAa;QACb,qEAAa;QACb,8EAAiB;QACjB,qEAAa;QACb,qEAAa;QACb,gFAAkB;QAClB,uEAAc;QACd,qEAAa;QACb,6EAAiB;QACjB,4FAAwB;QACxB,yEAAe;QACf,yEAAe;QACf,uEAAc;QACd,uEAAc;QACd,2EAAgB;QAChB,uEAAc;QACd,2EAAgB;QAChB,oFAAoB;QACpB,qEAAa;QACb,yEAAe,sEAEf,iFAAmB;QACnB,2EAAmB;6FAWV,SAAS;cA9DrB,sDAAQ;eAAC;gBACR,YAAY,EAAE;oBACZ,4DAAY;oBACZ,2GAAsB;oBACtB,2GAAsB;oBACtB,kGAAiB;oBACjB,yFAAc;oBACd,kGAAiB;oBACjB,yFAAc;oBACd,+FAAkB;oBAClB,+FAAkB;oBAClB,sGAAgB;oBAChB,0IAA0B;oBAC1B,2HAAuB;iBACxB;gBACD,OAAO,EAAE;oBACP,uEAAa;oBACb,4FAAuB;oBACvB,kEAAmB;oBACnB,qEAAgB;oBAChB,gEAAY;oBACZ,4DAAY;oBACZ,0DAAW;oBACX,qDAAO;oBAEP,WAAW;oBACX,0EAAgB;oBAChB,yEAAe;oBACf,2EAAgB;oBAChB,qEAAa;oBACb,qEAAa;oBACb,8EAAiB;oBACjB,qEAAa;oBACb,qEAAa;oBACb,gFAAkB;oBAClB,uEAAc;oBACd,qEAAa;oBACb,6EAAiB;oBACjB,4FAAwB;oBACxB,yEAAe;oBACf,yEAAe;oBACf,uEAAc;oBACd,uEAAc;oBACd,2EAAgB;oBAChB,uEAAc;oBACd,2EAAgB;oBAChB,oFAAoB;oBACpB,qEAAa;oBACb,yEAAe;oBACf,uEAAkB,CAAC,OAAO,EAAE;oBAC5B,iFAAmB;oBACnB,2EAAmB;iBACpB;gBACD,eAAe,EAAE,CAAC,0IAA0B,EAAE,2HAAuB,CAAC;gBACtE,SAAS,EAAE;oBACT,iFAAmB;oBACnB,2EAAmB;oBACnB,EAAE,OAAO,EAAE,sEAAiB,EAAE,QAAQ,EAAE,wEAAc,EAAE,KAAK,EAAE,IAAI,EAAE;oBACrE,EAAE,OAAO,EAAE,sEAAiB,EAAE,QAAQ,EAAE,4EAAgB,EAAE,KAAK,EAAE,IAAI,EAAE;iBACxE;gBACD,SAAS,EAAE,CAAC,4DAAY,CAAC;aAC1B;;;;;;;;;;;;;;AC7GD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAuD;AACuC;AACT;AACT;AACM;AAClC;AAC4B;AACS;AACH;AAElF,MAAM,SAAS,GAAW;IACxB,EAAE,IAAI,EAAE,WAAW,EAAE,SAAS,EAAE,0GAAsB,EAAE,WAAW,EAAE,CAAC,4DAAS,CAAC,EAAE;IAClF,EAAE,IAAI,EAAE,OAAO,EAAE,SAAS,EAAE,8FAAkB,EAAE,WAAW,EAAE,CAAC,4DAAS,CAAC,EAAE;IAC1E,EAAE,IAAI,EAAE,QAAQ,EAAE,SAAS,EAAE,8FAAkB,EAAE,WAAW,EAAE,CAAC,4DAAS,CAAC,EAAE;IAC3E,EAAE,IAAI,EAAE,UAAU,EAAE,SAAS,EAAE,iGAAiB,EAAE,WAAW,EAAE,CAAC,4DAAS,CAAC,EAAE;IAC5E,qDAAqD;IACrD,oDAAoD;IACpD,4DAA4D;IAC5D,sDAAsD;IACtD,EAAE,IAAI,EAAE,OAAO,EAAE,SAAS,EAAE,wFAAc,EAAE;IAC5C,EAAE,IAAI,EAAE,UAAU,EAAE,SAAS,EAAE,iGAAiB,EAAE;IAClD,EAAE,IAAI,EAAE,OAAO,EAAE,SAAS,EAAE,wFAAc,EAAE;IAC5C,EAAE,IAAI,EAAE,IAAI,EAAE,UAAU,EAAE,WAAW,EAAE;CACxC,CAAC;AAEK,MAAM,OAAO,GAAG,4DAAY,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;;;;;;;;;;;;;ACzBvD;AAAA;AAAA;AAAA;AAA2C;;;AAOpC,MAAM,cAAc;IACzB,YAAoB,qBAA4C;QAA5C,0BAAqB,GAArB,qBAAqB,CAAuB;IAAI,CAAC;IAErE,SAAS,CAAC,OAAyB,EAAE,IAAiB;QACpD,MAAM,WAAW,GAAG,IAAI,CAAC,qBAAqB,CAAC,gBAAgB,CAAC;QAChE,IAAI,WAAW,IAAI,WAAW,CAAC,KAAK,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE;YACtE,MAAM,OAAO,GAAG,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC;YACnD,OAAO,GAAG,OAAO,CAAC,KAAK,CAAC,EAAE,OAAO,EAAE,CAAC,CAAC;SACtC;QAED,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;IAC9B,CAAC;;4EAXU,cAAc;iGAAd,cAAc,WAAd,cAAc,mBADD,MAAM;6FACnB,cAAc;cAD1B,wDAAU;eAAC,EAAE,UAAU,EAAE,MAAM,EAAE;;;;;;;;;;;;;;ACNlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2C;AACQ;AACQ;AACtB;AAC0B;;;AAMxD,MAAM,qBAAqB;IAIhC,YAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;QAClC,IAAI,CAAC,kBAAkB,GAAG,IAAI,oDAAe,CAAO,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;QACrG,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,kBAAkB,CAAC,YAAY,EAAE,CAAC;IAC7D,CAAC;IAED,IAAW,gBAAgB;QACzB,OAAO,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC;IACvC,CAAC;IAED,IAAW,OAAO;QAChB,OAAO,IAAI,gEAAW,CAAC;YACrB,eAAe,EAAE,UAAU,IAAI,CAAC,gBAAgB,IAAI,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE;SACrH,CAAC;IACJ,CAAC;IAED,KAAK,CAAC,IAAa;QACjB,OAAO,IAAI,CAAC,IAAI;aACb,IAAI,CAAS,GAAG,wEAAW,CAAC,MAAM,cAAc,EAAE,EAAE,KAAK,EAAE,IAAI,CAAC,KAAK,EAAE,QAAQ,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC;aACjG,IAAI,CACH,0DAAG,CAAC,KAAK,CAAC,EAAE;YACV,MAAM,WAAW,GAAG,EAAE,KAAK,EAAE,IAAI,CAAC,KAAK,EAAE,KAAK,EAAE,CAAC;YACjD,YAAY,CAAC,OAAO,CAAC,aAAa,EAAE,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC,CAAC;YACjE,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;YAC1C,OAAO,IAAI,CAAC;QACd,CAAC,CAAC,CAAC,CAAC;IACV,CAAC;IAED,QAAQ,CAAC,IAAa;QACpB,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAS,GAAG,wEAAW,CAAC,MAAM,eAAe,EAAE,IAAI,CAAC;aACtE,IAAI,CACH,0DAAG,CAAC,KAAK,CAAC,EAAE;YACV,MAAM,WAAW,GAAG,EAAE,KAAK,EAAE,IAAI,CAAC,KAAK,EAAE,KAAK,EAAE,CAAC;YACjD,YAAY,CAAC,OAAO,CAAC,aAAa,EAAE,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC,CAAC;YACjE,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;YAC1C,OAAO,IAAI,CAAC;QACd,CAAC,CAAC,CAAC,CAAC;IACV,CAAC;IAED,MAAM;QACJ,iDAAiD;QACjD,YAAY,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC;QACvC,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACrC,CAAC;;0FA9CU,qBAAqB;wGAArB,qBAAqB,WAArB,qBAAqB,mBAFpB,MAAM;6FAEP,qBAAqB;cAHjC,wDAAU;eAAC;gBACV,UAAU,EAAE,MAAM;aACnB;;;;;;;;;;;;;;ACTD;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2C;AAEG;AACF;;;AAKrC,MAAM,gBAAgB;IAC3B,YAAoB,qBAA4C;QAA5C,0BAAqB,GAArB,qBAAqB,CAAuB;IAAI,CAAC;IAErE,SAAS,CAAC,OAAyB,EAAE,IAAiB;QACpD,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAC9B,iEAAU,CAAC,GAAG,CAAC,EAAE;YACf,IAAI,GAAG,CAAC,MAAM,KAAK,GAAG,EAAE;gBACtB,gDAAgD;gBAChD,IAAI,CAAC,qBAAqB,CAAC,MAAM,EAAE,CAAC;gBACpC,QAAQ,CAAC,MAAM,EAAE,CAAC;aACnB;YAED,MAAM,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC,OAAO,IAAI,GAAG,CAAC,UAAU,CAAC;YAClD,OAAO,uDAAU,CAAC,KAAK,CAAC,CAAC;QAC3B,CAAC,CAAC,CACH,CAAC;IACJ,CAAC;;gFAhBU,gBAAgB;mGAAhB,gBAAgB,WAAhB,gBAAgB,mBADH,MAAM;6FACnB,gBAAgB;cAD5B,wDAAU;eAAC,EAAE,UAAU,EAAE,MAAM,EAAE;;;;;;;;;;;;;;ACPlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2C;AAEoB;AACJ;AACC;AAEJ;;;AAMjD,MAAM,WAAW;IAItB,YAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;QAF5B,WAAM,GAAG,KAAK,CAAC;QAGrB,IAAI,CAAC,cAAc,GAAG,IAAI,oDAAe,CAAa,EAAE,CAAC,CAAC;IAC5D,CAAC;IAED;;;;OAIG;IACI,gBAAgB;QACrB,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;YAChB,OAAO,IAAI,CAAC,kBAAkB,EAAE,CAAC,IAAI,CAAC,gEAAS,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC;SAC5E;QACD,OAAO,IAAI,CAAC,cAAc,CAAC;IAC7B,CAAC;IAEO,kBAAkB;QACxB,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAa,GAAG,wEAAW,CAAC,MAAM,wBAAwB,CAAC,CAAC,IAAI,CAClF,iEAAU,CAAC,IAAI,CAAC,WAAW,CAAC,EAC5B,0DAAG,CAAC,QAAQ,CAAC,EAAE;YACb,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACnC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;QACrB,CAAC,CAAC,CACH,CAAC;IACJ,CAAC;IAEM,gBAAgB,CAAC,IAAU,EAAE,KAAa;QAC/C,MAAM,GAAG,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC;QACzC,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,wEAAW,CAAC,MAAM,2BAA2B,EAAE,GAAG,CAAC,CAAC;IAC/E,CAAC;IAEM,mBAAmB,CAAC,KAA4B;QACrD,QAAQ,KAAK,EAAE;YACb,KAAK,mEAAqB,CAAC,UAAU;gBACnC,OAAO,UAAU,CAAC;YACpB,KAAK,mEAAqB,CAAC,YAAY;gBACrC,OAAO,aAAa,CAAC;YACvB,KAAK,mEAAqB,CAAC,QAAQ;gBACjC,OAAO,kBAAkB,CAAC;YAC5B,KAAK,mEAAqB,CAAC,MAAM;gBAC/B,OAAO,4BAA4B,CAAC;YACtC,KAAK,mEAAqB,CAAC,gBAAgB;gBACzC,OAAO,aAAa,CAAC;YACvB,KAAK,mEAAqB,CAAC,aAAa;gBACtC,OAAO,oBAAoB,CAAC;SAC/B;QACD,OAAO,aAAa,CAAC;IACvB,CAAC;IAEO,WAAW,CAAC,KAAwB;QAC1C,IAAI,GAAW,CAAC;QAChB,IAAI,KAAK,CAAC,KAAK,YAAY,UAAU,EAAE;YACrC,GAAG,GAAG,mBAAmB,GAAG,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC;SACjD;aAAM;YACL,GAAG,GAAG,qBAAqB,KAAK,CAAC,KAAK,gBAAgB,KAAK,CAAC,MAAM,EAAE,CAAC;SACtE;QACD,OAAO,uDAAU,CAAC,GAAG,CAAC,CAAC;IACzB,CAAC;;sEA7DU,WAAW;8FAAX,WAAW,WAAX,WAAW,mBAFV,MAAM;6FAEP,WAAW;cAHvB,wDAAU;eAAC;gBACV,UAAU,EAAE,MAAM;aACnB;;;;;;;;;;;;;;ACXD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkD;AAGA;AAIiD;AAExC;;;;;;;;;;;;;;;;ICE/C,sFAMwB;;;IAuBxB,sFAMwB;;;IAiBxB,sFAMwB;;;IAmBxB,sFAMwB;;AD7E7B,MAAM,sBAAsB;IAYjC,YACU,qBAA4C,EAC5C,eAAiC,EACjC,WAAwB,EACzB,MAAiB;QAHhB,0BAAqB,GAArB,qBAAqB,CAAuB;QAC5C,oBAAe,GAAf,eAAe,CAAkB;QACjC,gBAAW,GAAX,WAAW,CAAa;QACzB,WAAM,GAAN,MAAM,CAAW;QAZ1B,YAAO,GAAG,IAAI,CAAC;QACf,UAAK,GAAc;YACjB,MAAM,EAAE,GAAG;YACX,aAAa,EAAE,CAAC;YAChB,OAAO,EAAE,GAAG;YACZ,QAAQ,EAAE,mEAAqB,CAAC,QAAQ;SACzC,CAAC;QAQA,IAAI,CAAC,uBAAuB,GAAG,IAAI,CAAC,qBAAqB,CAAC,YAAY,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE;YACtF,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QAC1B,CAAC,CAAC,CAAC;IACL,CAAC;IAED,UAAU;QACR,MAAM,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,+GAA0B,EAAE;YAC7D,UAAU,EAAE,QAAQ;YACpB,IAAI,EAAE,IAAI,CAAC,WAAW;YACtB,YAAY,EAAE,IAAI;SACnB,CAAC,CAAC;QACH,SAAS,CAAC,aAAa,EAAE,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE;YAC3C,IAAI,OAAO,CAAC,eAAe,CAAC,EAAE;gBAC5B,SAAS,CAAC,KAAK,EAAE,CAAC;aACnB;QACH,CAAC,CAAC,CAAC;QACH,SAAS,CAAC,WAAW,EAAE,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;IAC1D,CAAC;IAED,QAAQ;QACN,IAAI,CAAC,QAAQ,EAAE,CAAC;QAChB,IAAI,CAAC,gBAAgB,EAAE,CAAC;QACxB,IAAI,CAAC,iBAAiB,EAAE,CAAC;QACzB,IAAI,CAAC,gBAAgB,EAAE,CAAC;IAC1B,CAAC;IAED,QAAQ;QACN,8EAA8E;QAC9E,IAAI,CAAC,eAAe,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,KAAK,CAAC,EAAE;YACrD,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;YACnB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,mBAAmB,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;YAC1E,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;QACvB,CAAC,CAAC,CAAC;IACL,CAAC;IAED,gBAAgB;QACd,MAAM,mBAAmB,GAAQ;YAC/B,MAAM,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;YAC3C,MAAM,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;SACtC,CAAC;QAEF,MAAM,sBAAsB,GAAQ;YAClC,UAAU,EAAE,mEAAsB,CAAC,QAAQ,CAAC;gBAC1C,OAAO,EAAE,CAAC;aACX,CAAC;YACF,GAAG,EAAE,CAAC;YACN,IAAI,EAAE,EAAE;YACR,YAAY,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE;SACvD,CAAC;QAEF,MAAM,eAAe,GAAG,IAAI,0DAAa,CAAC,kBAAkB,EAAE,mBAAmB,EAAE,sBAAsB,CAAC,CAAC;QAE3G,IAAI,CAAC,0BAA0B,CAAC,eAAe,CAAC,CAAC;IACnD,CAAC;IAED,iBAAiB;QACf,MAAM,qBAAqB,GAAG;YAC5B,MAAM,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;YACpE,MAAM,EAAE,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;SACvE,CAAC;QACF,MAAM,wBAAwB,GAAG;YAC/B,KAAK,EAAE;gBACL,QAAQ,EAAE,KAAK;aAChB;YACD,GAAG,EAAE,CAAC;YACN,IAAI,EAAE,IAAI;YACV,YAAY,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE;SACvD,CAAC;QACF,MAAM,iBAAiB,GAAU;YAC/B;gBACE,+BAA+B;gBAC/B;oBACE,iBAAiB,EAAE,CAAC;oBACpB,KAAK,EAAE;wBACL,qBAAqB,EAAE,UAAU,KAAK;4BACpC,OAAO,KAAK,CAAC,CAAC,CAAC,CAAC;wBAClB,CAAC;qBACF;iBACF;aACF;SACF,CAAC;QACF,MAAM,iBAAiB,GAAG,IAAI,yDAAY,CAAC,oBAAoB,EAAE,qBAAqB,EAAE,wBAAwB,EAAE,iBAAiB,CAAC,CAAC;QAErI,IAAI,CAAC,yBAAyB,CAAC,iBAAiB,CAAC,CAAC;IACpD,CAAC;IAED,gBAAgB;QACd,MAAM,uBAAuB,GAAQ;YACnC,MAAM,EAAE,CAAC,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;YAC1D,MAAM,EAAE,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;SACnD,CAAC;QAEF,MAAM,0BAA0B,GAAQ;YACtC,UAAU,EAAE,mEAAsB,CAAC,QAAQ,CAAC;gBAC1C,OAAO,EAAE,CAAC;aACX,CAAC;YACF,GAAG,EAAE,CAAC;YACN,IAAI,EAAE,IAAI;YACV,YAAY,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE;SACvD,CAAC;QAEF,MAAM,mBAAmB,GAAG,IAAI,0DAAa,CAAC,sBAAsB,EAAE,uBAAuB,EAAE,0BAA0B,CAAC,CAAC;QAE3H,IAAI,CAAC,0BAA0B,CAAC,mBAAmB,CAAC,CAAC;IACvD,CAAC;IAEO,0BAA0B,CAAC,KAAK;QACtC,IAAI,GAAQ,EAAE,MAAW,EAAE,SAAc,CAAC;QAC1C,GAAG,GAAG,CAAC,CAAC;QACR,MAAM,GAAG,EAAE,CAAC;QACZ,SAAS,GAAG,GAAG,CAAC;QAEhB,KAAK,CAAC,EAAE,CAAC,MAAM,EAAE,UAAU,IAAI;YAC7B,IAAI,IAAI,CAAC,IAAI,KAAK,MAAM,IAAI,IAAI,CAAC,IAAI,KAAK,MAAM,EAAE;gBAChD,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC;oBACnB,CAAC,EAAE;wBACD,KAAK,EAAE,GAAG;wBACV,GAAG,EAAE,GAAG;wBACR,IAAI,EAAE,IAAI,CAAC,IAAI;6BACZ,KAAK,EAAE;6BACP,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;6BACX,SAAS,CAAC,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC;6BACrC,SAAS,EAAE;wBACd,EAAE,EAAE,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,SAAS,EAAE;wBACjC,MAAM,EAAE,yDAAY,CAAC,MAAM,CAAC,YAAY;qBACzC;iBACF,CAAC,CAAC;aACJ;iBAAM,IAAI,IAAI,CAAC,IAAI,KAAK,OAAO,EAAE;gBAChC,GAAG,EAAE,CAAC;gBACN,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC;oBACnB,OAAO,EAAE;wBACP,KAAK,EAAE,GAAG,GAAG,MAAM;wBACnB,GAAG,EAAE,SAAS;wBACd,IAAI,EAAE,CAAC;wBACP,EAAE,EAAE,CAAC;wBACL,MAAM,EAAE,MAAM;qBACf;iBACF,CAAC,CAAC;aACJ;QACH,CAAC,CAAC,CAAC;QAEH,GAAG,GAAG,CAAC,CAAC;IACV,CAAC;IAEO,yBAAyB,CAAC,KAAK;QACrC,IAAI,IAAS,EAAE,OAAY,EAAE,UAAe,CAAC;QAE7C,IAAI,GAAG,CAAC,CAAC;QACT,OAAO,GAAG,EAAE,CAAC;QACb,UAAU,GAAG,GAAG,CAAC;QACjB,KAAK,CAAC,EAAE,CAAC,MAAM,EAAE,UAAU,IAAI;YAC7B,IAAI,IAAI,CAAC,IAAI,KAAK,KAAK,EAAE;gBACvB,IAAI,EAAE,CAAC;gBACP,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC;oBACnB,OAAO,EAAE;wBACP,KAAK,EAAE,IAAI,GAAG,OAAO;wBACrB,GAAG,EAAE,UAAU;wBACf,IAAI,EAAE,CAAC;wBACP,EAAE,EAAE,CAAC;wBACL,MAAM,EAAE,MAAM;qBACf;iBACF,CAAC,CAAC;aACJ;QACH,CAAC,CAAC,CAAC;QAEH,IAAI,GAAG,CAAC,CAAC;IACX,CAAC;;4FAxLU,sBAAsB;sGAAtB,sBAAsB;QCjBnC,yEACE;QACA,mFACE;QAAA,mFACE;QAAA,8EACE;QAAA,yEACE;QAAA,yEACE;QAAA,yEACE;QAAA,uEAA0B;QAAA,8DAAG;QAAA,4DAAI;QACnC,4DAAM;QACN,uEAAyB;QAAA,mKAAkB;QAAA,4DAAI;QAC/C,sJAMwB;QACxB,0EACE;QAAA,wDACA;QAAA,yEAAO;QAAA,yEAAG;QAAA,4DAAQ;QACpB,4DAAK;QACP,4DAAM;QACN,2EACE;QAAA,2EACE;QAAA,yEAAsC;QAAA,mEAAO;QAAA,4DAAI;QACjD,yEAAkB;QAAA,gLAAqB;QAAA,4DAAI;QAC7C,4DAAM;QACR,4DAAM;QACR,4DAAM;QACR,4DAAW;QACb,4DAAgB;QAChB,oFACE;QAAA,+EACE;QAAA,0EACE;QAAA,2EACE;QAAA,0EACE;QAAA,wEAA0B;QAAA,wEAAY;QAAA,4DAAI;QAC5C,4DAAM;QACN,wEAAyB;QAAA,uJAAgB;QAAA,4DAAI;QAC7C,sJAMwB;QACxB,0EAAuB;QAAA,wDAAmB;QAAA,4DAAK;QACjD,4DAAM;QACN,2EACE;QAAA,2EAAmB;QAAA,wEAA0B;QAAA,sEAAU;QAAA,4DAAI;QAAC,kJAAe;QAAA,4DAAM;QACnF,4DAAM;QACR,4DAAM;QACR,4DAAW;QACb,4DAAgB;QAChB,oFACE;QAAA,+EACE;QAAA,0EACE;QAAA,2EACE;QAAA,0EACE;QAAA,wEAA0B;QAAA,sEAAU;QAAA,4DAAI;QAC1C,4DAAM;QACN,wEAAyB;QAAA,+HAAY;QAAA,4DAAI;QACzC,sJAMwB;QACxB,0EAAuB;QAAA,wDAAc;QAAA,4DAAK;QAC5C,4DAAM;QACN,2EACE;QAAA,2EACE;QAAA,wEAA0B;QAAA,uEAAW;QAAA,4DAAI;QAAC,iKAC5C;QAAA,4DAAM;QACR,4DAAM;QACR,4DAAM;QACR,4DAAW;QACb,4DAAgB;QAChB,oFACE;QAAA,+EACE;QAAA,0EACE;QAAA,2EACE;QAAA,0EACE;QAAA,yEAAyE;QAA/C,0IAAS,gBAAY,IAAC;QAAyB,kFAAsB;QAAA,4DAAI;QACrG,4DAAM;QACN,wEAAyB;QAAA,uGAAQ;QAAA,4DAAI;QACrC,sJAMwB;QACxB,0EAAuB;QAAA,wDAAoB;QAAA,4DAAK;QAClD,4DAAM;QACN,2EACE;QAAA,2EAAmB;QAAA,yEAAyE;QAAvB,0IAAS,gBAAY,IAAC;QAAC,kEAAM;QAAA,4DAAI;QAAC,8JAAiB;QAAA,4DAAM;QAChI,4DAAM;QACR,4DAAM;QACR,4DAAW;QACb,4DAAgB;QAClB,4DAAgB;QAIhB,qFACE;QAAA,qFACE;QAAA,+EACE;QAAA,2EACE;QAAA,2EACE;QAAA,sEAAiD;QACnD,4DAAM;QACN,2EACE;QAAA,0EAAuB;QAAA,wJAAiB;QAAA,4DAAK;QAC7C,wEACE;QAAA,4EAA2B;QAAA,oEAAmC;QAAC,kEAAK;QAAA,4DAAO;QAAC,qKAC9E;QAAA,4DAAI;QACN,4DAAM;QACN,2EACE;QAAA,2EAAmB;QAAA,wEAA0B;QAAA,kEAAM;QAAA,4DAAI;QAAC,8KAAuB;QAAA,4DAAM;QACvF,4DAAM;QACR,4DAAM;QACR,4DAAW;QACb,4DAAgB;QAChB,qFACE;QAAA,+EACE;QAAA,2EACE;QAAA,2EACE;QAAA,sEAAmD;QACrD,4DAAM;QACN,2EACE;QAAA,0EAAuB;QAAA,+MAA2B;QAAA,4DAAK;QACvD,yEAAyB;QAAA,+JAAkB;QAAA,4DAAI;QACjD,4DAAM;QACN,4EACE;QAAA,4EAAmB;QAAA,yEAA0B;QAAA,wEAAW;QAAA,4DAAI;QAAC,sFAAwB;QAAA,4DAAM;QAC7F,4DAAM;QACR,4DAAM;QACR,4DAAW;QACb,4DAAgB;QAChB,sFACE;QAAA,gFACE;QAAA,4EACE;QAAA,4EACE;QAAA,uEAAqD;QACvD,4DAAM;QACN,4EACE;QAAA,2EAAuB;QAAA,8JAAiB;QAAA,4DAAK;QAC7C,yEAAyB;QAAA,0IAAiB;QAAA,4DAAI;QAChD,4DAAM;QACN,4EACE;QAAA,4EAAmB;QAAA,yEAA0B;QAAA,mEAAM;QAAA,4DAAI;QAAC,+KAAuB;QAAA,4DAAM;QACvF,4DAAM;QACR,4DAAM;QACR,4DAAW;QACb,4DAAgB;QAClB,4DAAgB;QAIhB,sFACE;QAAA,qFACE;QAAA,iFACE;QAAA,oFACE;QAAA,mFACE;QAAA,uKACA;QAAA,+EACE;QAAA,6EAAU;QAAA,sEAAS;QAAA,4DAAW;QAChC,4DAAS;QACT,uFACE;QAAA,+EAAsB;QAAA,+GAAU;QAAA,4DAAS;QACzC,+EAAsB;QAAA,+GAAU;QAAA,4DAAS;QAC3C,4DAAW;QACb,4DAAiB;QACnB,4DAAkB;QAClB,yFACE;QAAA,+EAAgE;QAClE,4DAAmB;QACrB,4DAAW;QACb,4DAAgB;QAChB,qFACE;QAAA,iFACE;QAAA,oFACE;QAAA,mFACE;QAAA,+IACA;QAAA,+EACE;QAAA,6EAAU;QAAA,sEAAS;QAAA,4DAAW;QAChC,4DAAS;QACT,uFACE;QAAA,+EAAsB;QAAA,+GAAU;QAAA,4DAAS;QACzC,+EAAsB;QAAA,+GAAU;QAAA,4DAAS;QAC3C,4DAAW;QACb,4DAAiB;QACnB,4DAAkB;QAClB,yFACE;QAAA,+EAAgE;QAClE,4DAAmB;QACrB,4DAAW;QACb,4DAAgB;QAClB,4DAAgB;QAClB,4DAAM;;;QA9LS,2DAAa;QAAb,6EAAa;QAOd,0DACA;QADA,sGACA;QAqBC,2DAAa;QAAb,6EAAa;QAMO,0DAAmB;QAAnB,2FAAmB;QAiBvC,2DAAa;QAAb,6EAAa;QAMO,0DAAc;QAAd,6EAAc;QAmBlC,2DAAa;QAAb,6EAAa;QAMO,0DAAoB;QAApB,4FAAoB;QAyEC,2DAA0B;QAA1B,kFAA0B;QAU3D,2DAAkB;QAAlB,2EAAkB;QASe,0DAA0B;QAA1B,kFAA0B;QAU3D,2DAAkB;QAAlB,2EAAkB;;6FDpL5B,sBAAsB;cALlC,uDAAS;eAAC;gBACT,QAAQ,EAAE,oBAAoB;gBAC9B,WAAW,EAAE,iCAAiC;gBAC9C,SAAS,EAAE,CAAC,gCAAgC,CAAC;aAC9C;;;;;;;;;;;;;;AEhBD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2C;AACoB;AAGF;AACD;AAEN;;;;AAM/C,MAAM,kBAAkB;IAI7B,YACU,IAAgB,EAChB,qBAA4C;QAD5C,SAAI,GAAJ,IAAI,CAAY;QAChB,0BAAqB,GAArB,qBAAqB,CAAuB;QAJ9C,WAAM,GAAG,KAAK,CAAC;QAMrB,IAAI,CAAC,gBAAgB,GAAG,IAAI,oDAAe,CAAe,EAAE,CAAC,CAAC;IAChE,CAAC;IAED;;;;OAIG;IACH,aAAa;QACX,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;YAChB,OAAO,IAAI,CAAC,wBAAwB,EAAE,CAAC,IAAI,CAAC,gEAAS,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC;SACpF;QACD,OAAO,IAAI,CAAC,gBAAgB,CAAC;IAC/B,CAAC;IAEO,wBAAwB;QAC9B,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAe,GAAG,qEAAW,CAAC,MAAM,OAAO,CAAE,CAAC,IAAI,CACpE,iEAAU,CAAC,IAAI,CAAC,WAAW,CAAC,EAC5B,0DAAG,CAAC,QAAQ,CAAC,EAAE;YACb,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACrC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;QACrB,CAAC,CAAC,CACH,CAAC;IACJ,CAAC;IAED,eAAe,CAAC,GAAe;QAC7B,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAM,GAAG,qEAAW,CAAC,MAAM,uBAAuB,EAAE,GAAG,CAAC,CAAC,IAAI,CAChF,iEAAU,CAAC,IAAI,CAAC,WAAW,CAAC,EAC5B,0DAAG,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CACd,CAAC;IACJ,CAAC;IAED,eAAe,CAAC,GAAe;QAC7B,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAM,GAAG,qEAAW,CAAC,MAAM,uBAAuB,EAAE,GAAG,CAAC,CAAC,IAAI,CAChF,iEAAU,CAAC,IAAI,CAAC,WAAW,CAAC,EAC5B,0DAAG,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CACd,CAAC;IACJ,CAAC;IAEM,cAAc,CAAC,MAAc;QAClC,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAS,GAAG,qEAAW,CAAC,MAAM,oCAAoC,GAAG,MAAM,CAAC,CAAC;IACnG,CAAC;IAEM,qCAAqC,CAAC,mBAAwC;QACnF,QAAQ,mBAAmB,EAAE;YAC3B,KAAK,iEAAmB,CAAC,KAAK;gBAC5B,OAAO,QAAQ,CAAC;YAClB,KAAK,iEAAmB,CAAC,KAAK;gBAC5B,OAAO,aAAa,CAAC;SACxB;IACH,CAAC;IAED,kEAAkE;IAClE,wBAAwB;IACxB,cAAc;IACd,4CAA4C;IAC5C,cAAc;IACd,kCAAkC;IAClC,cAAc;IACd,6CAA6C;IAC7C,cAAc;IACd,+BAA+B;IAC/B,cAAc;IACd,kDAAkD;IAClD,cAAc;IACd,mCAAmC;IACnC,cAAc;IACd,6BAA6B;IAC7B,cAAc;IACd,0CAA0C;IAC1C,cAAc;IACd,mCAAmC;IACnC,eAAe;IACf,mCAAmC;IACnC,MAAM;IACN,YAAY;IACZ,IAAI;IAEI,WAAW,CAAC,KAAwB;QAC1C,IAAI,GAAW,CAAC;QAEhB,IAAI,KAAK,CAAC,KAAK,YAAY,UAAU,EAAE;YACrC,GAAG,GAAG,mBAAmB,GAAG,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC;SACjD;aAAM;YACL,GAAG,GAAG,qBAAqB,KAAK,CAAC,KAAK,gBAAgB,KAAK,CAAC,MAAM,EAAE,CAAC;SACtE;QAED,OAAO,CAAC,KAAK,CAAC,oCAAoC,GAAG,GAAG,CAAC,CAAC;QAE1D,OAAO,uDAAU,CAAC,GAAG,CAAC,CAAC;IACzB,CAAC;;oFAlGU,kBAAkB;qGAAlB,kBAAkB,WAAlB,kBAAkB,mBAFjB,MAAM;6FAEP,kBAAkB;cAH9B,wDAAU;eAAC;gBACV,UAAU,EAAE,MAAM;aACnB;;;;;;;;;;;;;;ACZD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0D;AACe;;;;;;;;ICOvE,sFACE;IAAA,oEAAG;IAAA,mNAA2B;IAAA,4DAAI;IAClC,oEAAG;IAAA,uDAAuB;IAAA,4DAAI;IAC9B,oEAAG;IAAA,uDAAwB;IAAA,4DAAI;IAC/B,4EAAiE;IACnE,4DAAmB;;;IAHd,0DAAuB;IAAvB,gIAAuB;IACvB,0DAAwB;IAAxB,gJAAwB;IACd,0DAAkB;IAAlB,2EAAkB;;ADD5B,MAAM,uBAAuB;IAKlC,YACS,SAAgD,EAC/C,kBAAsC,EACd,IAAgB;QAFzC,cAAS,GAAT,SAAS,CAAuC;QAC/C,uBAAkB,GAAlB,kBAAkB,CAAoB;QACd,SAAI,GAAJ,IAAI,CAAY;IAC9C,CAAC;IAEL,QAAQ;QACN,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IACpC,CAAC;IAED,cAAc,CAAC,MAAc;QAC3B,IAAI,CAAC,kBAAkB,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE;YAC3D,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;YACf,kFAAkF;YAClF,mHAAmH;QACrH,CAAC,CAAC,CAAC;IACL,CAAC;;8FArBU,uBAAuB,qWAQxB,wEAAe;uGARd,uBAAuB;QCXpC,2EACE;QAAA,kFACE;QAAA,iFACE;QAAA,qEACE;QAAA,kOAA+B;QAAA,yEAAS;QAAA,uDAAoB;QAAA,4DAAS;QACvE,4DAAK;QACP,4DAAiB;QACnB,4DAAkB;QAClB,6IAKmB;QACrB,4DAAW;;QAVqC,0DAAoB;QAApB,+FAAoB;QAI/C,0DAAW;QAAX,2EAAW;;6FDGnB,uBAAuB;cALnC,uDAAS;eAAC;gBACT,QAAQ,EAAE,sBAAsB;gBAChC,WAAW,EAAE,mCAAmC;gBAChD,SAAS,EAAE,CAAC,kCAAkC,CAAC;aAChD;;sBASI,oDAAM;uBAAC,wEAAe;;;;;;;;;;;;;;AEnB3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2C;AAEgB;;;;AAQpD,MAAM,WAAW;IACtB,YACU,IAAgB,EAChB,qBAA4C;QAD5C,SAAI,GAAJ,IAAI,CAAY;QAChB,0BAAqB,GAArB,qBAAqB,CAAuB;IAClD,CAAC;IAEL,GAAG;QACD,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAiB,GAAG,wEAAW,CAAC,MAAM,gBAAgB,CAAC,CAAC;IAC9E,CAAC;IAED,MAAM,CAAC,OAAoB;QACzB,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,wEAAW,CAAC,MAAM,gBAAgB,EAAE,OAAO,CAAC,CAAC;IACvE,CAAC;IAED,MAAM,CAAC,EAAU;QACf,OAAO,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,wEAAW,CAAC,MAAM,UAAU,EAAE,EAAE,CAAC,CAAC;IAC/D,CAAC;;sEAhBU,WAAW;8FAAX,WAAW,WAAX,WAAW,mBAFV,MAAM;6FAEP,WAAW;cAHvB,wDAAU;eAAC;gBACV,UAAU,EAAE,MAAM;aACnB;;;;;;;;;;;;;;ACTD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2C;AAEgB;AACb;AACF;AAEa;AAGiB;;;;AAKnE,MAAM,gBAAgB;IAC3B,YACU,IAAgB,EAChB,qBAA4C;QAD5C,SAAI,GAAJ,IAAI,CAAY;QAChB,0BAAqB,GAArB,qBAAqB,CAAuB;IAClD,CAAC;IAEL,SAAS,CAAC,GAAW;QACnB,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAS,GAAG,wEAAW,CAAC,MAAM,aAAa,EAAE,GAAG,CAAC,CAAC,IAAI,CACzE,iEAAU,CAAC,IAAI,CAAC,WAAW,CAAC,CAC7B,CAAC;IACJ,CAAC;IAED,uBAAuB;QACrB,OAAO,MAAM,CAAC,MAAM,CAAC,iEAAmB,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,OAAO,GAAG,KAAK,QAAQ,CAAa,CAAC;IAC/F,CAAC;IAEM,aAAa,CAAC,SAA8B;QACjD,qCAAqC;QACrC,OAAO;YACL;gBACE,IAAI,EAAE,MAAM;gBACZ,KAAK,EAAE,GAAG;aACX;YACD;gBACE,IAAI,EAAE,KAAK;gBACX,KAAK,EAAE,KAAK;aACb;YACD;gBACE,IAAI,EAAE,YAAY;gBAClB,KAAK,EAAE,MAAM;aACd;YACD;gBACE,IAAI,EAAE,MAAM;gBACZ,KAAK,EAAE,MAAM;aACd;SACF;IACH,CAAC;IAEM,aAAa;QAClB,OAAO;YACL;gBACE,IAAI,EAAE,oEAAY,CAAC,QAAQ;gBAC3B,WAAW,EAAE,oDAAoD;gBACjE,QAAQ,EAAE,KAAK;aAChB;YACD;gBACE,IAAI,EAAE,oEAAY,CAAC,YAAY;gBAC/B,WAAW,EAAE,kDAAkD;gBAC/D,QAAQ,EAAE,IAAI;aACf;SACF;IACH,CAAC;IAED,oBAAoB;IACpB,uFAAuF;IACvF,IAAI;IAEJ,kFAAkF;IAClF,mCAAmC;IACnC,kEAAkE;IAClE,wDAAwD;IACxD,qIAAqI;IACrI,IAAI;IAEI,WAAW,CAAC,KAAwB;QAC1C,OAAO,CAAC,GAAG,CAAC,qFAAqF,EAAE,KAAK,CAAC;QACzG,IAAI,GAAW,CAAC;QAEhB,IAAI,KAAK,CAAC,KAAK,EAAE;YACf,GAAG,GAAG,mBAAmB,GAAG,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC;SACjD;aAAM;YACL,GAAG,GAAG,qBAAqB,KAAK,CAAC,KAAK,gBAAgB,KAAK,CAAC,MAAM,EAAE,CAAC;SACtE;QAED,OAAO,CAAC,KAAK,CAAC,kCAAkC,GAAG,GAAG,CAAC,CAAC;QAExD,OAAO,uDAAU,CAAC,GAAG,CAAC,CAAC;IACzB,CAAC;;gFA7EU,gBAAgB;mGAAhB,gBAAgB,WAAhB,gBAAgB,mBAFf,MAAM;6FAEP,gBAAgB;cAH5B,wDAAU;eAAC;gBACV,UAAU,EAAE,MAAM;aACnB;;;;;;;;;;;;;;ACZD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkD;AACkB;AAE7B;;;;;;;;;;;;;;AAShC,MAAM,iBAAiB;IAO5B,YACU,WAAwB,EACxB,QAAqB,EACrB,WAAwB;QAFxB,gBAAW,GAAX,WAAW,CAAa;QACxB,aAAQ,GAAR,QAAQ,CAAa;QACrB,gBAAW,GAAX,WAAW,CAAa;QAPlC,SAAI,GAAG,IAAI,CAAC;QACZ,cAAS,GAAG,KAAK,CAAC;QAClB,YAAO,GAAG,KAAK,CAAC;IAMZ,CAAC;IAEL,IAAI,QAAQ;QACV,OAAO,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC;IACnC,CAAC;IAED,QAAQ;QACN,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;YACxC,KAAK,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,KAAK,CAAC;YAC7B,YAAY,EAAE,CAAC,EAAE,CAAC;YAClB,IAAI,EAAE,CAAC,EAAE,CAAC;YACV,QAAQ,EAAE,CAAC,EAAE,CAAC;YACd,SAAS,EAAE,CAAC,EAAE,CAAC;YACf,QAAQ,EAAE,CAAC,EAAE,CAAC;YACd,MAAM,EAAE,CAAC,EAAE,CAAC;SACb,CAAC,CAAC;QAEH,IAAI,CAAC,WAAW,CAAC,GAAG,EAAE,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;IAC3E,CAAC;IAED,QAAQ;QACN,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QAEtB,IAAI,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE;YAC5B,OAAO;SACR;QAED,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QACpB,MAAM,OAAO,GAAG,IAAI,CAAC,WAAW,CAAC,KAAuB;QACxD,qBAAqB;QACrB,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,OAAO,CAAC;aAC7B,IAAI,CAAC,4DAAK,EAAE,CAAC;aACb,SAAS,CAAC,CAAC,CAAC,EAAE;YACb,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;YACrB,IAAI,CAAC,WAAW,CAAC,mBAAmB,CAAC,CAAC;QACxC,CAAC,EAAE,CAAC,KAAwB,EAAE,EAAE;YAC9B,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;YAC7B,kCAAkC;YAClC,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;QACvB,CAAC,CAAC,CAAC;QACL,YAAY;IACd,CAAC;IAEO,gBAAgB,CAAC,SAA4B;QACnD,OAAO,CAAC,GAAG,CAAC,6FAA6F,EAAE,SAAS,CAAC;QACrH,IAAI,SAAS,CAAC,KAAK,CAAC,KAAK,IAAI,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,EAAE;YACzD,MAAM,GAAG,GAAG,SAAS,CAAC,KAAK,CAAC,KAAmB,CAAC;YAChD,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC,EAAE;gBACf,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC;YACvD,CAAC,CAAC;SACH;aAAM;YACL,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC;SACnE;IACH,CAAC;IACO,WAAW,CAAC,OAAY;QAC9B,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC;IACxD,CAAC;;kFAnEU,iBAAiB;iGAAjB,iBAAiB;QCb9B,qEAAI;QAAA,0LAAsB;QAAA,4DAAK;QAC/B,0EACE;QAD8B,6IAAY,cAAU,IAAC;QACrD,mFAEE;QAAA,gFACE;QAAA,oFACE;QAAA,4EAAW;QAAA,qGAAO;QAAA,4DAAY;QAC9B,sEACF;QAAA,4DAAiB;QACnB,4DAAgB;QAEhB,gFACE;QAAA,qFACE;QAAA,6EAAW;QAAA,8EAAG;QAAA,4DAAY;QAC1B,uEACF;QAAA,4DAAiB;QACnB,4DAAgB;QAEhB,iFACE;QAAA,qFACE;QAAA,6EAAW;QAAA,iEAAK;QAAA,4DAAY;QAC5B,uEACF;QAAA,4DAAiB;QACnB,4DAAgB;QAEhB,iFACE;QAAA,qFACE;QAAA,uEACA;QAAA,6EAAW;QAAA,qIAAa;QAAA,4DAAY;QACpC,uFAA4E;QAC5E,2FACE;QAAA,0FACE;QAAA,8EAAuC;QAAA,kEAAM;QAAA,4DAAS;QACtD,8EAA6D;QAAA,iEAAK;QAAA,4DAAS;QAC7E,4DAAyB;QAC3B,4DAAiB;QACnB,4DAAiB;QACnB,4DAAgB;QAEhB,iFACE;QAAA,qFACE;QAAA,6EAAW;QAAA,0FAAK;QAAA,4DAAY;QAC5B,wEACF;QAAA,4DAAiB;QACnB,4DAAgB;QAEhB,iFACE;QAAA,+EACE;QAAA,uFACE;QAAA,wFAAoD;QAAA,kEAAC;QAAA,4DAAmB;QACxE,wFAAoD;QAAA,kEAAC;QAAA,4DAAmB;QAC1E,4DAAkB;QACpB,4DAAU;QACZ,4DAAgB;QAEhB,iFACE;QAAA,qFACE;QAAA,6EAAW;QAAA,qNAA4B;QAAA,4DAAY;QACnD,wEAEA;QAAA,gFAA2C;QAAvB,oKAAsB;QAAC,wDAA4C;QAAA,4DAAW;QACpG,4DAAiB;QACnB,4DAAgB;QAClB,4DAAgB;QAEhB,uEACE;QAAA,8EACE;QAAA,8GACF;QAAA,4DAAS;QACX,4DAAM;QACR,4DAAO;;;QArED,0DAAyB;QAAzB,sFAAyB;QA0BP,2DAA4B;QAA5B,8EAA4B;QAEX,0DAAkB;QAAlB,oEAAkB;QA6BnC,2DAAuC;QAAvC,oGAAuC;QAEZ,0DAA4C;QAA5C,2GAA4C;QAMpC,0DAA+B;QAA/B,4FAA+B;;6FDrD7E,iBAAiB;cAL7B,uDAAS;eAAC;gBACT,QAAQ,EAAE,cAAc;gBACxB,WAAW,EAAE,2BAA2B;gBACxC,SAAS,EAAE,CAAC,0BAA0B,CAAC;aACxC;;;;;;;;;;;;;;AEZD;AAAA;AAAA;AAAgE;;AASzD,MAAM,gBAAgB;IAI3B,gBAAgB,CAAC;IAEjB,eAAe;QACb,MAAM,WAAW,GAAG,IAAI,WAAW,CAAC,MAAM,CAAC;YACzC,YAAY,EAAE,qBAAqB,GAAG,IAAI,CAAC,MAAM;YACjD,QAAQ,EAAE,IAAI;YACd,MAAM,EAAE,IAAI,CAAC,KAAK,GAAG,GAAG,GAAG,IAAI,CAAC,MAAM;YACtC,QAAQ,EAAE,KAAK;YACf,QAAQ,EAAE,UAAU;YACpB,KAAK,EAAE,OAAO;YACd,KAAK,EAAE,GAAG;YACV,UAAU,EAAE,SAAS;YACrB,cAAc,EAAE,IAAI;YACpB,iBAAiB,EAAE,KAAK;YACxB,mBAAmB,EAAE,IAAI;YACzB,UAAU,EAAE,KAAK;YACjB,SAAS,EAAE,IAAI;YACf,OAAO,EAAE,CAAC,0BAA0B,CAAC;YACrC,iBAAiB,EAAE,IAAI;YACvB,WAAW,EAAE,MAAM;YACnB,YAAY,EAAE,KAAK;SACpB,CAAC,CAAC;IACL,CAAC;;gFA1BU,gBAAgB;gGAAhB,gBAAgB;QCT7B,oEAA0E;;QAArE,6GAAyC;;6FDSjC,gBAAgB;cAL5B,uDAAS;eAAC;gBACT,QAAQ,EAAE,aAAa;gBACvB,WAAW,EAAE,0BAA0B;gBACvC,SAAS,EAAE,CAAC,yBAAyB,CAAC;aACvC;sCAEU,KAAK;kBAAb,mDAAK;YACG,MAAM;kBAAd,mDAAK;;;;;;;;;;;;;;AEXR;AAAA;AAAA;AAAA;AAAA;AAA+C;AAIU;;;AAEzD,IAAI,qEAAW,CAAC,UAAU,EAAE;IAC1B,oEAAc,EAAE,CAAC;CAClB;AAED,2EAAwB,gBAAgB,CAAC,0DAAU;KAChD,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;;;;;;;;;;;;ACXpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,qC","file":"main-es2015.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { Observable, BehaviorSubject, throwError, of } from 'rxjs';\nimport { StatsView } from '../models/statsView';\nimport { switchMap } from 'rxjs/operators';\nimport { InvestorTypeCharacter } from '../models/enums';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserStatsService {\n  stats$: BehaviorSubject<StatsView>;\n  private loaded = false;\n\n  constructor(private http: HttpClient) {\n    this.stats$ = new BehaviorSubject<StatsView>({ profit: 0, account: 0, robotQuantity: 0, riskType: InvestorTypeCharacter.Guaranteed });\n  }\n\n  /**\n   * запрашивает статистику по пользователю и кеширует её\n   * @param id пользователя\n   */\n  getStatsById(id: number): Observable<StatsView> {\n    // return this.http.get<StatsView>(`${environment.apiUrl}/users/stat/${id}`)\n    // if (!this.loaded) {\n    return this.reloadedStats(id).pipe(switchMap(r => this.stats$));\n    // }\n    // return this.stats$;\n  }\n\n  private reloadedStats(id: number): Observable<StatsView> {\n    return of({ profit: 0, account: 0, robotQuantity: 0, riskType: InvestorTypeCharacter.Guaranteed })\n    // return this.http.get<StatsView>(`${environment.apiUrl}/users/stat/${id}`).pipe(\n    //   catchError(this.handleError),\n    //   tap(response => {\n    //     this.stats$.next(response);\n    //     this.loaded = true;\n    //   })\n    // );\n  }\n\n  private handleError(error: HttpErrorResponse) {\n    let msg: string;\n    if (error.error instanceof ErrorEvent) {\n      msg = 'Произошла ошибка:' + error.error.message;\n    } else {\n      msg = `Произошла ошибка: ${error.error}. Код ошибки ${error.status}`;\n    }\n    return throwError(msg);\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { BotStatsDialogComponent } from './bot-stats-dialog/bot-stats-dialog.component';\nimport { tap } from 'rxjs/operators';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { TradingBot } from 'src/app/models/trading-bot-model';\nimport { TradingBotsService } from 'src/app/services/trading-bots.service';\n\n@Component({\n  selector: 'app-table-bots',\n  templateUrl: './table-bots.component.html',\n  styleUrls: ['./table-bots.component.css'],\n})\nexport class TableBotsComponent implements OnInit {\n  displayedColumns: string[] = ['id', 'ticker', 'strategy', 'timeframe', 'profit', 'actions'];\n  dataSource: MatTableDataSource<TradingBot> = new MatTableDataSource();\n  isLoading = true;\n\n  constructor(private readonly tradingBotsService: TradingBotsService, private readonly snackBar: MatSnackBar, public dialog: MatDialog) { }\n\n  ngOnInit() {\n    this.getRobots();\n  }\n\n  getRobots() {\n    this.tradingBotsService.getUserRobots().subscribe(bots => {\n      console.log(\"🚀 ~ file: table-bots.component.ts ~ line 28 ~ TableBotsComponent ~ this.tradingBotsService.getUserRobots ~ bots\", bots)\n      this.dataSource.data = bots;\n      this.isLoading = false;\n    });\n  }\n\n  stopBot(bot: TradingBot) {\n    bot.isActive = !bot.isActive;\n    this.tradingBotsService\n      .updateRobotData(bot)\n      .pipe(\n        tap(\n          _ => {\n            (bot.isActive === false)\n              ? this.showMessage('Отправлен запрос на остановку бота')\n              : this.showMessage('Отправлен запрос на запуск бота');\n          },\n          err => this.showMessage(err)\n        ))\n      .subscribe();\n  }\n\n  delete(bot: TradingBot) {\n    this.tradingBotsService.deleteRobotData(bot).subscribe();\n    this.getRobots();\n  }\n\n  openDialog(row: TradingBot) {\n    const dialogRef = this.dialog.open(BotStatsDialogComponent, {\n      panelClass: 'dialog',\n      width: '500px',\n      height: '500px',\n      data: row,\n      disableClose: true,\n    });\n    dialogRef.backdropClick().subscribe(result => {\n      if (confirm('Закрыть окно?')) {\n        dialogRef.close();\n      }\n    });\n  }\n\n  private showMessage(msg: any) {\n    this.snackBar.open(msg, undefined, { duration: 2000 });\n  }\n}\n","<div style=\"margin:20px\">\n  <mat-card>\n    <mat-card-header>\n      <mat-card-title style=\"font-size:24px\">\n        Торговые роботы\n      </mat-card-title>\n      <mat-card-subtitle style=\"font-size:16px\">\n        <div style=\"color:black\">\n          <div>\n            В этой таблице находятся все Ваши торговые роботы с краткой статистикой. <br />\n            Добавить нового робота можно в пункте \"Создать робота\" в левой вкладке навигации. <br />\n            <br />\n            В таблице доступны следующие действия:\n          </div>\n          <ul>\n            <li>\n              <div style=\"display: inline-flex; margin-top: 1em;\">\n                по клику на работа вы откроете подробное описание и статиcтику\n                <mat-icon class=\"btn-accent\" style=\"margin-left: 1em\">reorder</mat-icon>\n              </div>\n            </li>\n            <li>\n              <div style=\"display: inline-flex; margin-top: 1em; margin-right: 1em;\">\n                <div>приостановить торговлю робота</div>\n                <mat-icon class=\"btn-usual\" style=\"margin-left: 1em\">pause_circle_filled</mat-icon>\n              </div>\n              <div style=\"display: inline-flex;\">\n                <div>и вернуть обратно в торговлю</div>\n                <mat-icon class=\"btn-usual\" style=\"margin-left: 1em\">play_circle_filled</mat-icon>\n              </div>\n            </li>\n            <li>\n              <div style=\"display: inline-flex; margin-top: 1em\">\n                <div>удалить робота</div>\n                <mat-icon class=\"btn-warn\" style=\"margin-left: 1em\">delete</mat-icon>\n              </div>\n            </li>\n          </ul>\n          <br />\n        </div>\n      </mat-card-subtitle>\n    </mat-card-header>\n    <mat-card-content>\n      <mat-progress-spinner *ngIf=\"isLoading\" class=\"example-margin\" color=\"primary\" mode=\"indeterminate\">\n      </mat-progress-spinner>\n\n      <table mat-table [dataSource]=\"dataSource\" class=\"dashboard-card\" matSort>\n        <ng-container matColumnDef=\"id\">\n          <th mat-header-cell *matHeaderCellDef mat-sort-header>№</th>\n          <td mat-cell *matCellDef=\"let row; let i = index\">{{ i + 1 }}</td>\n        </ng-container>\n\n        <!-- <ng-container matColumnDef=\"name\">\n          <th mat-header-cell *matHeaderCellDef mat-sort-header>Название</th>\n          <td mat-cell *matCellDef=\"let row\" style=\"width:15em\">\n            <app-bot-name [bot]=\"row\"></app-bot-name>\n          </td>\n        </ng-container> -->\n        <ng-container matColumnDef=\"ticker\">\n          <th mat-header-cell *matHeaderCellDef mat-sort-header>Стратегия</th>\n          <td mat-cell *matCellDef=\"let row\">{{ row.ticker }}</td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"strategy\">\n          <th mat-header-cell *matHeaderCellDef mat-sort-header>Стратегия</th>\n          <td mat-cell *matCellDef=\"let row\">{{ row.strategy }}</td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"timeframe\">\n          <th mat-header-cell *matHeaderCellDef mat-sort-header>Время работы</th>\n          <td mat-cell *matCellDef=\"let row\">{{ row.workedTime }}</td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"profit\">\n          <th mat-header-cell *matHeaderCellDef mat-sort-header>Доходность</th>\n          <td mat-cell *matCellDef=\"let row\">{{ row.profit }}%</td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"actions\">\n          <th mat-header-cell *matHeaderCellDef mat-sort-header>Действия</th>\n          <td mat-cell *matCellDef=\"let row\">\n            <mat-icon *ngIf=\"row.isActive\" (click)=\"stopBot(row)\" class=\"btn-usual\" style=\"margin-right:1em\"\n              matTooltip=\"Остановить торговлю\" matTooltipPosition=\"left\">\n              pause_circle_filled\n            </mat-icon>\n            <mat-icon *ngIf=\"!row.isActive\" (click)=\"stopBot(row)\" class=\"btn-usual\" style=\"margin-right:1em\"\n              matTooltip=\"Возобновить торговлю\" matTooltipPosition=\"left\">\n              play_circle_filled\n            </mat-icon>\n            <mat-icon (click)=\"delete(row)\" class=\"btn-warn\" style=\"margin-right:1em\" matTooltip=\"Удалить робота\">\n              delete\n            </mat-icon>\n            <mat-icon class=\"btn-accent\" matTooltip=\"Информация о роботе\" matTooltipPosition=\"right\"\n              (click)=\"openDialog(row)\">\n              reorder\n            </mat-icon>\n          </td>\n        </ng-container>\n\n        <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n        <tr mat-row *matRowDef=\"let row; columns: displayedColumns; let i = index\"></tr>\n      </table>\n    </mat-card-content>\n  </mat-card>\n</div>","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-about',\n  templateUrl: './about.component.html',\n  styleUrls: ['./about.component.css'],\n})\nexport class AboutComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit() {}\n}\n","<div class=\"jumbotron\">\n  <div class=\"container\">\n    <div class=\"row\">\n      <div class=\"col-sm-6 offset-sm-3\">\n        <h1>Здесь будет описание проекта</h1>\n      </div>\n    </div>\n  </div>\n</div>\n","import { Component, OnDestroy } from '@angular/core';\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\nimport { Observable, Subscription } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Router } from '@angular/router';\nimport { User } from '../../models/user';\nimport { AuthenticationService } from 'src/app/services/authentication.service';\n\n@Component({\n  selector: 'app-navigation-bar',\n  templateUrl: './navigation-bar.component.html',\n  styleUrls: ['./navigation-bar.component.css'],\n})\nexport class NavigationBarComponent implements OnDestroy {\n  isShow = true;\n  currentUser: User;\n  currentUserSubscription: Subscription;\n\n  isHandset$: Observable<boolean> = this.breakpointObserver.observe(Breakpoints.Handset).pipe(map(result => result.matches));\n\n  constructor(\n    private breakpointObserver: BreakpointObserver,\n    private router: Router,\n    private authenticationService: AuthenticationService\n  ) {\n    this.currentUserSubscription = this.authenticationService.$currentUser.subscribe(user => {\n      this.isShow = !!user\n      this.currentUser = user;\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.currentUserSubscription.unsubscribe();\n  }\n\n  logout() {\n    this.authenticationService.logout();\n    this.router.navigate(['/login']);\n  }\n}\n","<mat-sidenav-container class=\"sidenav-container\">\n  <!-- <mat-sidenav  -->\n  <mat-sidenav *ngIf=\"isShow\" #drawer class=\"sidenav\" fixedInViewport=\"true\"\n    [attr.role]=\"(isHandset$ | async) ? 'dialog' : 'navigation'\" [mode]=\"(isHandset$ | async) ? 'over' : 'side'\"\n    [opened]=\"!(isHandset$ | async)\">\n    <mat-toolbar color=\"primary\">Меню</mat-toolbar>\n    <mat-nav-list>\n      <a mat-list-item routerLink=\"/dashboard\">Панель</a>\n      <a mat-list-item routerLink=\"/table\">Все роботы</a>\n      <a mat-list-item routerLink=\"/create\">Создать робота</a>\n    </mat-nav-list>\n  </mat-sidenav>\n  <mat-sidenav-content>\n    <mat-toolbar *ngIf=\"isShow\" color=\"primary\" class=\"fixed-toolbar\">\n      <!-- <mat-toolbar  color=\"primary\" class=\"fixed-toolbar\" > -->\n      <button type=\"button\" aria-label=\"Toggle sidenav\" mat-icon-button (click)=\"drawer.toggle()\"\n        *ngIf=\"isHandset$ | async\">\n        <mat-icon aria-label=\"Side nav toggle icon\">menu</mat-icon>\n      </button>\n\n      <span>Добро пожаловать!</span>\n\n      <span style=\"flex:1 1 auto;\"></span>\n\n      <mat-icon matBadge=\"10\" matBadgeColor=\"warn\">notifications</mat-icon>\n      <mat-icon style=\"margin-left:1%\">verified_user</mat-icon>\n      <button mat-button style=\"margin-left:1%\" [matMenuTriggerFor]=\"menu\">{{ currentUser.email }}</button>\n      <mat-menu #menu=\"matMenu\" [overlapTrigger]=\"false\">\n        <button mat-menu-item routerLink=\"/settings\">Настройки</button>\n        <button mat-menu-item (click)=\"logout()\">Выход</button>\n      </mat-menu>\n    </mat-toolbar>\n    <mat-toolbar *ngIf=\"!isShow\">\n      <span>FinBots MVP</span>\n      <button mat-button style=\"margin-left:1%\" routerLink=\"/about\">О проекте</button>\n      <button mat-button style=\"margin-left:1%\" routerLink=\"/login\">Войти</button>\n      <button mat-button style=\"margin-left:1%\" routerLink=\"/register\">Регистрация</button>\n    </mat-toolbar>\n    <ng-content></ng-content>\n  </mat-sidenav-content>\n</mat-sidenav-container>","import { InvestorTypeCharacter } from \"src/app/models/enums\";\nimport { TradingBot } from \"src/app/models/trading-bot-model\";\n\nexport class User {\n  token: string;\n  tinkoffToken?: string;\n  email?: string;\n  profile?: UserProfile\n  riskType?: InvestorTypeCharacter;\n  bots?: TradingBot[]\n}\n\nexport interface UserProfile {\n  name: string;\n  lastName: string;\n  bitrhDate: Date;\n  gender: string;\n  location: string;\n};\n\nexport interface UserDto {\n  email: string;\n  password: string;\n}\n\nexport interface UserProfileDto {\n  email: string;\n  name: string;\n  lastName: string;\n  bitrhDate: Date;\n  gender: string;\n  location: string;\n  tinkoffToken: string;\n};","// export enum Industry {\n//   IT = 1,\n//   Medicine = 2,\n//   Transport = 3,\n//   RealEstate = 4,\n//   Consumption = 5,\n//   Finance = 6,\n//   Energy = 7,\n//   RawMaterial = 8,\n//   ElecticPower = 9,\n//   Telecommunication = 10,\n// }\n\nexport enum InvestorTypeCharacter {\n  Guaranteed = 5,\n  Conservative = 10,\n  Moderate = 15,\n  Growth = 20,\n  AggressiveGrowth = 25,\n  MaximumGrowth = 40,\n}\n\nexport enum FinancialInstrument {\n  Forex = 'Forex',\n  Stock = 'Stock',\n}\n","/**\n * Стратегии торговли\n * Список всех возможный страгтегий \n * (теханализ их источников, собственный теханализ, арбитраж и т.д.)\n */\nexport enum StrategyList {\n  simpleTV = 'simpleTV',\n  simpleRaddar = 'simpleRaddar',\n  arbitration = 'arbitration'\n}\n\n/**\n * Общая модель стратегии\n * @param payload - информация о стратегии\n * todo добавить разные интерфейсы для payload в зависимости от типа стратегии;\n * пока у payload один тип;\n */\nexport interface StrategyViewModel {\n  name: StrategyList;\n  description: string;\n  disabled: boolean;\n}","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  apiUrl: 'http://localhost:5000/api',\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { Component, OnInit } from '@angular/core';\nimport { CreateBotService } from './create-bot.service';\nimport { FormBuilder, FormGroup, Validators, FormControl } from '@angular/forms';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { User } from '../../models/user';\nimport { Ticker } from '../../models/asset';\nimport { FinancialInstrument } from '../../models/enums';\nimport { AuthenticationService } from '../../services/authentication.service';\nimport { BotDto } from 'src/app/models/trading-bot-model';\nimport { StrategyViewModel } from 'src/app/models/strategy';\n\n@Component({\n  selector: 'app-create-bot',\n  templateUrl: './create-bot.component.html',\n  styleUrls: ['./create-bot.component.css'],\n})\nexport class CreateBotComponent implements OnInit {\n  currentUser: User;\n  financialInstruments: string[] = [];\n  tickers: Ticker[] = [];\n  strategies: StrategyViewModel[] = [];\n\n  formGroup: FormGroup;\n  strategyControl: FormControl = new FormControl();\n  instrumentControl: FormControl = new FormControl();\n\n  constructor(\n    private service: CreateBotService,\n    private formBuilder: FormBuilder,\n    private readonly snackBar: MatSnackBar,\n    private authenticationService: AuthenticationService\n  ) {\n    this.authenticationService.$currentUser.subscribe(user => this.currentUser = user);\n    this.financialInstruments = this.service.getFinancialInstruments();\n    this.tickers = this.service.getSecurities(FinancialInstrument.Stock);\n    this.strategies = this.service.getStrategies()\n\n    this.instrumentControl = this.formBuilder.control(FinancialInstrument.Stock, [Validators.required]);\n    this.strategyControl = this.formBuilder.control(this.strategies[0].name)\n    this.formGroup = this.createBotFormGroup();\n  }\n\n  ngOnInit() {\n  }\n\n  submitBot() {\n    const value = this.formGroup.value;\n    const newRobot = <BotDto>{\n      ticker: value.ticker,\n      strategy: value.strategy\n    }\n    this.service.createBot(newRobot)\n      .subscribe(\n        _ => this.showMessage(`Заявка на создание бота ${newRobot.ticker} успешна отправлена`),\n        err => this.showMessage(err)\n      );\n  }\n\n  private createBotFormGroup(): FormGroup {\n    return this.formBuilder.group({\n      strategy: this.strategyControl,\n      instrument: this.instrumentControl,\n      ticker: ['', [Validators.required]],\n    });\n  }\n\n  private showMessage(msg: any) {\n    this.snackBar.open(msg, undefined, { duration: 2000 });\n  }\n}\n","<div style=\"margin:20px\">\n  <mat-card>\n    <mat-card-header>\n      <mat-card-title style=\"font-size:24px\">\n        Создать робота\n      </mat-card-title>\n      <mat-card-subtitle style=\"font-size:16px; color: black\">\n        На этой странице вы создаёте нового робота.\n        <ul>\n          <li style=\"margin-top: 1em\">\n            На текущий момент из \"Финансовых инструментов\" доступны только акции.\n          </li>\n          <li style=\"margin-top: 1em\">\n            На втором, выберите параметры доходности робота<br />\n            согласно вашему риск-профилю или вручную.\n          </li>\n          <li style=\"margin-top: 1em\">\n            На третьем - выберите инструмент для торговли.<br />\n            Вы можете выбрать акции, валюту или криптовалюту. <br />\n            При выборе акций, надо выбрать еще индустрию. <br />\n            (информационные технологии, финансы, медицина, ндвижимость и т.д.)\n          </li>\n          <li style=\"margin-top: 1em\">\n            Если все поля заполнены, то подвердите создания робота. <br />\n            Если нет, то дозаполните все необходимые поля.\n          </li>\n        </ul>\n      </mat-card-subtitle>\n    </mat-card-header>\n    <mat-card-content>\n      <form [formGroup]=\"formGroup\">\n        <mat-vertical-stepper linear=\"false\" #stepper>\n          <!-- step 1 -->\n          <!-- <mat-step>\n            <ng-template matStepLabel>Название робота и сумма инвестирования</ng-template>\n            <div style=\"display:flex; flex-wrap: wrap\">\n              <mat-form-field style=\"min-width: 30em; margin-right: 3em; margin-bottom: 2em\">\n                <input #nameInput matInput formControlName=\"name\" placeholder=\"Введите название робота\" />\n                <mat-error *ngIf=\"formGroup.hasError('required', 'name')\">\n                  Не указано название\n                </mat-error>\n                <mat-error *ngIf=\"formGroup.hasError('minlength', 'name')\">\n                  Минимальная длина: {{ formGroup.getError('minlength', 'name').requiredLength }}\n                </mat-error>\n                <mat-error *ngIf=\"formGroup.hasError('maxlength', 'name')\">\n                  Максимальная длина: {{ formGroup.getError('maxlength', 'name').requiredLength }}\n                </mat-error>\n                <mat-hint align=\"start\"><strong>Длина от 5 до 255 символов</strong> </mat-hint>\n                <mat-hint align=\"end\">{{ nameInput.value.length }} / 255</mat-hint>\n              </mat-form-field>\n              <mat-form-field style=\"width: 30em; margin-bottom: 2em\">\n                <input matInput formControlName=\"sum\" placeholder=\"Какую сумму Вы готовы инвестировать?\"\n                  type=\"number\" />\n                <span matPrefix>$&nbsp;</span>\n                <mat-error *ngIf=\"formGroup.hasError('required', 'sum')\">\n                  Не указана сумма\n                </mat-error>\n                <mat-hint align=\"start\">\n                  <strong>Рекомендуемая сумма риска от капитала на сделку не более 3%</strong>\n                </mat-hint>\n              </mat-form-field>\n            </div>\n            <div>\n              <button mat-stroked-button color=\"accent\" matStepperNext>Далее</button>\n            </div>\n          </mat-step> -->\n          <!-- step 2 -->\n          <!-- <mat-step>\n            <ng-template matStepLabel>Параметры доходности</ng-template>\n            <div style=\"display: flex; flex-wrap: wrap; margin-top:2em; height: 3em\">\n              <div>\n                <mat-radio-group style=\"margin-right:5em\" [formControl]=\"defaultProfitRisk\">\n                  <mat-radio-button color=\"primary\" value=\"true\">Рекомендованный по риск-профилю</mat-radio-button>\n                  <mat-radio-button color=\"accent\" value=\"false\">Вручную</mat-radio-button>\n                </mat-radio-group>\n              </div>\n              <div *ngIf=\"!isDefaultProfitRisk\">\n                <mat-slider\n                  thumbLabel\n                  style=\"width: 30em;\"\n                  [displayWith]=\"formatLabel\"\n                  tickInterval=\"10\"\n                  min=\"5\"\n                  max=\"90\"\n                  step=\"5\"\n                  formControlName=\"esValue\"\n                >\n                </mat-slider>\n              </div>\n            </div>\n            <div>\n              <button mat-stroked-button color=\"primary\" style=\"margin-right:2em\" matStepperPrevious>Назад</button>\n              <button mat-stroked-button color=\"accent\" matStepperNext>Далее</button>\n            </div>\n          </mat-step> -->\n          <!-- step 3 -->\n          <mat-step>\n            <ng-template matStepLabel>Финансовый инструмент и стратегия бота</ng-template>\n            <div style=\"display:flex; flex-wrap: wrap\">\n              <mat-form-field style=\"min-width: 30em; margin-right: 3em; margin-bottom: 2em\">\n                <mat-select placeholder=\"Финансовый инструмент\" formControlName=\"instrument\">\n                  <mat-option *ngFor=\"let financialInstrument of financialInstruments\"\n                    [disabled]=\"financialInstrument === 'Forex'\" [value]=\"financialInstrument\">\n                    {{ financialInstrument }}</mat-option>\n                </mat-select>\n              </mat-form-field>\n              <mat-form-field style=\"min-width: 30em; margin-right: 3em; margin-bottom: 2em\">\n                <mat-select placeholder=\"Актив\" formControlName=\"ticker\">\n                  <mat-option *ngFor=\"let ticker of tickers\" [value]=\"ticker.value\">{{ ticker.name }}</mat-option>\n                </mat-select>\n              </mat-form-field>\n              <mat-form-field style=\"width: 30em; margin-bottom: 2em\">\n                <mat-select placeholder=\"Cтратегия\" formControlName=\"strategy\">\n                  <mat-option *ngFor=\"let strategy of strategies\" [disabled]=\"strategy.name === 'simpleRaddar'\"\n                    [value]=\"strategy.name\">{{ strategy.name }}\n                  </mat-option>\n                </mat-select>\n                <mat-hint></mat-hint>\n              </mat-form-field>\n            </div>\n            <div>\n              <button mat-stroked-button color=\"primary\" style=\"margin-right:2em\" matStepperPrevious>Назад</button>\n              <button mat-stroked-button color=\"accent\" matStepperNext>Далее</button>\n            </div>\n          </mat-step>\n          <!-- step 4 -->\n          <mat-step>\n            <ng-template matStepLabel>Форма заполнена</ng-template>\n            <div style=\"margin-bottom: 2em\">\n              <button mat-raised-button color=\"accent\" (click)=\"submitBot()\" [disabled]=\"!formGroup.valid\">\n                Создать робота\n              </button>\n              <mat-error *ngIf=\"!formGroup.valid\">\n                Кнопка неактивна. Заполните все поля.\n              </mat-error>\n            </div>\n            <div>\n              <button mat-stroked-button color=\"primary\" style=\"margin-right:2em\" matStepperPrevious>Назад</button>\n              <button mat-stroked-button color=\"warn\" (click)=\"stepper.reset()\">Начать заново</button>\n            </div>\n          </mat-step>\n        </mat-vertical-stepper>\n      </form>\n    </mat-card-content>\n  </mat-card>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { first } from 'rxjs/operators';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { AuthenticationService } from 'src/app/services/authentication.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css'],\n})\nexport class LoginComponent implements OnInit {\n  hide = true;\n  valueEmail = '';\n\n  loginForm: FormGroup;\n  loading = false;\n  submitted = false;\n  returnUrl: string;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private route: ActivatedRoute,\n    private router: Router,\n    private authenticationService: AuthenticationService,\n    private snackbar: MatSnackBar\n  ) {\n    if (this.authenticationService.currentUserValue) {\n      this.router.navigate(['/dashboard']);\n    }\n  }\n\n  ngOnInit() {\n    this.loginForm = this.formBuilder.group({\n      email: ['', Validators.required],\n      password: ['', Validators.required],\n    });\n\n    this.returnUrl = this.route.snapshot.queryParams['returnUrl'] || 'dashboard';\n  }\n\n  get controls() {\n    return this.loginForm.controls;\n  }\n  // TO-DO ошибки добавить в разметку позже\n  getErrorLogin() {\n    return this.loginForm.get('email').hasError('required') ? 'Email не может быть пустым' : '';\n  }\n  getErrorPassword() {\n    return this.loginForm.get('password').hasError('required') ? 'Пароль не может быть пустым' : '';\n  }\n\n  onSubmit() {\n    this.submitted = true;\n\n    if (this.loginForm.invalid) {\n      return;\n    }\n\n    this.loading = true;\n    // setTimeout(() => {\n    this.authenticationService\n      .login(this.loginForm.value)\n      .pipe(first())\n      .subscribe(\n        () => {\n          this.loading = false;\n          this.router.navigate([this.returnUrl]);\n          this.showMessage('Вход успешно выполнен');\n        },\n        (error: HttpErrorResponse) => {\n          this.showErrorMessage(error);\n          this.loading = false;\n        }\n      );\n    // }, 1500);\n  }\n\n  forgetPassword() {\n    this.showMessage('Функция пока не доступна');\n  }\n\n  private showErrorMessage(httpError: HttpErrorResponse) {\n    console.log(\"🚀 ~ file: login.component.ts ~ line 90 ~ LoginComponent ~ showErrorMessage ~ message.error\", httpError)\n    if (httpError.error.array && httpError.error.array.length) {\n      const arr = httpError.error.array as Array<any>;\n      arr.forEach(el => {\n        this.snackbar.open(el.msg, 'OK', { duration: 6000 });\n      })\n    } else {\n      this.snackbar.open(httpError.error.msg, 'OK', { duration: 6000 });\n    }\n  }\n  private showMessage(message: any) {\n    this.snackbar.open(message, 'OK', { duration: 3000 });\n    // console.log(message);\n  }\n}\n","<div class=\"jumbotron\">\n  <div class=\"container\">\n    <div class=\"row\">\n      <div class=\"col-sm-6 offset-sm-3\">\n        <h1>Войти в панель</h1>\n        <form [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit()\">\n          <div class=\"form-group\">\n            <mat-form-field appearance=\"outline\" style=\"width:100%\">\n              <mat-label>Email</mat-label>\n              <input matInput formControlName=\"email\"\n                [ngClass]=\"{ 'is-invalid': submitted && controls.email.errors }\" />\n            </mat-form-field>\n          </div>\n          <div class=\"form-group\">\n            <mat-form-field appearance=\"outline\" style=\"width:100%\">\n              <mat-label>Пароль</mat-label>\n              <input matInput [type]=\"hide ? 'password' : 'text'\" formControlName=\"password\"\n                [ngClass]=\"{ 'is-invalid': submitted && controls.password.errors }\" />\n              <mat-icon matSuffix (click)=\"hide = !hide\">{{ hide ? 'visibility_off' : 'visibility' }}</mat-icon>\n            </mat-form-field>\n          </div>\n          <div *ngIf=\"!loading\" style=\"text-align:center\" class=\"form-group\">\n            <button mat-raised-button type=\"submit\" color=\"accent\"\n              style=\"width:60%; height: 40px; margin-bottom:10px; border-radius: 5px\">\n              Войти\n            </button>\n            <!-- <button mat-raised-button type=\"button\"\n              style=\"width:60%; height: 40px; margin-bottom:10px; border-radius: 5px\" (click)=\"forgetPassword()\">\n              <img width=\"20px\" src=\"assets/new-google-favicon-512.png\" /> Войти с помощью Google\n            </button>\n            <button mat-raised-button type=\"button\"\n              style=\"width:60%; height: 40px; margin-bottom:10px; border-radius: 5px\" (click)=\"forgetPassword()\">\n              <img width=\"20px\" src=\"assets/600px-Facebook_logo_(square).png\" /> Войти с помощью Facebook\n            </button>\n            <button mat-button style=\"width:60%\" (click)=\"forgetPassword()\">\n              Забыли пароль?\n            </button> -->\n          </div>\n          <div *ngIf=\"loading\">\n            <mat-progress-spinner style=\"margin: 0 auto\" mode=\"indeterminate\" diameter=\"80\" strokeWidth=\"9\">\n            </mat-progress-spinner>\n          </div>\n        </form>\n      </div>\n    </div>\n  </div>\n</div>","import { Component, OnInit, Inject } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { UserService } from '../../../services/user.service';\nimport { User } from '../../../models/user';\n\n@Component({\n  selector: 'app-add-modey-to-account',\n  templateUrl: './add-modey-to-account.component.html',\n  styleUrls: ['./add-modey-to-account.component.css'],\n})\nexport class AddModeyToAccountComponent implements OnInit {\n  dataForm: FormGroup;\n  editedStats: User;\n\n  constructor(\n    private userService: UserService,\n    public dialogRef: MatDialogRef<AddModeyToAccountComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: User\n  ) {\n    this.dataForm = new FormGroup({\n      summa: new FormControl('', Validators.required),\n    });\n  }\n\n  ngOnInit() { }\n\n  addMoney(summa: number) {\n    // const prev = this.data.account;\n    // this.data.account = summa;\n    // this.userService.updateAccount(this.data).subscribe();\n    // this.data.account = +prev + +summa;\n    this.dialogRef.close();\n  }\n}\n","Введите сумму для пополнения вашего кошелька\n\n<form [formGroup]=\"dataForm\">\n  <mat-form-field>\n    <span matPrefix>$ &nbsp;</span>\n    <input type=\"tel\" matInput formControlName=\"summa\" placeholder=\"Введите сумму\" />\n    <mat-icon matSuffix>mode_edit</mat-icon>\n  </mat-form-field>\n  <button class=\"btn btn-default\" [disabled]=\"dataForm.invalid\" (click)=\"addMoney(dataForm.get('summa').value)\">\n    Пополнить\n  </button>\n</form>\n","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { first } from 'rxjs/operators';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { AuthenticationService } from 'src/app/services/authentication.service';\nimport { UserService } from 'src/app/services/user.service';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css'],\n})\nexport class RegisterComponent implements OnInit {\n  hide = true;\n  loading = false;\n  submitted = false;\n\n  form: FormGroup;\n  valueEmail = '';\n\n  get controls() {\n    return this.form.controls;\n  }\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private router: Router,\n    private authenticationService: AuthenticationService,\n    private snackbar: MatSnackBar\n  ) {\n    if (this.authenticationService.currentUserValue) {\n      this.router.navigate(['/']);\n    }\n  }\n\n  ngOnInit() {\n    this.form = this.formBuilder.group({\n      email: ['', Validators.required],\n      password: ['', Validators.required],\n    });\n  }\n\n  onSubmit() {\n    this.submitted = true;\n    if (this.form.invalid) {\n      return;\n    }\n\n    this.loading = true;\n    // setTimeout(() => {\n    this.authenticationService\n      .register(this.form.value)\n      .pipe(first())\n      .subscribe(_ => {\n        this.router.navigate(['dashboard']);\n        this.showMessage('Регистрация успешна');\n        this.loading = false;\n      }, error => {\n        this.loading = false;\n        this.showErrorMessage(error);\n      });\n    // }, 1000);\n  }\n\n  private showErrorMessage(message: HttpErrorResponse) {\n    this.snackbar.open(message.error.message, 'OK', { duration: 6000 });\n  }\n  private showMessage(message: any) {\n    this.snackbar.open(message, 'OK', { duration: 3000 });\n  }\n}\n","<div class=\"jumbotron\">\n  <div class=\"container\">\n    <div class=\"row\">\n      <div class=\"col-sm-6 offset-sm-3\">\n        <h1>Регистрация</h1>\n        <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\n          <div class=\"form-group\">\n            <mat-form-field appearance=\"outline\" style=\"width:100%\">\n              <mat-label>E-mail</mat-label>\n              <input matInput formControlName=\"email\"\n                [ngClass]=\"{ 'is-invalid': submitted && controls.email.errors }\" />\n            </mat-form-field>\n          </div>\n          <div class=\"form-group\">\n            <mat-form-field appearance=\"outline\" style=\"width:100%\">\n              <mat-label>Пароль</mat-label>\n              <input matInput [type]=\"hide ? 'password' : 'text'\" formControlName=\"password\"\n                [ngClass]=\"{ 'is-invalid': submitted && controls.password.errors }\" />\n              <mat-icon matSuffix (click)=\"hide = !hide\">{{ hide ? 'visibility_off' : 'visibility' }}</mat-icon>\n            </mat-form-field>\n          </div>\n          <div class=\"form-group\" style=\"text-align:center\">\n            <button mat-raised-button color=\"accent\"\n              style=\"width:50%; margin:10px; border-radius: 5px\">Зарегистрироваться</button>\n          </div>\n          <div *ngIf=\"loading\">\n            <mat-progress-spinner style=\"margin: 0 auto\" color=\"accent\" mode=\"indeterminate\" diameter=\"80\"\n              strokeWidth=\"9\"></mat-progress-spinner>\n          </div>\n        </form>\n      </div>\n    </div>\n  </div>\n</div>","import { Component } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { User } from './models/user';\nimport { AuthenticationService } from './services/authentication.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css'],\n})\nexport class AppComponent {\n  currentUser: User;\n  isCurrentUser = false;\n\n  constructor(private router: Router, private authenticationService: AuthenticationService) {\n    this.authenticationService.$currentUser.subscribe(user => {\n      this.currentUser = user;\n      if (user) {\n        this.isCurrentUser = true;\n      }\n    });\n  }\n\n  logout() {\n    this.authenticationService.logout();\n    this.router.navigate(['/login']);\n  }\n}\n","<app-navigation-bar>\n  <router-outlet></router-outlet>\n</app-navigation-bar>\n","import { Injectable } from '@angular/core';\nimport { Router, CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { AuthenticationService } from '../services/authentication.service';\n\n@Injectable({ providedIn: 'root' })\nexport class AuthGuard implements CanActivate {\n  constructor(private router: Router, private authenticationService: AuthenticationService) { }\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n    const currentUser = this.authenticationService.currentUserValue;\n    if (currentUser) {\n      // authorised so return true\n      return true;\n    }\n\n    // not logged in so redirect to login page with the return url\n    this.router.navigate(['/login'], { queryParams: { returnUrl: state.url } });\n    return false;\n  }\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { LayoutModule } from '@angular/cdk/layout';\nimport { RouterModule } from '@angular/router';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { MDBBootstrapModule } from 'angular-bootstrap-md';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatListModule } from '@angular/material/list';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { MatBadgeModule } from '@angular/material/badge';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { WidgetsComponent } from './components/main-dashboard/widgets/widgets.component';\nimport { LoginComponent } from './components/account/login/login.component';\nimport { RegisterComponent } from './components/account/register/register.component';\nimport { BotStatsDialogComponent } from './components/table-bots/bot-stats-dialog/bot-stats-dialog.component';\nimport { TableBotsComponent } from './components/table-bots/table-bots.component';\nimport { AppComponent } from './app.component';\nimport { routing } from './app.routing';\nimport { AboutComponent } from './components/account/about/about.component';\nimport { SettingsComponent } from './components/account/settings/settings.component';\nimport { CreateBotComponent } from './components/create-bot/create-bot.component';\nimport { AddModeyToAccountComponent } from './components/main-dashboard/add-modey-to-account/add-modey-to-account.component';\nimport { MainDashboardComponent } from './components/main-dashboard/main-dashboard.component';\nimport { NavigationBarComponent } from './components/navigation-bar/navigation-bar.component';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { JwtInterceptor } from './helpers/jwt.interceptor';\nimport { ErrorInterceptor } from './helpers/error.interceptor';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    NavigationBarComponent,\n    MainDashboardComponent,\n    SettingsComponent,\n    LoginComponent,\n    RegisterComponent,\n    AboutComponent,\n    CreateBotComponent,\n    TableBotsComponent,\n    WidgetsComponent,\n    AddModeyToAccountComponent,\n    BotStatsDialogComponent,\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    ReactiveFormsModule,\n    HttpClientModule,\n    LayoutModule,\n    RouterModule,\n    FormsModule,\n    routing,\n\n    // MATERIAL\n    MatToolbarModule,\n    MatButtonModule,\n    MatSidenavModule,\n    MatIconModule,\n    MatListModule,\n    MatGridListModule,\n    MatCardModule,\n    MatMenuModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatIconModule,\n    MatSnackBarModule,\n    MatProgressSpinnerModule,\n    MatSelectModule,\n    MatSliderModule,\n    MatRadioModule,\n    MatTableModule,\n    MatTooltipModule,\n    MatBadgeModule,\n    MatStepperModule,\n    MatSlideToggleModule,\n    MatTabsModule,\n    MatDialogModule,\n    MDBBootstrapModule.forRoot(),\n    MatDatepickerModule,\n    MatNativeDateModule\n  ],\n  entryComponents: [AddModeyToAccountComponent, BotStatsDialogComponent],\n  providers: [\n    MatDatepickerModule,\n    MatNativeDateModule,\n    { provide: HTTP_INTERCEPTORS, useClass: JwtInterceptor, multi: true },\n    { provide: HTTP_INTERCEPTORS, useClass: ErrorInterceptor, multi: true }\n  ],\n  bootstrap: [AppComponent],\n})\nexport class AppModule { }\n","import { Routes, RouterModule } from '@angular/router';\nimport { MainDashboardComponent } from './components/main-dashboard/main-dashboard.component';\nimport { SettingsComponent } from './components/account/settings/settings.component';\nimport { AboutComponent } from './components/account/about/about.component';\nimport { CreateBotComponent } from './components/create-bot/create-bot.component';\nimport { AuthGuard } from './guards/auth.guard';\nimport { LoginComponent } from './components/account/login/login.component';\nimport { RegisterComponent } from './components/account/register/register.component';\nimport { TableBotsComponent } from './components/table-bots/table-bots.component';\n\nconst appRoutes: Routes = [\n  { path: 'dashboard', component: MainDashboardComponent, canActivate: [AuthGuard] },\n  { path: 'table', component: TableBotsComponent, canActivate: [AuthGuard] },\n  { path: 'create', component: CreateBotComponent, canActivate: [AuthGuard] },\n  { path: 'settings', component: SettingsComponent, canActivate: [AuthGuard] },\n  // { path: 'create', component: CreateBotComponent },\n  // { path: 'table', component: TableBotsComponent },\n  // { path: 'dashboard', component: MainDashboardComponent },\n  // { path: 'settings', component: SettingsComponent },\n  { path: 'login', component: LoginComponent },\n  { path: 'register', component: RegisterComponent },\n  { path: 'about', component: AboutComponent },\n  { path: '**', redirectTo: 'dashboard' },\n];\n\nexport const routing = RouterModule.forRoot(appRoutes);\n","import { Injectable } from '@angular/core';\nimport { HttpRequest, HttpHandler, HttpEvent, HttpInterceptor } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { AuthenticationService } from '../services/authentication.service';\n\n@Injectable({ providedIn: 'root' })\nexport class JwtInterceptor implements HttpInterceptor {\n  constructor(private authenticationService: AuthenticationService) { }\n\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    const currentUser = this.authenticationService.currentUserValue;\n    if (currentUser && currentUser.token && !request.url.includes('login')) {\n      const headers = this.authenticationService.headers;\n      request = request.clone({ headers });\n    }\n\n    return next.handle(request);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport { map } from 'rxjs/operators';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { User, UserDto } from '../models/user';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthenticationService {\n  private currentUserSubject: BehaviorSubject<User>;\n  public $currentUser: Observable<User>;\n\n  constructor(private http: HttpClient) {\n    this.currentUserSubject = new BehaviorSubject<User>(JSON.parse(localStorage.getItem('currentUser')));\n    this.$currentUser = this.currentUserSubject.asObservable();\n  }\n\n  public get currentUserValue(): User {\n    return this.currentUserSubject.value;\n  }\n\n  public get headers(): HttpHeaders {\n    return new HttpHeaders({\n      'Authorization': `Bearer ${this.currentUserValue && this.currentUserValue.token ? this.currentUserValue.token : ''}`\n    })\n  }\n\n  login(user: UserDto) {\n    return this.http\n      .post<string>(`${environment.apiUrl}/users/login`, { email: user.email, password: user.password })\n      .pipe(\n        map(token => {\n          const currentUser = { email: user.email, token };\n          localStorage.setItem('currentUser', JSON.stringify(currentUser));\n          this.currentUserSubject.next(currentUser);\n          return user;\n        }));\n  }\n\n  register(user: UserDto) {\n    return this.http.post<string>(`${environment.apiUrl}/users/signup`, user)\n      .pipe(\n        map(token => {\n          const currentUser = { email: user.email, token };\n          localStorage.setItem('currentUser', JSON.stringify(currentUser));\n          this.currentUserSubject.next(currentUser);\n          return user;\n        }));\n  }\n\n  logout() {\n    // remove user from local storage to log user out\n    localStorage.removeItem('currentUser');\n    this.currentUserSubject.next(null);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpRequest, HttpHandler, HttpEvent, HttpInterceptor } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { AuthenticationService } from '../services/authentication.service';\n\n@Injectable({ providedIn: 'root' })\nexport class ErrorInterceptor implements HttpInterceptor {\n  constructor(private authenticationService: AuthenticationService) { }\n\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    return next.handle(request).pipe(\n      catchError(err => {\n        if (err.status === 401) {\n          // auto logout if 401 response returned from api\n          this.authenticationService.logout();\n          location.reload();\n        }\n\n        const error = err.error.message || err.statusText;\n        return throwError(error);\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { Observable, BehaviorSubject, throwError } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport { catchError, tap, switchMap } from 'rxjs/operators';\nimport { Question } from '../models/questions';\nimport { InvestorTypeCharacter } from '../models/enums';\nimport { User } from '../models/user';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TaskService {\n  questionsList$: BehaviorSubject<Question[]>;\n  private loaded = false;\n\n  constructor(private http: HttpClient) {\n    this.questionsList$ = new BehaviorSubject<Question[]>([]);\n  }\n\n  /**\n   * запрашивает список вопросов\n   * (если список уже загружен, то вернет его\n   * если не загружен, то делает запрос на сервер)\n   */\n  public getQuestionsList(): Observable<Question[]> {\n    if (!this.loaded) {\n      return this.reloadQuestionList().pipe(switchMap(r => this.questionsList$));\n    }\n    return this.questionsList$;\n  }\n\n  private reloadQuestionList(): Observable<Question[]> {\n    return this.http.get<Question[]>(`${environment.apiUrl}/api/Task/GetQuestions`).pipe(\n      catchError(this.handleError),\n      tap(response => {\n        this.questionsList$.next(response);\n        this.loaded = true;\n      })\n    );\n  }\n\n  public postInvestorType(user: User, balls: number) {\n    const obj = { user: user, balls: balls };\n    return this.http.post(`${environment.apiUrl}/api/Task/GetInvestorType`, obj);\n  }\n\n  public convertRiskToString(score: InvestorTypeCharacter): string {\n    switch (score) {\n      case InvestorTypeCharacter.Guaranteed:\n        return 'Трусишка';\n      case InvestorTypeCharacter.Conservative:\n        return 'Консерватор';\n      case InvestorTypeCharacter.Moderate:\n        return 'Сбалансированный';\n      case InvestorTypeCharacter.Growth:\n        return 'Целеустремленный к прибыли';\n      case InvestorTypeCharacter.AggressiveGrowth:\n        return 'Агрессивный';\n      case InvestorTypeCharacter.MaximumGrowth:\n        return 'Продам родную мать';\n    }\n    return 'Консерватор';\n  }\n\n  private handleError(error: HttpErrorResponse) {\n    let msg: string;\n    if (error.error instanceof ErrorEvent) {\n      msg = 'Произошла ошибка:' + error.error.message;\n    } else {\n      msg = `Произошла ошибка: ${error.error}. Код ошибки ${error.status}`;\n    }\n    return throwError(msg);\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { User } from '../../models/user';\nimport * as Chartist from 'node_modules/chartist';\nimport { UserStatsService } from '../../services/user-stats.service';\nimport { StatsView } from '../../models/statsView';\nimport { MatDialog } from '@angular/material/dialog';\nimport { AddModeyToAccountComponent } from './add-modey-to-account/add-modey-to-account.component';\nimport { TaskService } from '../../services/task.service';\nimport { InvestorTypeCharacter } from '../../models/enums';\nimport { AuthenticationService } from '../../services/authentication.service';\n\n@Component({\n  selector: 'app-main-dashboard',\n  templateUrl: './main-dashboard.component.html',\n  styleUrls: ['./main-dashboard.component.css'],\n})\nexport class MainDashboardComponent implements OnInit {\n  currentUser: User;\n  currentUserSubscription: Subscription;\n  riskType: string;\n  loading = true;\n  stats: StatsView = {\n    profit: 0.0,\n    robotQuantity: 0,\n    account: 0.0,\n    riskType: InvestorTypeCharacter.Moderate,\n  };\n\n  constructor(\n    private authenticationService: AuthenticationService,\n    private userStatService: UserStatsService,\n    private taskService: TaskService,\n    public dialog: MatDialog\n  ) {\n    this.currentUserSubscription = this.authenticationService.$currentUser.subscribe(user => {\n      this.currentUser = user;\n    });\n  }\n\n  openDialog() {\n    const dialogRef = this.dialog.open(AddModeyToAccountComponent, {\n      panelClass: 'dialog',\n      data: this.currentUser,\n      disableClose: true,\n    });\n    dialogRef.backdropClick().subscribe(result => {\n      if (confirm('Закрыть окно?')) {\n        dialogRef.close();\n      }\n    });\n    dialogRef.afterClosed().subscribe(r => this.getStats());\n  }\n\n  ngOnInit(): void {\n    this.getStats();\n    this.createFirstChart();\n    this.createSecondChart();\n    this.createThirdChart();\n  }\n\n  getStats() {\n    // this.userStatService.getStatsById(this.currentUser.id).subscribe(stats => {\n    this.userStatService.getStatsById(0).subscribe(stats => {\n      this.stats = stats;\n      this.riskType = this.taskService.convertRiskToString(this.stats.riskType);\n      this.loading = false;\n    });\n  }\n\n  createFirstChart() {\n    const dataDailySalesChart: any = {\n      labels: ['M', 'T', 'W', 'T', 'F', 'S', 'S'],\n      series: [[12, 17, 7, 17, 23, 18, 38]],\n    };\n\n    const optionsDailySalesChart: any = {\n      lineSmooth: Chartist.Interpolation.cardinal({\n        tension: 0,\n      }),\n      low: 0,\n      high: 50, // creative tim: we recommend you to set the high sa the biggest value + something for a better look\n      chartPadding: { top: 0, right: 0, bottom: 0, left: 0 },\n    };\n\n    const dailySalesChart = new Chartist.Line('#dailySalesChart', dataDailySalesChart, optionsDailySalesChart);\n\n    this.startAnimationForLineChart(dailySalesChart);\n  }\n\n  createSecondChart() {\n    const datawebsiteViewsChart = {\n      labels: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],\n      series: [[542, 443, 320, 780, 553, 453, 326, 434, 568, 610, 756, 895]],\n    };\n    const optionswebsiteViewsChart = {\n      axisX: {\n        showGrid: false,\n      },\n      low: 0,\n      high: 1000,\n      chartPadding: { top: 0, right: 5, bottom: 0, left: 0 },\n    };\n    const responsiveOptions: any[] = [\n      [\n        'screen and (max-width: 640px)',\n        {\n          seriesBarDistance: 5,\n          axisX: {\n            labelInterpolationFnc: function (value) {\n              return value[0];\n            },\n          },\n        },\n      ],\n    ];\n    const websiteViewsChart = new Chartist.Bar('#websiteViewsChart', datawebsiteViewsChart, optionswebsiteViewsChart, responsiveOptions);\n\n    this.startAnimationForBarChart(websiteViewsChart);\n  }\n\n  createThirdChart() {\n    const dataCompletedTasksChart: any = {\n      labels: ['12p', '3p', '6p', '9p', '12p', '3a', '6a', '9a'],\n      series: [[230, 750, 450, 300, 280, 240, 200, 190]],\n    };\n\n    const optionsCompletedTasksChart: any = {\n      lineSmooth: Chartist.Interpolation.cardinal({\n        tension: 0,\n      }),\n      low: 0,\n      high: 1000, // creative tim: we recommend you to set the high sa the biggest value + something for a better look\n      chartPadding: { top: 0, right: 0, bottom: 0, left: 0 },\n    };\n\n    const completedTasksChart = new Chartist.Line('#completedTasksChart', dataCompletedTasksChart, optionsCompletedTasksChart);\n\n    this.startAnimationForLineChart(completedTasksChart);\n  }\n\n  private startAnimationForLineChart(chart) {\n    let seq: any, delays: any, durations: any;\n    seq = 0;\n    delays = 80;\n    durations = 500;\n\n    chart.on('draw', function (data) {\n      if (data.type === 'line' || data.type === 'area') {\n        data.element.animate({\n          d: {\n            begin: 600,\n            dur: 700,\n            from: data.path\n              .clone()\n              .scale(1, 0)\n              .translate(0, data.chartRect.height())\n              .stringify(),\n            to: data.path.clone().stringify(),\n            easing: Chartist.Svg.Easing.easeOutQuint,\n          },\n        });\n      } else if (data.type === 'point') {\n        seq++;\n        data.element.animate({\n          opacity: {\n            begin: seq * delays,\n            dur: durations,\n            from: 0,\n            to: 1,\n            easing: 'ease',\n          },\n        });\n      }\n    });\n\n    seq = 0;\n  }\n\n  private startAnimationForBarChart(chart) {\n    let seq2: any, delays2: any, durations2: any;\n\n    seq2 = 0;\n    delays2 = 80;\n    durations2 = 500;\n    chart.on('draw', function (data) {\n      if (data.type === 'bar') {\n        seq2++;\n        data.element.animate({\n          opacity: {\n            begin: seq2 * delays2,\n            dur: durations2,\n            from: 0,\n            to: 1,\n            easing: 'ease',\n          },\n        });\n      }\n    });\n\n    seq2 = 0;\n  }\n}\n","<div class=\"grid-container\">\n  <!-- первый ряд -->\n  <mat-grid-list cols=\"4\" rowHeight=\"160px\">\n    <mat-grid-tile colspan=\"1\" rowspan=\"1\">\n      <mat-card class=\"dashboard-card\" style=\"padding:0; border-radius: 3px\">\n        <div class=\"card card-stats\">\n          <div class=\"card-header card-header-warning card-header-icon\" style=\"height:73px\">\n            <div class=\"card-icon\">\n              <i class=\"material-icons\">adb</i>\n            </div>\n            <p class=\"card-category\">Количество роботов</p>\n            <mat-progress-spinner\n              *ngIf=\"loading\"\n              style=\"margin: 0 auto\"\n              mode=\"indeterminate\"\n              diameter=\"30\"\n              strokeWidth=\"3\"\n            ></mat-progress-spinner>\n            <h5 class=\"card-title\">\n              {{ stats.robotQuantity }}/10\n              <small>шт.</small>\n            </h5>\n          </div>\n          <div class=\"card-footer\">\n            <div class=\"stats\">\n              <i class=\"material-icons text-danger\">warning</i>\n              <a href=\"/create\">Создать нового робота</a>\n            </div>\n          </div>\n        </div>\n      </mat-card>\n    </mat-grid-tile>\n    <mat-grid-tile colspan=\"1\" rowspan=\"1\">\n      <mat-card class=\"dashboard-card\" style=\"padding:0; border-radius: 3px\">\n        <div class=\"card card-stats\">\n          <div class=\"card-header card-header-success card-header-icon\" style=\"height:73px\">\n            <div class=\"card-icon\">\n              <i class=\"material-icons\">attach_money</i>\n            </div>\n            <p class=\"card-category\">Общая доходность</p>\n            <mat-progress-spinner\n              *ngIf=\"loading\"\n              style=\"margin: 0 auto\"\n              mode=\"indeterminate\"\n              diameter=\"30\"\n              strokeWidth=\"3\"\n            ></mat-progress-spinner>\n            <h5 class=\"card-title\">{{ stats.profit }}%</h5>\n          </div>\n          <div class=\"card-footer\">\n            <div class=\"stats\"><i class=\"material-icons\">date_range</i> Последний месяц</div>\n          </div>\n        </div>\n      </mat-card>\n    </mat-grid-tile>\n    <mat-grid-tile colspan=\"1\" rowspan=\"1\">\n      <mat-card class=\"dashboard-card\" style=\"padding:0; border-radius: 3px\">\n        <div class=\"card card-stats\">\n          <div class=\"card-header card-header-danger card-header-icon\" style=\"height:73px\">\n            <div class=\"card-icon\">\n              <i class=\"material-icons\">spellcheck</i>\n            </div>\n            <p class=\"card-category\">Риск-профиль</p>\n            <mat-progress-spinner\n              *ngIf=\"loading\"\n              style=\"margin: 0 auto\"\n              mode=\"indeterminate\"\n              diameter=\"30\"\n              strokeWidth=\"3\"\n            ></mat-progress-spinner>\n            <h5 class=\"card-title\">{{ riskType }}</h5>\n          </div>\n          <div class=\"card-footer\">\n            <div class=\"stats\" routerLink=\"/testForRiskLevel\" style=\"cursor:pointer\">\n              <i class=\"material-icons\">local_offer</i> Пройти тест еще раз\n            </div>\n          </div>\n        </div>\n      </mat-card>\n    </mat-grid-tile>\n    <mat-grid-tile colspan=\"1\" rowspan=\"1\">\n      <mat-card class=\"dashboard-card\" style=\"padding:0; border-radius: 3px\">\n        <div class=\"card card-stats\">\n          <div class=\"card-header card-header-info card-header-icon\" style=\"height:73px\">\n            <div class=\"card-icon\">\n              <i class=\"material-icons\" (click)=\"openDialog()\" style=\"cursor: pointer\">account_balance_wallet</i>\n            </div>\n            <p class=\"card-category\">На счету</p>\n            <mat-progress-spinner\n              *ngIf=\"loading\"\n              style=\"margin: 0 auto\"\n              mode=\"indeterminate\"\n              diameter=\"30\"\n              strokeWidth=\"3\"\n            ></mat-progress-spinner>\n            <h5 class=\"card-title\">${{ stats.account }}</h5>\n          </div>\n          <div class=\"card-footer\">\n            <div class=\"stats\"><i class=\"material-icons\" style=\"cursor: pointer\" (click)=\"openDialog()\">update</i> Пополнить кошелек</div>\n          </div>\n        </div>\n      </mat-card>\n    </mat-grid-tile>\n  </mat-grid-list>\n\n  <!-- второй ряд -->\n\n  <mat-grid-list cols=\"3\" rowHeight=\"170px\">\n    <mat-grid-tile colspan=\"1\" rowspan=\"2\">\n      <mat-card class=\"dashboard-card\" style=\"padding:0; border-radius: 3px\">\n        <div class=\"card card-chart\" style=\"height:310px\">\n          <div class=\"card-header card-header-success\">\n            <div class=\"ct-chart\" id=\"dailySalesChart\"></div>\n          </div>\n          <div class=\"card-body\">\n            <h5 class=\"card-title\">Доходность за год</h5>\n            <p class=\"card-category\">\n              <span class=\"text-success\"><i class=\"fa fa-long-arrow-up\"></i> +55% </span> доходность выросла\n            </p>\n          </div>\n          <div class=\"card-footer\">\n            <div class=\"stats\"><i class=\"material-icons\">update</i> обновлено 17 дней назад</div>\n          </div>\n        </div>\n      </mat-card>\n    </mat-grid-tile>\n    <mat-grid-tile colspan=\"1\" rowspan=\"2\">\n      <mat-card class=\"dashboard-card\" style=\"padding:0; border-radius: 3px\">\n        <div class=\"card card-chart\" style=\"height:310px\">\n          <div class=\"card-header card-header-warning\">\n            <div class=\"ct-chart\" id=\"websiteViewsChart\"></div>\n          </div>\n          <div class=\"card-body\">\n            <h5 class=\"card-title\">Аналитика по росту потрфеля</h5>\n            <p class=\"card-category\">ваш портфель вырос</p>\n          </div>\n          <div class=\"card-footer\">\n            <div class=\"stats\"><i class=\"material-icons\">access_time</i> campaign sent 2 days ago</div>\n          </div>\n        </div>\n      </mat-card>\n    </mat-grid-tile>\n    <mat-grid-tile colspan=\"1\" rowspan=\"2\">\n      <mat-card class=\"dashboard-card\" style=\"padding:0; border-radius: 3px\">\n        <div class=\"card card-chart\" style=\"height:310px\">\n          <div class=\"card-header card-header-danger\">\n            <div class=\"ct-chart\" id=\"completedTasksChart\"></div>\n          </div>\n          <div class=\"card-body\">\n            <h5 class=\"card-title\">Выполненные курсы</h5>\n            <p class=\"card-category\">За месяц ~3 курса</p>\n          </div>\n          <div class=\"card-footer\">\n            <div class=\"stats\"><i class=\"material-icons\">update</i> обновлено 17 дней назад</div>\n          </div>\n        </div>\n      </mat-card>\n    </mat-grid-tile>\n  </mat-grid-list>\n\n  <!-- третий ряд -->\n\n  <mat-grid-list cols=\"2\" rowHeight=\"350px\">\n    <mat-grid-tile colspan=\"1\" rowspan=\"1\">\n      <mat-card class=\"dashboard-card\">\n        <mat-card-header>\n          <mat-card-title>\n            Статистика по ботам\n            <button mat-icon-button class=\"more-button\" [matMenuTriggerFor]=\"menu\" aria-label=\"Toggle menu\">\n              <mat-icon>more_vert</mat-icon>\n            </button>\n            <mat-menu #menu=\"matMenu\">\n              <button mat-menu-item>Действие 1</button>\n              <button mat-menu-item>Действие 2</button>\n            </mat-menu>\n          </mat-card-title>\n        </mat-card-header>\n        <mat-card-content class=\"dashboard-card-content\">\n          <app-widgets [index]=\"'NASDAQ'\" [ticker]=\"'AAPL'\"></app-widgets>\n        </mat-card-content>\n      </mat-card>\n    </mat-grid-tile>\n    <mat-grid-tile colspan=\"1\" rowspan=\"1\">\n      <mat-card class=\"dashboard-card\">\n        <mat-card-header>\n          <mat-card-title>\n            ТОП график рост\n            <button mat-icon-button class=\"more-button\" [matMenuTriggerFor]=\"menu\" aria-label=\"Toggle menu\">\n              <mat-icon>more_vert</mat-icon>\n            </button>\n            <mat-menu #menu=\"matMenu\">\n              <button mat-menu-item>Действие 1</button>\n              <button mat-menu-item>Действие 2</button>\n            </mat-menu>\n          </mat-card-title>\n        </mat-card-header>\n        <mat-card-content class=\"dashboard-card-content\">\n          <app-widgets [index]=\"'NASDAQ'\" [ticker]=\"'MSFT'\"></app-widgets>\n        </mat-card-content>\n      </mat-card>\n    </mat-grid-tile>\n  </mat-grid-list>\n</div>\n","import { Injectable } from '@angular/core';\nimport { Observable, throwError, BehaviorSubject } from 'rxjs';\nimport { TradingBot } from '../models/trading-bot-model';\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { environment } from '../../environments/environment';\nimport { catchError, tap, switchMap } from 'rxjs/operators';\nimport { Ticker } from '../models/asset';\nimport { FinancialInstrument } from '../models/enums';\nimport { AuthenticationService } from './authentication.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TradingBotsService {\n  tradingBotsList$: BehaviorSubject<TradingBot[]>;\n  private loaded = false;\n\n  constructor(\n    private http: HttpClient,\n    private authenticationService: AuthenticationService\n  ) {\n    this.tradingBotsList$ = new BehaviorSubject<TradingBot[]>([]);\n  }\n\n  /**\n   * запрашивает список роботов\n   * (если список уже загружен, то вернет его\n   * если не загружен, то делает запрос на сервер)\n   */\n  getUserRobots(): Observable<TradingBot[]> {\n    if (!this.loaded) {\n      return this.reloadedTraidingBotsList().pipe(switchMap(r => this.tradingBotsList$));\n    }\n    return this.tradingBotsList$;\n  }\n\n  private reloadedTraidingBotsList() {\n    return this.http.get<TradingBot[]>(`${environment.apiUrl}/bots`,).pipe(\n      catchError(this.handleError),\n      tap(response => {\n        this.tradingBotsList$.next(response);\n        this.loaded = true;\n      })\n    );\n  }\n\n  updateRobotData(bot: TradingBot): Observable<null> {\n    return this.http.post<any>(`${environment.apiUrl}/api/robots/UpdateBot`, bot).pipe(\n      catchError(this.handleError),\n      tap(_ => { })\n    );\n  }\n\n  deleteRobotData(bot: TradingBot): Observable<null> {\n    return this.http.post<any>(`${environment.apiUrl}/api/robots/DeleteBot`, bot).pipe(\n      catchError(this.handleError),\n      tap(_ => { })\n    );\n  }\n\n  public getDescription(bot_id: string): Observable<Ticker> {\n    return this.http.get<Ticker>(`${environment.apiUrl}/api/robots/GetDescription?bot_id=` + bot_id);\n  }\n\n  public convertingFinancialInstrumentToString(financialInstrument: FinancialInstrument): string {\n    switch (financialInstrument) {\n      case FinancialInstrument.Forex:\n        return 'Форекс';\n      case FinancialInstrument.Stock:\n        return 'Рынок акций';\n    }\n  }\n\n  // public convertingIndustryToString(industry: Industry): string {\n  //   switch (industry) {\n  //     case 1:\n  //       return 'Информационные технологии';\n  //     case 2:\n  //       return 'Здравоохранение';\n  //     case 3:\n  //       return 'Машиностроение и транспорт';\n  //     case 4:\n  //       return 'Недвижимость';\n  //     case 5:\n  //       return 'Потребительские товары и услуги';\n  //     case 6:\n  //       return 'Финансовы сектор';\n  //     case 7:\n  //       return 'Энергетика';\n  //     case 8:\n  //       return 'Серьевая промыщленность';\n  //     case 9:\n  //       return 'Электоэнергетика';\n  //     case 10:\n  //       return 'Телекоммуникации';\n  //   }\n  //   return;\n  // }\n\n  private handleError(error: HttpErrorResponse) {\n    let msg: string;\n\n    if (error.error instanceof ErrorEvent) {\n      msg = 'Произошла ошибка:' + error.error.message;\n    } else {\n      msg = `Произошла ошибка: ${error.error}. Код ошибки ${error.status}`;\n    }\n\n    console.error('TradingBotsService::handleError() ' + msg);\n\n    return throwError(msg);\n  }\n}\n","import { Component, OnInit, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { Ticker } from 'src/app/models/asset';\nimport { TradingBot } from 'src/app/models/trading-bot-model';\nimport { TradingBotsService } from 'src/app/services/trading-bots.service';\n\n@Component({\n  selector: 'app-bot-stats-dialog',\n  templateUrl: './bot-stats-dialog.component.html',\n  styleUrls: ['./bot-stats-dialog.component.css'],\n})\nexport class BotStatsDialogComponent implements OnInit {\n  asset: Ticker;\n  industry: string;\n  financialInstrument: string;\n\n  constructor(\n    public dialogRef: MatDialogRef<BotStatsDialogComponent>,\n    private tradingBotsService: TradingBotsService,\n    @Inject(MAT_DIALOG_DATA) public data: TradingBot\n  ) { }\n\n  ngOnInit() {\n    this.getDescription(this.data.id);\n  }\n\n  getDescription(bot_id: string) {\n    this.tradingBotsService.getDescription(bot_id).subscribe(r => {\n      this.asset = r;\n      // this.industry = this.tradingBotsService.convertingIndustryToString(r.industry);\n      // this.financialInstrument = this.tradingBotsService.convertingFinancialInstrumentToString(r.financialInstrument);\n    });\n  }\n}\n","<mat-card>\n  <mat-card-header>\n    <mat-card-title>\n      <h2>\n        Статистика по торговому роботу <strong> \"{{ data.ticker }}\" </strong>\n      </h2>\n    </mat-card-title>\n  </mat-card-header>\n  <mat-card-content *ngIf=\"asset\" class=\"dashboard-card-content\">\n    <p>Финансовый инструмент Акции</p>\n    <p>Бумага {{ asset.name }}</p>\n    <p>Индустрия {{ industry }}</p>\n    <app-widgets [index]=\"'NASDAQ'\" [ticker]=\"'APPLE'\"></app-widgets>\n  </mat-card-content>\n</mat-card>","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { environment } from 'src/environments/environment';\nimport { UserProfile, UserProfileDto } from '../models/user';\nimport { AuthenticationService } from './authentication.service';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserService {\n  constructor(\n    private http: HttpClient,\n    private authenticationService: AuthenticationService\n  ) { }\n\n  get(): Observable<UserProfileDto> {\n    return this.http.get<UserProfileDto>(`${environment.apiUrl}/users/profile`);\n  }\n\n  update(profile: UserProfile) {\n    return this.http.put(`${environment.apiUrl}/users/profile`, profile);\n  }\n\n  delete(id: number) {\n    return this.http.delete(`${environment.apiUrl}/users/${id}`);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { environment } from 'src/environments/environment';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { Ticker } from '../../models/asset';\nimport { FinancialInstrument } from '../../models/enums';\nimport { BotDto } from 'src/app/models/trading-bot-model';\nimport { AuthenticationService } from 'src/app/services/authentication.service';\nimport { StrategyList, StrategyViewModel } from 'src/app/models/strategy';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CreateBotService {\n  constructor(\n    private http: HttpClient,\n    private authenticationService: AuthenticationService\n  ) { }\n\n  createBot(bot: BotDto): Observable<string> {\n    return this.http.post<string>(`${environment.apiUrl}/bot/create`, bot).pipe(\n      catchError(this.handleError),\n    );\n  }\n\n  getFinancialInstruments() {\n    return Object.values(FinancialInstrument).filter(val => typeof val === 'string') as string[];\n  }\n\n  public getSecurities(instument: FinancialInstrument): Ticker[] {\n    // todo формировать список на бэкенде\n    return [\n      {\n        name: 'FORD',\n        value: 'F'\n      },\n      {\n        name: 'AMD',\n        value: 'AMD'\n      },\n      {\n        name: 'Activision',\n        value: 'ATVI'\n      },\n      {\n        name: 'VEON',\n        value: 'VEON'\n      },\n    ]\n  }\n\n  public getStrategies(): StrategyViewModel[] {\n    return [\n      {\n        name: StrategyList.simpleTV,\n        description: 'Берет данные по техническому анализу с TradingView',\n        disabled: false\n      },\n      {\n        name: StrategyList.simpleRaddar,\n        description: 'Берет данные по техническому анализу с Raddar.io',\n        disabled: true\n      }\n    ]\n  }\n\n  // getIndustries() {\n  //   return Object.values(Industry).filter(val => typeof val === 'string') as string[];\n  // }\n\n  // getAssets(financialInstrument: number, industry: number): Observable<Asset[]> {\n  //   let params = new HttpParams();\n  //   params = params.append('fi', financialInstrument.toString());\n  //   params = params.append('ind', industry.toString());\n  //   return this.http.get<Asset[]>(`${environment.apiUrl}/api/robots/GetAssetsByFinancialInstrumentAndIndustry`, { params: params });\n  // }\n\n  private handleError(error: HttpErrorResponse) {\n    console.log(\"🚀 ~ file: create-bot.service.ts ~ line 78 ~ CreateBotService ~ handleError ~ error\", error)\n    let msg: string;\n\n    if (error.error) {\n      msg = 'Произошла ошибка:' + error.error.message;\n    } else {\n      msg = `Произошла ошибка: ${error.error}. Код ошибки ${error.status}`;\n    }\n\n    console.error('CreateBotService::handleError() ' + msg);\n\n    return throwError(msg);\n  }\n}\n","import { HttpErrorResponse } from '@angular/common/http';\nimport { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { first } from 'rxjs/operators';\nimport { UserProfileDto } from 'src/app/models/user';\nimport { UserService } from 'src/app/services/user.service';\n\n@Component({\n  selector: 'app-settings',\n  templateUrl: './settings.component.html',\n  styleUrls: ['./settings.component.css'],\n})\nexport class SettingsComponent implements OnInit {\n\n  profileForm: FormGroup;\n  hide = true;\n  submitted = false;\n  loading = false;\n\n  constructor(\n    private userService: UserService,\n    private snackbar: MatSnackBar,\n    private formBuilder: FormBuilder,\n  ) { }\n\n  get controls() {\n    return this.profileForm.controls;\n  }\n\n  ngOnInit() {\n    this.profileForm = this.formBuilder.group({\n      email: ['', Validators.email],\n      tinkoffToken: [''],\n      name: [''],\n      lastName: [''],\n      bitrhDate: [''],\n      location: [''],\n      gender: [''],\n    });\n\n    this.userService.get().subscribe(res => this.profileForm.patchValue(res))\n  }\n\n  onSubmit() {\n    this.submitted = true;\n\n    if (this.profileForm.invalid) {\n      return;\n    }\n\n    this.loading = true;\n    const profile = this.profileForm.value as UserProfileDto\n    // setTimeout(() => {\n    this.userService.update(profile)\n      .pipe(first())\n      .subscribe(_ => {\n        this.loading = false;\n        this.showMessage(\"Успешно сохранено\");\n      }, (error: HttpErrorResponse) => {\n        this.showErrorMessage(error);\n        // this.alertService.error(error);\n        this.loading = false;\n      });\n    // }, 1500);\n  }\n\n  private showErrorMessage(httpError: HttpErrorResponse) {\n    console.log(\"🚀 ~ file: login.component.ts ~ line 90 ~ LoginComponent ~ showErrorMessage ~ message.error\", httpError)\n    if (httpError.error.array && httpError.error.array.length) {\n      const arr = httpError.error.array as Array<any>;\n      arr.forEach(el => {\n        this.snackbar.open(el.msg, 'OK', { duration: 6000 });\n      })\n    } else {\n      this.snackbar.open(httpError.error.msg, 'OK', { duration: 6000 });\n    }\n  }\n  private showMessage(message: any) {\n    this.snackbar.open(message, 'OK', { duration: 3000 });\n  }\n}\n","<h1>Настройки пользователя</h1>\n<form [formGroup]=\"profileForm\" (ngSubmit)=\"onSubmit()\">\n  <mat-grid-list cols=\"2\" rowHeight=\"100px\">\n\n    <mat-grid-tile>\n      <mat-form-field appearance=\"outline\" style=\"width:90%\">\n        <mat-label>Фамилия</mat-label>\n        <input matInput formControlName=\"name\" />\n      </mat-form-field>\n    </mat-grid-tile>\n\n    <mat-grid-tile>\n      <mat-form-field appearance=\"outline\" style=\"width:90%\">\n        <mat-label>Имя</mat-label>\n        <input matInput formControlName=\"lastName\" />\n      </mat-form-field>\n    </mat-grid-tile>\n\n    <mat-grid-tile>\n      <mat-form-field appearance=\"outline\" style=\"width:90%\">\n        <mat-label>Email</mat-label>\n        <input matInput formControlName=\"email\" />\n      </mat-form-field>\n    </mat-grid-tile>\n\n    <mat-grid-tile>\n      <mat-form-field appearance=\"outline\" appearance=\"outline\" style=\"width:90%\">\n        <input matInput [matDatepicker]=\"datepicker\" formControlName=\"bitrhDate\">\n        <mat-label>Дата рождения</mat-label>\n        <mat-datepicker-toggle matSuffix [for]=\"datepicker\"></mat-datepicker-toggle>\n        <mat-datepicker #datepicker>\n          <mat-datepicker-actions>\n            <button mat-button matDatepickerCancel>Cancel</button>\n            <button mat-raised-button color=\"primary\" matDatepickerApply>Apply</button>\n          </mat-datepicker-actions>\n        </mat-datepicker>\n      </mat-form-field>\n    </mat-grid-tile>\n\n    <mat-grid-tile>\n      <mat-form-field appearance=\"outline\" style=\"width:90%\">\n        <mat-label>Город</mat-label>\n        <input matInput formControlName=\"location\" />\n      </mat-form-field>\n    </mat-grid-tile>\n\n    <mat-grid-tile>\n      <section class=\"example-section\">\n        <mat-radio-group formControlName=\"gender\">\n          <mat-radio-button style=\"margin: 0 10px;\" value=\"0\">Ж</mat-radio-button>\n          <mat-radio-button style=\"margin: 0 10px;\" value=\"1\">М</mat-radio-button>\n        </mat-radio-group>\n      </section>\n    </mat-grid-tile>\n\n    <mat-grid-tile>\n      <mat-form-field appearance=\"outline\" style=\"width:90%\">\n        <mat-label>Токен от Тинькофф инвестиций</mat-label>\n        <input matInput [type]=\"hide ? 'tinkoffToken' : 'text'\" formControlName=\"tinkoffToken\"\n          [ngClass]=\"{ 'is-invalid': submitted && controls.tinkoffToken.errors }\" />\n        <mat-icon matSuffix (click)=\"hide = !hide\">{{ hide ? 'visibility_off' : 'visibility' }}</mat-icon>\n      </mat-form-field>\n    </mat-grid-tile>\n  </mat-grid-list>\n\n  <div>\n    <button mat-raised-button color=\"accent\" type=\"submit\" [disabled]=\"!profileForm.valid\">\n      Обновить\n    </button>\n  </div>\n</form>","import { Component, Input, AfterViewInit } from '@angular/core';\n\ndeclare const TradingView: any;\n\n@Component({\n  selector: 'app-widgets',\n  templateUrl: './widgets.component.html',\n  styleUrls: ['./widgets.component.css'],\n})\nexport class WidgetsComponent implements AfterViewInit {\n  @Input() index: string;\n  @Input() ticker: string;\n\n  constructor() { }\n\n  ngAfterViewInit(): void {\n    const tradingView = new TradingView.widget({\n      container_id: 'technical-analysis-' + this.ticker,\n      autosize: true,\n      symbol: this.index + ':' + this.ticker,\n      interval: '120',\n      timezone: 'exchange',\n      theme: 'Light',\n      style: '1',\n      toolbar_bg: '#f1f3f6',\n      withdateranges: true,\n      hide_side_toolbar: false,\n      allow_symbol_change: true,\n      save_image: false,\n      hideideas: true,\n      studies: ['MASimple@tv-basicstudies'],\n      show_popup_button: true,\n      popup_width: '1000',\n      popup_height: '650',\n    });\n  }\n}\n","<div id=\"{{ 'technical-analysis-' + ticker }}\" style=\"height:235px\"></div>","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}