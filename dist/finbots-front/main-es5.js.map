{"version":3,"sources":["webpack:///src/app/services/user-stats.service.ts","webpack:///src/app/components/table-bots/table-bots.component.ts","webpack:///src/app/components/table-bots/table-bots.component.html","webpack:///src/app/components/account/about/about.component.ts","webpack:///src/app/components/account/about/about.component.html","webpack:///src/app/components/navigation-bar/navigation-bar.component.ts","webpack:///src/app/components/navigation-bar/navigation-bar.component.html","webpack:///src/app/models/user.ts","webpack:///src/app/models/enums.ts","webpack:///src/app/models/strategy.ts","webpack:///src/environments/environment.ts","webpack:///src/app/components/create-bot/create-bot.component.ts","webpack:///src/app/components/create-bot/create-bot.component.html","webpack:///src/app/components/account/login/login.component.ts","webpack:///src/app/components/account/login/login.component.html","webpack:///src/app/components/main-dashboard/add-modey-to-account/add-modey-to-account.component.ts","webpack:///src/app/components/main-dashboard/add-modey-to-account/add-modey-to-account.component.html","webpack:///src/app/components/account/register/register.component.ts","webpack:///src/app/components/account/register/register.component.html","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/guards/auth.guard.ts","webpack:///src/app/app.module.ts","webpack:///src/app/app.routing.ts","webpack:///src/app/helpers/jwt.interceptor.ts","webpack:///src/app/services/authentication.service.ts","webpack:///src/app/helpers/error.interceptor.ts","webpack:///src/app/services/task.service.ts","webpack:///src/app/components/main-dashboard/main-dashboard.component.ts","webpack:///src/app/components/main-dashboard/main-dashboard.component.html","webpack:///src/app/services/trading-bots.service.ts","webpack:///src/app/components/table-bots/bot-stats-dialog/bot-stats-dialog.component.ts","webpack:///src/app/components/table-bots/bot-stats-dialog/bot-stats-dialog.component.html","webpack:///src/app/services/user.service.ts","webpack:///src/app/components/create-bot/create-bot.service.ts","webpack:///src/app/components/account/settings/settings.component.ts","webpack:///src/app/components/account/settings/settings.component.html","webpack:///src/app/components/main-dashboard/widgets/widgets.component.ts","webpack:///src/app/components/main-dashboard/widgets/widgets.component.html","webpack:///src/main.ts","webpack:///$_lazy_route_resource lazy namespace object"],"names":["UserStatsService","http","loaded","stats$","profit","account","robotQuantity","riskType","Guaranteed","id","reloadedStats","pipe","r","error","msg","ErrorEvent","message","status","providedIn","TableBotsComponent","tradingBotsService","snackBar","dialog","displayedColumns","dataSource","isLoading","getRobots","getUserRobots","subscribe","bots","console","log","data","bot","isActive","updateRobotData","_","showMessage","err","deleteRobotData","row","dialogRef","open","panelClass","width","height","disableClose","backdropClick","result","confirm","close","undefined","duration","selector","templateUrl","styleUrls","AboutComponent","drawer","NavigationBarComponent","breakpointObserver","router","authenticationService","isShow","isHandset$","observe","Handset","matches","currentUserSubscription","$currentUser","user","currentUser","unsubscribe","logout","navigate","User","InvestorTypeCharacter","FinancialInstrument","StrategyList","environment","production","apiUrl","CreateBotComponent","service","formBuilder","financialInstruments","tickers","strategies","strategyControl","instrumentControl","getFinancialInstruments","getSecurities","Stock","getStrategies","control","required","name","formGroup","createBotFormGroup","value","newRobot","ticker","strategy","createBot","group","instrument","submitBot","LoginComponent","route","snackbar","hide","valueEmail","loading","submitted","currentUserValue","loginForm","email","password","returnUrl","snapshot","queryParams","controls","get","hasError","invalid","login","showErrorMessage","httpError","array","length","arr","forEach","el","onSubmit","AddModeyToAccountComponent","userService","dataForm","summa","addMoney","RegisterComponent","form","register","AppComponent","isCurrentUser","AuthGuard","state","url","AppModule","provide","useClass","multi","forRoot","declarations","imports","entryComponents","providers","bootstrap","appRoutes","path","component","canActivate","redirectTo","routing","JwtInterceptor","request","next","token","includes","headers","clone","handle","AuthenticationService","currentUserSubject","JSON","parse","localStorage","getItem","asObservable","post","setItem","stringify","removeItem","ErrorInterceptor","location","reload","statusText","TaskService","questionsList$","reloadQuestionList","handleError","response","balls","obj","score","Conservative","Moderate","Growth","AggressiveGrowth","MaximumGrowth","MainDashboardComponent","userStatService","taskService","stats","afterClosed","getStats","createFirstChart","createSecondChart","createThirdChart","getStatsById","convertRiskToString","dataDailySalesChart","labels","series","optionsDailySalesChart","lineSmooth","cardinal","tension","low","high","chartPadding","top","right","bottom","left","dailySalesChart","startAnimationForLineChart","datawebsiteViewsChart","optionswebsiteViewsChart","axisX","showGrid","responsiveOptions","seriesBarDistance","labelInterpolationFnc","websiteViewsChart","startAnimationForBarChart","dataCompletedTasksChart","optionsCompletedTasksChart","completedTasksChart","chart","seq","delays","durations","on","type","element","animate","d","begin","dur","from","scale","translate","chartRect","to","easing","Easing","easeOutQuint","opacity","seq2","delays2","durations2","openDialog","TradingBotsService","tradingBotsList$","reloadedTraidingBotsList","bot_id","financialInstrument","Forex","BotStatsDialogComponent","getDescription","asset","UserService","profile","put","CreateBotService","Object","values","filter","val","instument","simpleTV","description","disabled","simpleRaddar","SettingsComponent","profileForm","tinkoffToken","lastName","bitrhDate","gender","res","patchValue","update","WidgetsComponent","tradingView","TradingView","widget","container_id","autosize","symbol","index","interval","timezone","theme","style","toolbar_bg","withdateranges","hide_side_toolbar","allow_symbol_change","save_image","hideideas","studies","show_popup_button","popup_width","popup_height","bootstrapModule","webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports"],"mappings":"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","file":"main-es5.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { Observable, BehaviorSubject, throwError, of } from 'rxjs';\nimport { StatsView } from '../models/statsView';\nimport { switchMap } from 'rxjs/operators';\nimport { InvestorTypeCharacter } from '../models/enums';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserStatsService {\n  stats$: BehaviorSubject<StatsView>;\n  private loaded = false;\n\n  constructor(private http: HttpClient) {\n    this.stats$ = new BehaviorSubject<StatsView>({ profit: 0, account: 0, robotQuantity: 0, riskType: InvestorTypeCharacter.Guaranteed });\n  }\n\n  /**\n   * запрашивает статистику по пользователю и кеширует её\n   * @param id пользователя\n   */\n  getStatsById(id: number): Observable<StatsView> {\n    // return this.http.get<StatsView>(`${environment.apiUrl}/users/stat/${id}`)\n    // if (!this.loaded) {\n    return this.reloadedStats(id).pipe(switchMap(r => this.stats$));\n    // }\n    // return this.stats$;\n  }\n\n  private reloadedStats(id: number): Observable<StatsView> {\n    return of({ profit: 0, account: 0, robotQuantity: 0, riskType: InvestorTypeCharacter.Guaranteed })\n    // return this.http.get<StatsView>(`${environment.apiUrl}/users/stat/${id}`).pipe(\n    //   catchError(this.handleError),\n    //   tap(response => {\n    //     this.stats$.next(response);\n    //     this.loaded = true;\n    //   })\n    // );\n  }\n\n  private handleError(error: HttpErrorResponse) {\n    let msg: string;\n    if (error.error instanceof ErrorEvent) {\n      msg = 'Произошла ошибка:' + error.error.message;\n    } else {\n      msg = `Произошла ошибка: ${error.error}. Код ошибки ${error.status}`;\n    }\n    return throwError(msg);\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { BotStatsDialogComponent } from './bot-stats-dialog/bot-stats-dialog.component';\nimport { tap } from 'rxjs/operators';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { TradingBot } from 'src/app/models/trading-bot-model';\nimport { TradingBotsService } from 'src/app/services/trading-bots.service';\n\n@Component({\n  selector: 'app-table-bots',\n  templateUrl: './table-bots.component.html',\n  styleUrls: ['./table-bots.component.css'],\n})\nexport class TableBotsComponent implements OnInit {\n  displayedColumns: string[] = ['id', 'ticker', 'strategy', 'timeframe', 'profit', 'actions'];\n  dataSource: MatTableDataSource<TradingBot> = new MatTableDataSource();\n  isLoading = true;\n\n  constructor(private readonly tradingBotsService: TradingBotsService, private readonly snackBar: MatSnackBar, public dialog: MatDialog) { }\n\n  ngOnInit() {\n    this.getRobots();\n  }\n\n  getRobots() {\n    this.tradingBotsService.getUserRobots().subscribe(bots => {\n      console.log(\"🚀 ~ file: table-bots.component.ts ~ line 28 ~ TableBotsComponent ~ this.tradingBotsService.getUserRobots ~ bots\", bots)\n      this.dataSource.data = bots;\n      this.isLoading = false;\n    });\n  }\n\n  stopBot(bot: TradingBot) {\n    bot.isActive = !bot.isActive;\n    this.tradingBotsService\n      .updateRobotData(bot)\n      .pipe(\n        tap(\n          _ => {\n            (bot.isActive === false)\n              ? this.showMessage('Отправлен запрос на остановку бота')\n              : this.showMessage('Отправлен запрос на запуск бота');\n          },\n          err => this.showMessage(err)\n        ))\n      .subscribe();\n  }\n\n  delete(bot: TradingBot) {\n    this.tradingBotsService.deleteRobotData(bot).subscribe();\n    this.getRobots();\n  }\n\n  openDialog(row: TradingBot) {\n    const dialogRef = this.dialog.open(BotStatsDialogComponent, {\n      panelClass: 'dialog',\n      width: '500px',\n      height: '500px',\n      data: row,\n      disableClose: true,\n    });\n    dialogRef.backdropClick().subscribe(result => {\n      if (confirm('Закрыть окно?')) {\n        dialogRef.close();\n      }\n    });\n  }\n\n  private showMessage(msg: any) {\n    this.snackBar.open(msg, undefined, { duration: 2000 });\n  }\n}\n","<div style=\"margin:20px\">\n  <mat-card>\n    <mat-card-header>\n      <mat-card-title style=\"font-size:24px\">\n        Торговые роботы\n      </mat-card-title>\n      <mat-card-subtitle style=\"font-size:16px\">\n        <div style=\"color:black\">\n          <div>\n            В этой таблице находятся все Ваши торговые роботы с краткой статистикой. <br />\n            Добавить нового робота можно в пункте \"Создать робота\" в левой вкладке навигации. <br />\n            <br />\n            В таблице доступны следующие действия:\n          </div>\n          <ul>\n            <li>\n              <div style=\"display: inline-flex; margin-top: 1em;\">\n                по клику на работа вы откроете подробное описание и статиcтику\n                <mat-icon class=\"btn-accent\" style=\"margin-left: 1em\">reorder</mat-icon>\n              </div>\n            </li>\n            <li>\n              <div style=\"display: inline-flex; margin-top: 1em; margin-right: 1em;\">\n                <div>приостановить торговлю робота</div>\n                <mat-icon class=\"btn-usual\" style=\"margin-left: 1em\">pause_circle_filled</mat-icon>\n              </div>\n              <div style=\"display: inline-flex;\">\n                <div>и вернуть обратно в торговлю</div>\n                <mat-icon class=\"btn-usual\" style=\"margin-left: 1em\">play_circle_filled</mat-icon>\n              </div>\n            </li>\n            <li>\n              <div style=\"display: inline-flex; margin-top: 1em\">\n                <div>удалить робота</div>\n                <mat-icon class=\"btn-warn\" style=\"margin-left: 1em\">delete</mat-icon>\n              </div>\n            </li>\n          </ul>\n          <br />\n        </div>\n      </mat-card-subtitle>\n    </mat-card-header>\n    <mat-card-content>\n      <mat-progress-spinner *ngIf=\"isLoading\" class=\"example-margin\" color=\"primary\" mode=\"indeterminate\">\n      </mat-progress-spinner>\n\n      <table mat-table [dataSource]=\"dataSource\" class=\"dashboard-card\" matSort>\n        <ng-container matColumnDef=\"id\">\n          <th mat-header-cell *matHeaderCellDef mat-sort-header>№</th>\n          <td mat-cell *matCellDef=\"let row; let i = index\">{{ i + 1 }}</td>\n        </ng-container>\n\n        <!-- <ng-container matColumnDef=\"name\">\n          <th mat-header-cell *matHeaderCellDef mat-sort-header>Название</th>\n          <td mat-cell *matCellDef=\"let row\" style=\"width:15em\">\n            <app-bot-name [bot]=\"row\"></app-bot-name>\n          </td>\n        </ng-container> -->\n        <ng-container matColumnDef=\"ticker\">\n          <th mat-header-cell *matHeaderCellDef mat-sort-header>Стратегия</th>\n          <td mat-cell *matCellDef=\"let row\">{{ row.ticker }}</td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"strategy\">\n          <th mat-header-cell *matHeaderCellDef mat-sort-header>Стратегия</th>\n          <td mat-cell *matCellDef=\"let row\">{{ row.strategy }}</td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"timeframe\">\n          <th mat-header-cell *matHeaderCellDef mat-sort-header>Время работы</th>\n          <td mat-cell *matCellDef=\"let row\">{{ row.workedTime }}</td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"profit\">\n          <th mat-header-cell *matHeaderCellDef mat-sort-header>Доходность</th>\n          <td mat-cell *matCellDef=\"let row\">{{ row.profit }}%</td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"actions\">\n          <th mat-header-cell *matHeaderCellDef mat-sort-header>Действия</th>\n          <td mat-cell *matCellDef=\"let row\">\n            <mat-icon *ngIf=\"row.isActive\" (click)=\"stopBot(row)\" class=\"btn-usual\" style=\"margin-right:1em\"\n              matTooltip=\"Остановить торговлю\" matTooltipPosition=\"left\">\n              pause_circle_filled\n            </mat-icon>\n            <mat-icon *ngIf=\"!row.isActive\" (click)=\"stopBot(row)\" class=\"btn-usual\" style=\"margin-right:1em\"\n              matTooltip=\"Возобновить торговлю\" matTooltipPosition=\"left\">\n              play_circle_filled\n            </mat-icon>\n            <mat-icon (click)=\"delete(row)\" class=\"btn-warn\" style=\"margin-right:1em\" matTooltip=\"Удалить робота\">\n              delete\n            </mat-icon>\n            <mat-icon class=\"btn-accent\" matTooltip=\"Информация о роботе\" matTooltipPosition=\"right\"\n              (click)=\"openDialog(row)\">\n              reorder\n            </mat-icon>\n          </td>\n        </ng-container>\n\n        <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n        <tr mat-row *matRowDef=\"let row; columns: displayedColumns; let i = index\"></tr>\n      </table>\n    </mat-card-content>\n  </mat-card>\n</div>","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-about',\n  templateUrl: './about.component.html',\n  styleUrls: ['./about.component.css'],\n})\nexport class AboutComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit() {}\n}\n","<div class=\"jumbotron\">\n  <div class=\"container\">\n    <div class=\"row\">\n      <div class=\"col-sm-6 offset-sm-3\">\n        <h1>Здесь будет описание проекта</h1>\n      </div>\n    </div>\n  </div>\n</div>\n","import { Component, OnDestroy } from '@angular/core';\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\nimport { Observable, Subscription } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Router } from '@angular/router';\nimport { User } from '../../models/user';\nimport { AuthenticationService } from 'src/app/services/authentication.service';\n\n@Component({\n  selector: 'app-navigation-bar',\n  templateUrl: './navigation-bar.component.html',\n  styleUrls: ['./navigation-bar.component.css'],\n})\nexport class NavigationBarComponent implements OnDestroy {\n  isShow = true;\n  currentUser: User;\n  currentUserSubscription: Subscription;\n\n  isHandset$: Observable<boolean> = this.breakpointObserver.observe(Breakpoints.Handset).pipe(map(result => result.matches));\n\n  constructor(\n    private breakpointObserver: BreakpointObserver,\n    private router: Router,\n    private authenticationService: AuthenticationService\n  ) {\n    this.currentUserSubscription = this.authenticationService.$currentUser.subscribe(user => {\n      this.isShow = !!user\n      this.currentUser = user;\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.currentUserSubscription.unsubscribe();\n  }\n\n  logout() {\n    this.authenticationService.logout();\n    this.router.navigate(['/login']);\n  }\n}\n","<mat-sidenav-container class=\"sidenav-container\">\n  <!-- <mat-sidenav  -->\n  <mat-sidenav *ngIf=\"isShow\" #drawer class=\"sidenav\" fixedInViewport=\"true\"\n    [attr.role]=\"(isHandset$ | async) ? 'dialog' : 'navigation'\" [mode]=\"(isHandset$ | async) ? 'over' : 'side'\"\n    [opened]=\"!(isHandset$ | async)\">\n    <mat-toolbar color=\"primary\">Меню</mat-toolbar>\n    <mat-nav-list>\n      <a mat-list-item routerLink=\"/dashboard\">Панель</a>\n      <a mat-list-item routerLink=\"/table\">Все роботы</a>\n      <a mat-list-item routerLink=\"/create\">Создать робота</a>\n    </mat-nav-list>\n  </mat-sidenav>\n  <mat-sidenav-content>\n    <mat-toolbar *ngIf=\"isShow\" color=\"primary\" class=\"fixed-toolbar\">\n      <!-- <mat-toolbar  color=\"primary\" class=\"fixed-toolbar\" > -->\n      <button type=\"button\" aria-label=\"Toggle sidenav\" mat-icon-button (click)=\"drawer.toggle()\"\n        *ngIf=\"isHandset$ | async\">\n        <mat-icon aria-label=\"Side nav toggle icon\">menu</mat-icon>\n      </button>\n\n      <span>Добро пожаловать!</span>\n\n      <span style=\"flex:1 1 auto;\"></span>\n\n      <mat-icon matBadge=\"10\" matBadgeColor=\"warn\">notifications</mat-icon>\n      <mat-icon style=\"margin-left:1%\">verified_user</mat-icon>\n      <button mat-button style=\"margin-left:1%\" [matMenuTriggerFor]=\"menu\">{{ currentUser.email }}</button>\n      <mat-menu #menu=\"matMenu\" [overlapTrigger]=\"false\">\n        <button mat-menu-item routerLink=\"/settings\">Настройки</button>\n        <button mat-menu-item (click)=\"logout()\">Выход</button>\n      </mat-menu>\n    </mat-toolbar>\n    <mat-toolbar *ngIf=\"!isShow\">\n      <span>FinBots MVP</span>\n      <button mat-button style=\"margin-left:1%\" routerLink=\"/about\">О проекте</button>\n      <button mat-button style=\"margin-left:1%\" routerLink=\"/login\">Войти</button>\n      <button mat-button style=\"margin-left:1%\" routerLink=\"/register\">Регистрация</button>\n    </mat-toolbar>\n    <ng-content></ng-content>\n  </mat-sidenav-content>\n</mat-sidenav-container>","import { InvestorTypeCharacter } from \"src/app/models/enums\";\nimport { TradingBot } from \"src/app/models/trading-bot-model\";\n\nexport class User {\n  token: string;\n  tinkoffToken?: string;\n  email?: string;\n  profile?: UserProfile\n  riskType?: InvestorTypeCharacter;\n  bots?: TradingBot[]\n}\n\nexport interface UserProfile {\n  name: string;\n  lastName: string;\n  bitrhDate: Date;\n  gender: string;\n  location: string;\n};\n\nexport interface UserDto {\n  email: string;\n  password: string;\n}\n\nexport interface UserProfileDto {\n  email: string;\n  name: string;\n  lastName: string;\n  bitrhDate: Date;\n  gender: string;\n  location: string;\n  tinkoffToken: string;\n};","// export enum Industry {\n//   IT = 1,\n//   Medicine = 2,\n//   Transport = 3,\n//   RealEstate = 4,\n//   Consumption = 5,\n//   Finance = 6,\n//   Energy = 7,\n//   RawMaterial = 8,\n//   ElecticPower = 9,\n//   Telecommunication = 10,\n// }\n\nexport enum InvestorTypeCharacter {\n  Guaranteed = 5,\n  Conservative = 10,\n  Moderate = 15,\n  Growth = 20,\n  AggressiveGrowth = 25,\n  MaximumGrowth = 40,\n}\n\nexport enum FinancialInstrument {\n  Forex = 'Forex',\n  Stock = 'Stock',\n}\n","/**\n * Стратегии торговли\n * Список всех возможный страгтегий \n * (теханализ их источников, собственный теханализ, арбитраж и т.д.)\n */\nexport enum StrategyList {\n  simpleTV = 'simpleTV',\n  simpleRaddar = 'simpleRaddar',\n  arbitration = 'arbitration'\n}\n\n/**\n * Общая модель стратегии\n * @param payload - информация о стратегии\n * todo добавить разные интерфейсы для payload в зависимости от типа стратегии;\n * пока у payload один тип;\n */\nexport interface StrategyViewModel {\n  name: StrategyList;\n  description: string;\n  disabled: boolean;\n}","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  apiUrl: 'http://localhost:5000/api',\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { Component, OnInit } from '@angular/core';\nimport { CreateBotService } from './create-bot.service';\nimport { FormBuilder, FormGroup, Validators, FormControl } from '@angular/forms';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { User } from '../../models/user';\nimport { Ticker } from '../../models/asset';\nimport { FinancialInstrument } from '../../models/enums';\nimport { AuthenticationService } from '../../services/authentication.service';\nimport { BotDto } from 'src/app/models/trading-bot-model';\nimport { StrategyViewModel } from 'src/app/models/strategy';\n\n@Component({\n  selector: 'app-create-bot',\n  templateUrl: './create-bot.component.html',\n  styleUrls: ['./create-bot.component.css'],\n})\nexport class CreateBotComponent implements OnInit {\n  currentUser: User;\n  financialInstruments: string[] = [];\n  tickers: Ticker[] = [];\n  strategies: StrategyViewModel[] = [];\n\n  formGroup: FormGroup;\n  strategyControl: FormControl = new FormControl();\n  instrumentControl: FormControl = new FormControl();\n\n  constructor(\n    private service: CreateBotService,\n    private formBuilder: FormBuilder,\n    private readonly snackBar: MatSnackBar,\n    private authenticationService: AuthenticationService\n  ) {\n    this.authenticationService.$currentUser.subscribe(user => this.currentUser = user);\n    this.financialInstruments = this.service.getFinancialInstruments();\n    this.tickers = this.service.getSecurities(FinancialInstrument.Stock);\n    this.strategies = this.service.getStrategies()\n\n    this.instrumentControl = this.formBuilder.control(FinancialInstrument.Stock, [Validators.required]);\n    this.strategyControl = this.formBuilder.control(this.strategies[0].name)\n    this.formGroup = this.createBotFormGroup();\n  }\n\n  ngOnInit() {\n  }\n\n  submitBot() {\n    const value = this.formGroup.value;\n    const newRobot = <BotDto>{\n      ticker: value.ticker,\n      strategy: value.strategy\n    }\n    this.service.createBot(newRobot)\n      .subscribe(\n        _ => this.showMessage(`Заявка на создание бота ${newRobot.ticker} успешна отправлена`),\n        err => this.showMessage(err)\n      );\n  }\n\n  private createBotFormGroup(): FormGroup {\n    return this.formBuilder.group({\n      strategy: this.strategyControl,\n      instrument: this.instrumentControl,\n      ticker: ['', [Validators.required]],\n    });\n  }\n\n  private showMessage(msg: any) {\n    this.snackBar.open(msg, undefined, { duration: 2000 });\n  }\n}\n","<div style=\"margin:20px\">\n  <mat-card>\n    <mat-card-header>\n      <mat-card-title style=\"font-size:24px\">\n        Создать робота\n      </mat-card-title>\n      <mat-card-subtitle style=\"font-size:16px; color: black\">\n        На этой странице вы создаёте нового робота.\n        <ul>\n          <li style=\"margin-top: 1em\">\n            На текущий момент из \"Финансовых инструментов\" доступны только акции.\n          </li>\n          <li style=\"margin-top: 1em\">\n            На втором, выберите параметры доходности робота<br />\n            согласно вашему риск-профилю или вручную.\n          </li>\n          <li style=\"margin-top: 1em\">\n            На третьем - выберите инструмент для торговли.<br />\n            Вы можете выбрать акции, валюту или криптовалюту. <br />\n            При выборе акций, надо выбрать еще индустрию. <br />\n            (информационные технологии, финансы, медицина, ндвижимость и т.д.)\n          </li>\n          <li style=\"margin-top: 1em\">\n            Если все поля заполнены, то подвердите создания робота. <br />\n            Если нет, то дозаполните все необходимые поля.\n          </li>\n        </ul>\n      </mat-card-subtitle>\n    </mat-card-header>\n    <mat-card-content>\n      <form [formGroup]=\"formGroup\">\n        <mat-vertical-stepper linear=\"false\" #stepper>\n          <!-- step 1 -->\n          <!-- <mat-step>\n            <ng-template matStepLabel>Название робота и сумма инвестирования</ng-template>\n            <div style=\"display:flex; flex-wrap: wrap\">\n              <mat-form-field style=\"min-width: 30em; margin-right: 3em; margin-bottom: 2em\">\n                <input #nameInput matInput formControlName=\"name\" placeholder=\"Введите название робота\" />\n                <mat-error *ngIf=\"formGroup.hasError('required', 'name')\">\n                  Не указано название\n                </mat-error>\n                <mat-error *ngIf=\"formGroup.hasError('minlength', 'name')\">\n                  Минимальная длина: {{ formGroup.getError('minlength', 'name').requiredLength }}\n                </mat-error>\n                <mat-error *ngIf=\"formGroup.hasError('maxlength', 'name')\">\n                  Максимальная длина: {{ formGroup.getError('maxlength', 'name').requiredLength }}\n                </mat-error>\n                <mat-hint align=\"start\"><strong>Длина от 5 до 255 символов</strong> </mat-hint>\n                <mat-hint align=\"end\">{{ nameInput.value.length }} / 255</mat-hint>\n              </mat-form-field>\n              <mat-form-field style=\"width: 30em; margin-bottom: 2em\">\n                <input matInput formControlName=\"sum\" placeholder=\"Какую сумму Вы готовы инвестировать?\"\n                  type=\"number\" />\n                <span matPrefix>$&nbsp;</span>\n                <mat-error *ngIf=\"formGroup.hasError('required', 'sum')\">\n                  Не указана сумма\n                </mat-error>\n                <mat-hint align=\"start\">\n                  <strong>Рекомендуемая сумма риска от капитала на сделку не более 3%</strong>\n                </mat-hint>\n              </mat-form-field>\n            </div>\n            <div>\n              <button mat-stroked-button color=\"accent\" matStepperNext>Далее</button>\n            </div>\n          </mat-step> -->\n          <!-- step 2 -->\n          <!-- <mat-step>\n            <ng-template matStepLabel>Параметры доходности</ng-template>\n            <div style=\"display: flex; flex-wrap: wrap; margin-top:2em; height: 3em\">\n              <div>\n                <mat-radio-group style=\"margin-right:5em\" [formControl]=\"defaultProfitRisk\">\n                  <mat-radio-button color=\"primary\" value=\"true\">Рекомендованный по риск-профилю</mat-radio-button>\n                  <mat-radio-button color=\"accent\" value=\"false\">Вручную</mat-radio-button>\n                </mat-radio-group>\n              </div>\n              <div *ngIf=\"!isDefaultProfitRisk\">\n                <mat-slider\n                  thumbLabel\n                  style=\"width: 30em;\"\n                  [displayWith]=\"formatLabel\"\n                  tickInterval=\"10\"\n                  min=\"5\"\n                  max=\"90\"\n                  step=\"5\"\n                  formControlName=\"esValue\"\n                >\n                </mat-slider>\n              </div>\n            </div>\n            <div>\n              <button mat-stroked-button color=\"primary\" style=\"margin-right:2em\" matStepperPrevious>Назад</button>\n              <button mat-stroked-button color=\"accent\" matStepperNext>Далее</button>\n            </div>\n          </mat-step> -->\n          <!-- step 3 -->\n          <mat-step>\n            <ng-template matStepLabel>Финансовый инструмент и стратегия бота</ng-template>\n            <div style=\"display:flex; flex-wrap: wrap\">\n              <mat-form-field style=\"min-width: 30em; margin-right: 3em; margin-bottom: 2em\">\n                <mat-select placeholder=\"Финансовый инструмент\" formControlName=\"instrument\">\n                  <mat-option *ngFor=\"let financialInstrument of financialInstruments\"\n                    [disabled]=\"financialInstrument === 'Forex'\" [value]=\"financialInstrument\">\n                    {{ financialInstrument }}</mat-option>\n                </mat-select>\n              </mat-form-field>\n              <mat-form-field style=\"min-width: 30em; margin-right: 3em; margin-bottom: 2em\">\n                <mat-select placeholder=\"Актив\" formControlName=\"ticker\">\n                  <mat-option *ngFor=\"let ticker of tickers\" [value]=\"ticker.value\">{{ ticker.name }}</mat-option>\n                </mat-select>\n              </mat-form-field>\n              <mat-form-field style=\"width: 30em; margin-bottom: 2em\">\n                <mat-select placeholder=\"Cтратегия\" formControlName=\"strategy\">\n                  <mat-option *ngFor=\"let strategy of strategies\" [disabled]=\"strategy.name === 'simpleRaddar'\"\n                    [value]=\"strategy.name\">{{ strategy.name }}\n                  </mat-option>\n                </mat-select>\n                <mat-hint></mat-hint>\n              </mat-form-field>\n            </div>\n            <div>\n              <button mat-stroked-button color=\"primary\" style=\"margin-right:2em\" matStepperPrevious>Назад</button>\n              <button mat-stroked-button color=\"accent\" matStepperNext>Далее</button>\n            </div>\n          </mat-step>\n          <!-- step 4 -->\n          <mat-step>\n            <ng-template matStepLabel>Форма заполнена</ng-template>\n            <div style=\"margin-bottom: 2em\">\n              <button mat-raised-button color=\"accent\" (click)=\"submitBot()\" [disabled]=\"!formGroup.valid\">\n                Создать робота\n              </button>\n              <mat-error *ngIf=\"!formGroup.valid\">\n                Кнопка неактивна. Заполните все поля.\n              </mat-error>\n            </div>\n            <div>\n              <button mat-stroked-button color=\"primary\" style=\"margin-right:2em\" matStepperPrevious>Назад</button>\n              <button mat-stroked-button color=\"warn\" (click)=\"stepper.reset()\">Начать заново</button>\n            </div>\n          </mat-step>\n        </mat-vertical-stepper>\n      </form>\n    </mat-card-content>\n  </mat-card>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { first } from 'rxjs/operators';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { AuthenticationService } from 'src/app/services/authentication.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css'],\n})\nexport class LoginComponent implements OnInit {\n  hide = true;\n  valueEmail = '';\n\n  loginForm: FormGroup;\n  loading = false;\n  submitted = false;\n  returnUrl: string;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private route: ActivatedRoute,\n    private router: Router,\n    private authenticationService: AuthenticationService,\n    private snackbar: MatSnackBar\n  ) {\n    if (this.authenticationService.currentUserValue) {\n      this.router.navigate(['/dashboard']);\n    }\n  }\n\n  ngOnInit() {\n    this.loginForm = this.formBuilder.group({\n      email: ['', Validators.required],\n      password: ['', Validators.required],\n    });\n\n    this.returnUrl = this.route.snapshot.queryParams['returnUrl'] || 'dashboard';\n  }\n\n  get controls() {\n    return this.loginForm.controls;\n  }\n  // TO-DO ошибки добавить в разметку позже\n  getErrorLogin() {\n    return this.loginForm.get('email').hasError('required') ? 'Email не может быть пустым' : '';\n  }\n  getErrorPassword() {\n    return this.loginForm.get('password').hasError('required') ? 'Пароль не может быть пустым' : '';\n  }\n\n  onSubmit() {\n    this.submitted = true;\n\n    if (this.loginForm.invalid) {\n      return;\n    }\n\n    this.loading = true;\n    // setTimeout(() => {\n    this.authenticationService\n      .login(this.loginForm.value)\n      .pipe(first())\n      .subscribe(\n        () => {\n          this.loading = false;\n          this.router.navigate([this.returnUrl]);\n          this.showMessage('Вход успешно выполнен');\n        },\n        (error: HttpErrorResponse) => {\n          this.showErrorMessage(error);\n          this.loading = false;\n        }\n      );\n    // }, 1500);\n  }\n\n  forgetPassword() {\n    this.showMessage('Функция пока не доступна');\n  }\n\n  private showErrorMessage(httpError: HttpErrorResponse) {\n    console.log(\"🚀 ~ file: login.component.ts ~ line 90 ~ LoginComponent ~ showErrorMessage ~ message.error\", httpError)\n    if (httpError.error.array && httpError.error.array.length) {\n      const arr = httpError.error.array as Array<any>;\n      arr.forEach(el => {\n        this.snackbar.open(el.msg, 'OK', { duration: 6000 });\n      })\n    } else {\n      this.snackbar.open(httpError.error.msg, 'OK', { duration: 6000 });\n    }\n  }\n  private showMessage(message: any) {\n    this.snackbar.open(message, 'OK', { duration: 3000 });\n    // console.log(message);\n  }\n}\n","<div class=\"jumbotron\">\n  <div class=\"container\">\n    <div class=\"row\">\n      <div class=\"col-sm-6 offset-sm-3\">\n        <h1>Войти в панель</h1>\n        <form [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit()\">\n          <div class=\"form-group\">\n            <mat-form-field appearance=\"outline\" style=\"width:100%\">\n              <mat-label>Email</mat-label>\n              <input matInput formControlName=\"email\"\n                [ngClass]=\"{ 'is-invalid': submitted && controls.email.errors }\" />\n            </mat-form-field>\n          </div>\n          <div class=\"form-group\">\n            <mat-form-field appearance=\"outline\" style=\"width:100%\">\n              <mat-label>Пароль</mat-label>\n              <input matInput [type]=\"hide ? 'password' : 'text'\" formControlName=\"password\"\n                [ngClass]=\"{ 'is-invalid': submitted && controls.password.errors }\" />\n              <mat-icon matSuffix (click)=\"hide = !hide\">{{ hide ? 'visibility_off' : 'visibility' }}</mat-icon>\n            </mat-form-field>\n          </div>\n          <div *ngIf=\"!loading\" style=\"text-align:center\" class=\"form-group\">\n            <button mat-raised-button type=\"submit\" color=\"accent\"\n              style=\"width:60%; height: 40px; margin-bottom:10px; border-radius: 5px\">\n              Войти\n            </button>\n            <!-- <button mat-raised-button type=\"button\"\n              style=\"width:60%; height: 40px; margin-bottom:10px; border-radius: 5px\" (click)=\"forgetPassword()\">\n              <img width=\"20px\" src=\"assets/new-google-favicon-512.png\" /> Войти с помощью Google\n            </button>\n            <button mat-raised-button type=\"button\"\n              style=\"width:60%; height: 40px; margin-bottom:10px; border-radius: 5px\" (click)=\"forgetPassword()\">\n              <img width=\"20px\" src=\"assets/600px-Facebook_logo_(square).png\" /> Войти с помощью Facebook\n            </button>\n            <button mat-button style=\"width:60%\" (click)=\"forgetPassword()\">\n              Забыли пароль?\n            </button> -->\n          </div>\n          <div *ngIf=\"loading\">\n            <mat-progress-spinner style=\"margin: 0 auto\" mode=\"indeterminate\" diameter=\"80\" strokeWidth=\"9\">\n            </mat-progress-spinner>\n          </div>\n        </form>\n      </div>\n    </div>\n  </div>\n</div>","import { Component, OnInit, Inject } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { UserService } from '../../../services/user.service';\nimport { User } from '../../../models/user';\n\n@Component({\n  selector: 'app-add-modey-to-account',\n  templateUrl: './add-modey-to-account.component.html',\n  styleUrls: ['./add-modey-to-account.component.css'],\n})\nexport class AddModeyToAccountComponent implements OnInit {\n  dataForm: FormGroup;\n  editedStats: User;\n\n  constructor(\n    private userService: UserService,\n    public dialogRef: MatDialogRef<AddModeyToAccountComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: User\n  ) {\n    this.dataForm = new FormGroup({\n      summa: new FormControl('', Validators.required),\n    });\n  }\n\n  ngOnInit() { }\n\n  addMoney(summa: number) {\n    // const prev = this.data.account;\n    // this.data.account = summa;\n    // this.userService.updateAccount(this.data).subscribe();\n    // this.data.account = +prev + +summa;\n    this.dialogRef.close();\n  }\n}\n","Введите сумму для пополнения вашего кошелька\n\n<form [formGroup]=\"dataForm\">\n  <mat-form-field>\n    <span matPrefix>$ &nbsp;</span>\n    <input type=\"tel\" matInput formControlName=\"summa\" placeholder=\"Введите сумму\" />\n    <mat-icon matSuffix>mode_edit</mat-icon>\n  </mat-form-field>\n  <button class=\"btn btn-default\" [disabled]=\"dataForm.invalid\" (click)=\"addMoney(dataForm.get('summa').value)\">\n    Пополнить\n  </button>\n</form>\n","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { first } from 'rxjs/operators';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { AuthenticationService } from 'src/app/services/authentication.service';\nimport { UserService } from 'src/app/services/user.service';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css'],\n})\nexport class RegisterComponent implements OnInit {\n  hide = true;\n  loading = false;\n  submitted = false;\n\n  form: FormGroup;\n  valueEmail = '';\n\n  get controls() {\n    return this.form.controls;\n  }\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private router: Router,\n    private authenticationService: AuthenticationService,\n    private snackbar: MatSnackBar\n  ) {\n    if (this.authenticationService.currentUserValue) {\n      this.router.navigate(['/']);\n    }\n  }\n\n  ngOnInit() {\n    this.form = this.formBuilder.group({\n      email: ['', Validators.required],\n      password: ['', Validators.required],\n    });\n  }\n\n  onSubmit() {\n    this.submitted = true;\n    if (this.form.invalid) {\n      return;\n    }\n\n    this.loading = true;\n    // setTimeout(() => {\n    this.authenticationService\n      .register(this.form.value)\n      .pipe(first())\n      .subscribe(_ => {\n        this.router.navigate(['dashboard']);\n        this.showMessage('Регистрация успешна');\n        this.loading = false;\n      }, error => {\n        this.loading = false;\n        this.showErrorMessage(error);\n      });\n    // }, 1000);\n  }\n\n  private showErrorMessage(message: HttpErrorResponse) {\n    this.snackbar.open(message.error.message, 'OK', { duration: 6000 });\n  }\n  private showMessage(message: any) {\n    this.snackbar.open(message, 'OK', { duration: 3000 });\n  }\n}\n","<div class=\"jumbotron\">\n  <div class=\"container\">\n    <div class=\"row\">\n      <div class=\"col-sm-6 offset-sm-3\">\n        <h1>Регистрация</h1>\n        <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\n          <div class=\"form-group\">\n            <mat-form-field appearance=\"outline\" style=\"width:100%\">\n              <mat-label>E-mail</mat-label>\n              <input matInput formControlName=\"email\"\n                [ngClass]=\"{ 'is-invalid': submitted && controls.email.errors }\" />\n            </mat-form-field>\n          </div>\n          <div class=\"form-group\">\n            <mat-form-field appearance=\"outline\" style=\"width:100%\">\n              <mat-label>Пароль</mat-label>\n              <input matInput [type]=\"hide ? 'password' : 'text'\" formControlName=\"password\"\n                [ngClass]=\"{ 'is-invalid': submitted && controls.password.errors }\" />\n              <mat-icon matSuffix (click)=\"hide = !hide\">{{ hide ? 'visibility_off' : 'visibility' }}</mat-icon>\n            </mat-form-field>\n          </div>\n          <div class=\"form-group\" style=\"text-align:center\">\n            <button mat-raised-button color=\"accent\"\n              style=\"width:50%; margin:10px; border-radius: 5px\">Зарегистрироваться</button>\n          </div>\n          <div *ngIf=\"loading\">\n            <mat-progress-spinner style=\"margin: 0 auto\" color=\"accent\" mode=\"indeterminate\" diameter=\"80\"\n              strokeWidth=\"9\"></mat-progress-spinner>\n          </div>\n        </form>\n      </div>\n    </div>\n  </div>\n</div>","import { Component } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { User } from './models/user';\nimport { AuthenticationService } from './services/authentication.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css'],\n})\nexport class AppComponent {\n  currentUser: User;\n  isCurrentUser = false;\n\n  constructor(private router: Router, private authenticationService: AuthenticationService) {\n    this.authenticationService.$currentUser.subscribe(user => {\n      this.currentUser = user;\n      if (user) {\n        this.isCurrentUser = true;\n      }\n    });\n  }\n\n  logout() {\n    this.authenticationService.logout();\n    this.router.navigate(['/login']);\n  }\n}\n","<app-navigation-bar>\n  <router-outlet></router-outlet>\n</app-navigation-bar>\n","import { Injectable } from '@angular/core';\nimport { Router, CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { AuthenticationService } from '../services/authentication.service';\n\n@Injectable({ providedIn: 'root' })\nexport class AuthGuard implements CanActivate {\n  constructor(private router: Router, private authenticationService: AuthenticationService) { }\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n    const currentUser = this.authenticationService.currentUserValue;\n    if (currentUser) {\n      // authorised so return true\n      return true;\n    }\n\n    // not logged in so redirect to login page with the return url\n    this.router.navigate(['/login'], { queryParams: { returnUrl: state.url } });\n    return false;\n  }\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { LayoutModule } from '@angular/cdk/layout';\nimport { RouterModule } from '@angular/router';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { MDBBootstrapModule } from 'angular-bootstrap-md';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatListModule } from '@angular/material/list';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { MatBadgeModule } from '@angular/material/badge';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { WidgetsComponent } from './components/main-dashboard/widgets/widgets.component';\nimport { LoginComponent } from './components/account/login/login.component';\nimport { RegisterComponent } from './components/account/register/register.component';\nimport { BotStatsDialogComponent } from './components/table-bots/bot-stats-dialog/bot-stats-dialog.component';\nimport { TableBotsComponent } from './components/table-bots/table-bots.component';\nimport { AppComponent } from './app.component';\nimport { routing } from './app.routing';\nimport { AboutComponent } from './components/account/about/about.component';\nimport { SettingsComponent } from './components/account/settings/settings.component';\nimport { CreateBotComponent } from './components/create-bot/create-bot.component';\nimport { AddModeyToAccountComponent } from './components/main-dashboard/add-modey-to-account/add-modey-to-account.component';\nimport { MainDashboardComponent } from './components/main-dashboard/main-dashboard.component';\nimport { NavigationBarComponent } from './components/navigation-bar/navigation-bar.component';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { JwtInterceptor } from './helpers/jwt.interceptor';\nimport { ErrorInterceptor } from './helpers/error.interceptor';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    NavigationBarComponent,\n    MainDashboardComponent,\n    SettingsComponent,\n    LoginComponent,\n    RegisterComponent,\n    AboutComponent,\n    CreateBotComponent,\n    TableBotsComponent,\n    WidgetsComponent,\n    AddModeyToAccountComponent,\n    BotStatsDialogComponent,\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    ReactiveFormsModule,\n    HttpClientModule,\n    LayoutModule,\n    RouterModule,\n    FormsModule,\n    routing,\n\n    // MATERIAL\n    MatToolbarModule,\n    MatButtonModule,\n    MatSidenavModule,\n    MatIconModule,\n    MatListModule,\n    MatGridListModule,\n    MatCardModule,\n    MatMenuModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatIconModule,\n    MatSnackBarModule,\n    MatProgressSpinnerModule,\n    MatSelectModule,\n    MatSliderModule,\n    MatRadioModule,\n    MatTableModule,\n    MatTooltipModule,\n    MatBadgeModule,\n    MatStepperModule,\n    MatSlideToggleModule,\n    MatTabsModule,\n    MatDialogModule,\n    MDBBootstrapModule.forRoot(),\n    MatDatepickerModule,\n    MatNativeDateModule\n  ],\n  entryComponents: [AddModeyToAccountComponent, BotStatsDialogComponent],\n  providers: [\n    MatDatepickerModule,\n    MatNativeDateModule,\n    { provide: HTTP_INTERCEPTORS, useClass: JwtInterceptor, multi: true },\n    { provide: HTTP_INTERCEPTORS, useClass: ErrorInterceptor, multi: true }\n  ],\n  bootstrap: [AppComponent],\n})\nexport class AppModule { }\n","import { Routes, RouterModule } from '@angular/router';\nimport { MainDashboardComponent } from './components/main-dashboard/main-dashboard.component';\nimport { SettingsComponent } from './components/account/settings/settings.component';\nimport { AboutComponent } from './components/account/about/about.component';\nimport { CreateBotComponent } from './components/create-bot/create-bot.component';\nimport { AuthGuard } from './guards/auth.guard';\nimport { LoginComponent } from './components/account/login/login.component';\nimport { RegisterComponent } from './components/account/register/register.component';\nimport { TableBotsComponent } from './components/table-bots/table-bots.component';\n\nconst appRoutes: Routes = [\n  { path: 'dashboard', component: MainDashboardComponent, canActivate: [AuthGuard] },\n  { path: 'table', component: TableBotsComponent, canActivate: [AuthGuard] },\n  { path: 'create', component: CreateBotComponent, canActivate: [AuthGuard] },\n  { path: 'settings', component: SettingsComponent, canActivate: [AuthGuard] },\n  // { path: 'create', component: CreateBotComponent },\n  // { path: 'table', component: TableBotsComponent },\n  // { path: 'dashboard', component: MainDashboardComponent },\n  // { path: 'settings', component: SettingsComponent },\n  { path: 'login', component: LoginComponent },\n  { path: 'register', component: RegisterComponent },\n  { path: 'about', component: AboutComponent },\n  { path: '**', redirectTo: 'dashboard' },\n];\n\nexport const routing = RouterModule.forRoot(appRoutes);\n","import { Injectable } from '@angular/core';\nimport { HttpRequest, HttpHandler, HttpEvent, HttpInterceptor } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { AuthenticationService } from '../services/authentication.service';\n\n@Injectable({ providedIn: 'root' })\nexport class JwtInterceptor implements HttpInterceptor {\n  constructor(private authenticationService: AuthenticationService) { }\n\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    const currentUser = this.authenticationService.currentUserValue;\n    if (currentUser && currentUser.token && !request.url.includes('login')) {\n      const headers = this.authenticationService.headers;\n      request = request.clone({ headers });\n    }\n\n    return next.handle(request);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport { map } from 'rxjs/operators';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { User, UserDto } from '../models/user';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthenticationService {\n  private currentUserSubject: BehaviorSubject<User>;\n  public $currentUser: Observable<User>;\n\n  constructor(private http: HttpClient) {\n    this.currentUserSubject = new BehaviorSubject<User>(JSON.parse(localStorage.getItem('currentUser')));\n    this.$currentUser = this.currentUserSubject.asObservable();\n  }\n\n  public get currentUserValue(): User {\n    return this.currentUserSubject.value;\n  }\n\n  public get headers(): HttpHeaders {\n    return new HttpHeaders({\n      'Authorization': `Bearer ${this.currentUserValue && this.currentUserValue.token ? this.currentUserValue.token : ''}`\n    })\n  }\n\n  login(user: UserDto) {\n    return this.http\n      .post<string>(`${environment.apiUrl}/users/login`, { email: user.email, password: user.password })\n      .pipe(\n        map(token => {\n          const currentUser = { email: user.email, token };\n          localStorage.setItem('currentUser', JSON.stringify(currentUser));\n          this.currentUserSubject.next(currentUser);\n          return user;\n        }));\n  }\n\n  register(user: UserDto) {\n    return this.http.post<string>(`${environment.apiUrl}/users/signup`, user)\n      .pipe(\n        map(token => {\n          const currentUser = { email: user.email, token };\n          localStorage.setItem('currentUser', JSON.stringify(currentUser));\n          this.currentUserSubject.next(currentUser);\n          return user;\n        }));\n  }\n\n  logout() {\n    // remove user from local storage to log user out\n    localStorage.removeItem('currentUser');\n    this.currentUserSubject.next(null);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpRequest, HttpHandler, HttpEvent, HttpInterceptor } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { AuthenticationService } from '../services/authentication.service';\n\n@Injectable({ providedIn: 'root' })\nexport class ErrorInterceptor implements HttpInterceptor {\n  constructor(private authenticationService: AuthenticationService) { }\n\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    return next.handle(request).pipe(\n      catchError(err => {\n        if (err.status === 401) {\n          // auto logout if 401 response returned from api\n          this.authenticationService.logout();\n          location.reload();\n        }\n\n        const error = err.error.message || err.statusText;\n        return throwError(error);\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { Observable, BehaviorSubject, throwError } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport { catchError, tap, switchMap } from 'rxjs/operators';\nimport { Question } from '../models/questions';\nimport { InvestorTypeCharacter } from '../models/enums';\nimport { User } from '../models/user';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TaskService {\n  questionsList$: BehaviorSubject<Question[]>;\n  private loaded = false;\n\n  constructor(private http: HttpClient) {\n    this.questionsList$ = new BehaviorSubject<Question[]>([]);\n  }\n\n  /**\n   * запрашивает список вопросов\n   * (если список уже загружен, то вернет его\n   * если не загружен, то делает запрос на сервер)\n   */\n  public getQuestionsList(): Observable<Question[]> {\n    if (!this.loaded) {\n      return this.reloadQuestionList().pipe(switchMap(r => this.questionsList$));\n    }\n    return this.questionsList$;\n  }\n\n  private reloadQuestionList(): Observable<Question[]> {\n    return this.http.get<Question[]>(`${environment.apiUrl}/api/Task/GetQuestions`).pipe(\n      catchError(this.handleError),\n      tap(response => {\n        this.questionsList$.next(response);\n        this.loaded = true;\n      })\n    );\n  }\n\n  public postInvestorType(user: User, balls: number) {\n    const obj = { user: user, balls: balls };\n    return this.http.post(`${environment.apiUrl}/api/Task/GetInvestorType`, obj);\n  }\n\n  public convertRiskToString(score: InvestorTypeCharacter): string {\n    switch (score) {\n      case InvestorTypeCharacter.Guaranteed:\n        return 'Трусишка';\n      case InvestorTypeCharacter.Conservative:\n        return 'Консерватор';\n      case InvestorTypeCharacter.Moderate:\n        return 'Сбалансированный';\n      case InvestorTypeCharacter.Growth:\n        return 'Целеустремленный к прибыли';\n      case InvestorTypeCharacter.AggressiveGrowth:\n        return 'Агрессивный';\n      case InvestorTypeCharacter.MaximumGrowth:\n        return 'Продам родную мать';\n    }\n    return 'Консерватор';\n  }\n\n  private handleError(error: HttpErrorResponse) {\n    let msg: string;\n    if (error.error instanceof ErrorEvent) {\n      msg = 'Произошла ошибка:' + error.error.message;\n    } else {\n      msg = `Произошла ошибка: ${error.error}. Код ошибки ${error.status}`;\n    }\n    return throwError(msg);\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { User } from '../../models/user';\nimport * as Chartist from 'node_modules/chartist';\nimport { UserStatsService } from '../../services/user-stats.service';\nimport { StatsView } from '../../models/statsView';\nimport { MatDialog } from '@angular/material/dialog';\nimport { AddModeyToAccountComponent } from './add-modey-to-account/add-modey-to-account.component';\nimport { TaskService } from '../../services/task.service';\nimport { InvestorTypeCharacter } from '../../models/enums';\nimport { AuthenticationService } from '../../services/authentication.service';\n\n@Component({\n  selector: 'app-main-dashboard',\n  templateUrl: './main-dashboard.component.html',\n  styleUrls: ['./main-dashboard.component.css'],\n})\nexport class MainDashboardComponent implements OnInit {\n  currentUser: User;\n  currentUserSubscription: Subscription;\n  riskType: string;\n  loading = true;\n  stats: StatsView = {\n    profit: 0.0,\n    robotQuantity: 0,\n    account: 0.0,\n    riskType: InvestorTypeCharacter.Moderate,\n  };\n\n  constructor(\n    private authenticationService: AuthenticationService,\n    private userStatService: UserStatsService,\n    private taskService: TaskService,\n    public dialog: MatDialog\n  ) {\n    this.currentUserSubscription = this.authenticationService.$currentUser.subscribe(user => {\n      this.currentUser = user;\n    });\n  }\n\n  openDialog() {\n    const dialogRef = this.dialog.open(AddModeyToAccountComponent, {\n      panelClass: 'dialog',\n      data: this.currentUser,\n      disableClose: true,\n    });\n    dialogRef.backdropClick().subscribe(result => {\n      if (confirm('Закрыть окно?')) {\n        dialogRef.close();\n      }\n    });\n    dialogRef.afterClosed().subscribe(r => this.getStats());\n  }\n\n  ngOnInit(): void {\n    this.getStats();\n    this.createFirstChart();\n    this.createSecondChart();\n    this.createThirdChart();\n  }\n\n  getStats() {\n    // this.userStatService.getStatsById(this.currentUser.id).subscribe(stats => {\n    this.userStatService.getStatsById(0).subscribe(stats => {\n      this.stats = stats;\n      this.riskType = this.taskService.convertRiskToString(this.stats.riskType);\n      this.loading = false;\n    });\n  }\n\n  createFirstChart() {\n    const dataDailySalesChart: any = {\n      labels: ['M', 'T', 'W', 'T', 'F', 'S', 'S'],\n      series: [[12, 17, 7, 17, 23, 18, 38]],\n    };\n\n    const optionsDailySalesChart: any = {\n      lineSmooth: Chartist.Interpolation.cardinal({\n        tension: 0,\n      }),\n      low: 0,\n      high: 50, // creative tim: we recommend you to set the high sa the biggest value + something for a better look\n      chartPadding: { top: 0, right: 0, bottom: 0, left: 0 },\n    };\n\n    const dailySalesChart = new Chartist.Line('#dailySalesChart', dataDailySalesChart, optionsDailySalesChart);\n\n    this.startAnimationForLineChart(dailySalesChart);\n  }\n\n  createSecondChart() {\n    const datawebsiteViewsChart = {\n      labels: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],\n      series: [[542, 443, 320, 780, 553, 453, 326, 434, 568, 610, 756, 895]],\n    };\n    const optionswebsiteViewsChart = {\n      axisX: {\n        showGrid: false,\n      },\n      low: 0,\n      high: 1000,\n      chartPadding: { top: 0, right: 5, bottom: 0, left: 0 },\n    };\n    const responsiveOptions: any[] = [\n      [\n        'screen and (max-width: 640px)',\n        {\n          seriesBarDistance: 5,\n          axisX: {\n            labelInterpolationFnc: function (value) {\n              return value[0];\n            },\n          },\n        },\n      ],\n    ];\n    const websiteViewsChart = new Chartist.Bar('#websiteViewsChart', datawebsiteViewsChart, optionswebsiteViewsChart, responsiveOptions);\n\n    this.startAnimationForBarChart(websiteViewsChart);\n  }\n\n  createThirdChart() {\n    const dataCompletedTasksChart: any = {\n      labels: ['12p', '3p', '6p', '9p', '12p', '3a', '6a', '9a'],\n      series: [[230, 750, 450, 300, 280, 240, 200, 190]],\n    };\n\n    const optionsCompletedTasksChart: any = {\n      lineSmooth: Chartist.Interpolation.cardinal({\n        tension: 0,\n      }),\n      low: 0,\n      high: 1000, // creative tim: we recommend you to set the high sa the biggest value + something for a better look\n      chartPadding: { top: 0, right: 0, bottom: 0, left: 0 },\n    };\n\n    const completedTasksChart = new Chartist.Line('#completedTasksChart', dataCompletedTasksChart, optionsCompletedTasksChart);\n\n    this.startAnimationForLineChart(completedTasksChart);\n  }\n\n  private startAnimationForLineChart(chart) {\n    let seq: any, delays: any, durations: any;\n    seq = 0;\n    delays = 80;\n    durations = 500;\n\n    chart.on('draw', function (data) {\n      if (data.type === 'line' || data.type === 'area') {\n        data.element.animate({\n          d: {\n            begin: 600,\n            dur: 700,\n            from: data.path\n              .clone()\n              .scale(1, 0)\n              .translate(0, data.chartRect.height())\n              .stringify(),\n            to: data.path.clone().stringify(),\n            easing: Chartist.Svg.Easing.easeOutQuint,\n          },\n        });\n      } else if (data.type === 'point') {\n        seq++;\n        data.element.animate({\n          opacity: {\n            begin: seq * delays,\n            dur: durations,\n            from: 0,\n            to: 1,\n            easing: 'ease',\n          },\n        });\n      }\n    });\n\n    seq = 0;\n  }\n\n  private startAnimationForBarChart(chart) {\n    let seq2: any, delays2: any, durations2: any;\n\n    seq2 = 0;\n    delays2 = 80;\n    durations2 = 500;\n    chart.on('draw', function (data) {\n      if (data.type === 'bar') {\n        seq2++;\n        data.element.animate({\n          opacity: {\n            begin: seq2 * delays2,\n            dur: durations2,\n            from: 0,\n            to: 1,\n            easing: 'ease',\n          },\n        });\n      }\n    });\n\n    seq2 = 0;\n  }\n}\n","<div class=\"grid-container\">\n  <!-- первый ряд -->\n  <mat-grid-list cols=\"4\" rowHeight=\"160px\">\n    <mat-grid-tile colspan=\"1\" rowspan=\"1\">\n      <mat-card class=\"dashboard-card\" style=\"padding:0; border-radius: 3px\">\n        <div class=\"card card-stats\">\n          <div class=\"card-header card-header-warning card-header-icon\" style=\"height:73px\">\n            <div class=\"card-icon\">\n              <i class=\"material-icons\">adb</i>\n            </div>\n            <p class=\"card-category\">Количество роботов</p>\n            <mat-progress-spinner\n              *ngIf=\"loading\"\n              style=\"margin: 0 auto\"\n              mode=\"indeterminate\"\n              diameter=\"30\"\n              strokeWidth=\"3\"\n            ></mat-progress-spinner>\n            <h5 class=\"card-title\">\n              {{ stats.robotQuantity }}/10\n              <small>шт.</small>\n            </h5>\n          </div>\n          <div class=\"card-footer\">\n            <div class=\"stats\">\n              <i class=\"material-icons text-danger\">warning</i>\n              <a href=\"/create\">Создать нового робота</a>\n            </div>\n          </div>\n        </div>\n      </mat-card>\n    </mat-grid-tile>\n    <mat-grid-tile colspan=\"1\" rowspan=\"1\">\n      <mat-card class=\"dashboard-card\" style=\"padding:0; border-radius: 3px\">\n        <div class=\"card card-stats\">\n          <div class=\"card-header card-header-success card-header-icon\" style=\"height:73px\">\n            <div class=\"card-icon\">\n              <i class=\"material-icons\">attach_money</i>\n            </div>\n            <p class=\"card-category\">Общая доходность</p>\n            <mat-progress-spinner\n              *ngIf=\"loading\"\n              style=\"margin: 0 auto\"\n              mode=\"indeterminate\"\n              diameter=\"30\"\n              strokeWidth=\"3\"\n            ></mat-progress-spinner>\n            <h5 class=\"card-title\">{{ stats.profit }}%</h5>\n          </div>\n          <div class=\"card-footer\">\n            <div class=\"stats\"><i class=\"material-icons\">date_range</i> Последний месяц</div>\n          </div>\n        </div>\n      </mat-card>\n    </mat-grid-tile>\n    <mat-grid-tile colspan=\"1\" rowspan=\"1\">\n      <mat-card class=\"dashboard-card\" style=\"padding:0; border-radius: 3px\">\n        <div class=\"card card-stats\">\n          <div class=\"card-header card-header-danger card-header-icon\" style=\"height:73px\">\n            <div class=\"card-icon\">\n              <i class=\"material-icons\">spellcheck</i>\n            </div>\n            <p class=\"card-category\">Риск-профиль</p>\n            <mat-progress-spinner\n              *ngIf=\"loading\"\n              style=\"margin: 0 auto\"\n              mode=\"indeterminate\"\n              diameter=\"30\"\n              strokeWidth=\"3\"\n            ></mat-progress-spinner>\n            <h5 class=\"card-title\">{{ riskType }}</h5>\n          </div>\n          <div class=\"card-footer\">\n            <div class=\"stats\" routerLink=\"/testForRiskLevel\" style=\"cursor:pointer\">\n              <i class=\"material-icons\">local_offer</i> Пройти тест еще раз\n            </div>\n          </div>\n        </div>\n      </mat-card>\n    </mat-grid-tile>\n    <mat-grid-tile colspan=\"1\" rowspan=\"1\">\n      <mat-card class=\"dashboard-card\" style=\"padding:0; border-radius: 3px\">\n        <div class=\"card card-stats\">\n          <div class=\"card-header card-header-info card-header-icon\" style=\"height:73px\">\n            <div class=\"card-icon\">\n              <i class=\"material-icons\" (click)=\"openDialog()\" style=\"cursor: pointer\">account_balance_wallet</i>\n            </div>\n            <p class=\"card-category\">На счету</p>\n            <mat-progress-spinner\n              *ngIf=\"loading\"\n              style=\"margin: 0 auto\"\n              mode=\"indeterminate\"\n              diameter=\"30\"\n              strokeWidth=\"3\"\n            ></mat-progress-spinner>\n            <h5 class=\"card-title\">${{ stats.account }}</h5>\n          </div>\n          <div class=\"card-footer\">\n            <div class=\"stats\"><i class=\"material-icons\" style=\"cursor: pointer\" (click)=\"openDialog()\">update</i> Пополнить кошелек</div>\n          </div>\n        </div>\n      </mat-card>\n    </mat-grid-tile>\n  </mat-grid-list>\n\n  <!-- второй ряд -->\n\n  <mat-grid-list cols=\"3\" rowHeight=\"170px\">\n    <mat-grid-tile colspan=\"1\" rowspan=\"2\">\n      <mat-card class=\"dashboard-card\" style=\"padding:0; border-radius: 3px\">\n        <div class=\"card card-chart\" style=\"height:310px\">\n          <div class=\"card-header card-header-success\">\n            <div class=\"ct-chart\" id=\"dailySalesChart\"></div>\n          </div>\n          <div class=\"card-body\">\n            <h5 class=\"card-title\">Доходность за год</h5>\n            <p class=\"card-category\">\n              <span class=\"text-success\"><i class=\"fa fa-long-arrow-up\"></i> +55% </span> доходность выросла\n            </p>\n          </div>\n          <div class=\"card-footer\">\n            <div class=\"stats\"><i class=\"material-icons\">update</i> обновлено 17 дней назад</div>\n          </div>\n        </div>\n      </mat-card>\n    </mat-grid-tile>\n    <mat-grid-tile colspan=\"1\" rowspan=\"2\">\n      <mat-card class=\"dashboard-card\" style=\"padding:0; border-radius: 3px\">\n        <div class=\"card card-chart\" style=\"height:310px\">\n          <div class=\"card-header card-header-warning\">\n            <div class=\"ct-chart\" id=\"websiteViewsChart\"></div>\n          </div>\n          <div class=\"card-body\">\n            <h5 class=\"card-title\">Аналитика по росту потрфеля</h5>\n            <p class=\"card-category\">ваш портфель вырос</p>\n          </div>\n          <div class=\"card-footer\">\n            <div class=\"stats\"><i class=\"material-icons\">access_time</i> campaign sent 2 days ago</div>\n          </div>\n        </div>\n      </mat-card>\n    </mat-grid-tile>\n    <mat-grid-tile colspan=\"1\" rowspan=\"2\">\n      <mat-card class=\"dashboard-card\" style=\"padding:0; border-radius: 3px\">\n        <div class=\"card card-chart\" style=\"height:310px\">\n          <div class=\"card-header card-header-danger\">\n            <div class=\"ct-chart\" id=\"completedTasksChart\"></div>\n          </div>\n          <div class=\"card-body\">\n            <h5 class=\"card-title\">Выполненные курсы</h5>\n            <p class=\"card-category\">За месяц ~3 курса</p>\n          </div>\n          <div class=\"card-footer\">\n            <div class=\"stats\"><i class=\"material-icons\">update</i> обновлено 17 дней назад</div>\n          </div>\n        </div>\n      </mat-card>\n    </mat-grid-tile>\n  </mat-grid-list>\n\n  <!-- третий ряд -->\n\n  <mat-grid-list cols=\"2\" rowHeight=\"350px\">\n    <mat-grid-tile colspan=\"1\" rowspan=\"1\">\n      <mat-card class=\"dashboard-card\">\n        <mat-card-header>\n          <mat-card-title>\n            Статистика по ботам\n            <button mat-icon-button class=\"more-button\" [matMenuTriggerFor]=\"menu\" aria-label=\"Toggle menu\">\n              <mat-icon>more_vert</mat-icon>\n            </button>\n            <mat-menu #menu=\"matMenu\">\n              <button mat-menu-item>Действие 1</button>\n              <button mat-menu-item>Действие 2</button>\n            </mat-menu>\n          </mat-card-title>\n        </mat-card-header>\n        <mat-card-content class=\"dashboard-card-content\">\n          <app-widgets [index]=\"'NASDAQ'\" [ticker]=\"'AAPL'\"></app-widgets>\n        </mat-card-content>\n      </mat-card>\n    </mat-grid-tile>\n    <mat-grid-tile colspan=\"1\" rowspan=\"1\">\n      <mat-card class=\"dashboard-card\">\n        <mat-card-header>\n          <mat-card-title>\n            ТОП график рост\n            <button mat-icon-button class=\"more-button\" [matMenuTriggerFor]=\"menu\" aria-label=\"Toggle menu\">\n              <mat-icon>more_vert</mat-icon>\n            </button>\n            <mat-menu #menu=\"matMenu\">\n              <button mat-menu-item>Действие 1</button>\n              <button mat-menu-item>Действие 2</button>\n            </mat-menu>\n          </mat-card-title>\n        </mat-card-header>\n        <mat-card-content class=\"dashboard-card-content\">\n          <app-widgets [index]=\"'NASDAQ'\" [ticker]=\"'MSFT'\"></app-widgets>\n        </mat-card-content>\n      </mat-card>\n    </mat-grid-tile>\n  </mat-grid-list>\n</div>\n","import { Injectable } from '@angular/core';\nimport { Observable, throwError, BehaviorSubject } from 'rxjs';\nimport { TradingBot } from '../models/trading-bot-model';\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { environment } from '../../environments/environment';\nimport { catchError, tap, switchMap } from 'rxjs/operators';\nimport { Ticker } from '../models/asset';\nimport { FinancialInstrument } from '../models/enums';\nimport { AuthenticationService } from './authentication.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TradingBotsService {\n  tradingBotsList$: BehaviorSubject<TradingBot[]>;\n  private loaded = false;\n\n  constructor(\n    private http: HttpClient,\n    private authenticationService: AuthenticationService\n  ) {\n    this.tradingBotsList$ = new BehaviorSubject<TradingBot[]>([]);\n  }\n\n  /**\n   * запрашивает список роботов\n   * (если список уже загружен, то вернет его\n   * если не загружен, то делает запрос на сервер)\n   */\n  getUserRobots(): Observable<TradingBot[]> {\n    if (!this.loaded) {\n      return this.reloadedTraidingBotsList().pipe(switchMap(r => this.tradingBotsList$));\n    }\n    return this.tradingBotsList$;\n  }\n\n  private reloadedTraidingBotsList() {\n    return this.http.get<TradingBot[]>(`${environment.apiUrl}/bots`,).pipe(\n      catchError(this.handleError),\n      tap(response => {\n        this.tradingBotsList$.next(response);\n        this.loaded = true;\n      })\n    );\n  }\n\n  updateRobotData(bot: TradingBot): Observable<null> {\n    return this.http.post<any>(`${environment.apiUrl}/api/robots/UpdateBot`, bot).pipe(\n      catchError(this.handleError),\n      tap(_ => { })\n    );\n  }\n\n  deleteRobotData(bot: TradingBot): Observable<null> {\n    return this.http.post<any>(`${environment.apiUrl}/api/robots/DeleteBot`, bot).pipe(\n      catchError(this.handleError),\n      tap(_ => { })\n    );\n  }\n\n  public getDescription(bot_id: string): Observable<Ticker> {\n    return this.http.get<Ticker>(`${environment.apiUrl}/api/robots/GetDescription?bot_id=` + bot_id);\n  }\n\n  public convertingFinancialInstrumentToString(financialInstrument: FinancialInstrument): string {\n    switch (financialInstrument) {\n      case FinancialInstrument.Forex:\n        return 'Форекс';\n      case FinancialInstrument.Stock:\n        return 'Рынок акций';\n    }\n  }\n\n  // public convertingIndustryToString(industry: Industry): string {\n  //   switch (industry) {\n  //     case 1:\n  //       return 'Информационные технологии';\n  //     case 2:\n  //       return 'Здравоохранение';\n  //     case 3:\n  //       return 'Машиностроение и транспорт';\n  //     case 4:\n  //       return 'Недвижимость';\n  //     case 5:\n  //       return 'Потребительские товары и услуги';\n  //     case 6:\n  //       return 'Финансовы сектор';\n  //     case 7:\n  //       return 'Энергетика';\n  //     case 8:\n  //       return 'Серьевая промыщленность';\n  //     case 9:\n  //       return 'Электоэнергетика';\n  //     case 10:\n  //       return 'Телекоммуникации';\n  //   }\n  //   return;\n  // }\n\n  private handleError(error: HttpErrorResponse) {\n    let msg: string;\n\n    if (error.error instanceof ErrorEvent) {\n      msg = 'Произошла ошибка:' + error.error.message;\n    } else {\n      msg = `Произошла ошибка: ${error.error}. Код ошибки ${error.status}`;\n    }\n\n    console.error('TradingBotsService::handleError() ' + msg);\n\n    return throwError(msg);\n  }\n}\n","import { Component, OnInit, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { Ticker } from 'src/app/models/asset';\nimport { TradingBot } from 'src/app/models/trading-bot-model';\nimport { TradingBotsService } from 'src/app/services/trading-bots.service';\n\n@Component({\n  selector: 'app-bot-stats-dialog',\n  templateUrl: './bot-stats-dialog.component.html',\n  styleUrls: ['./bot-stats-dialog.component.css'],\n})\nexport class BotStatsDialogComponent implements OnInit {\n  asset: Ticker;\n  industry: string;\n  financialInstrument: string;\n\n  constructor(\n    public dialogRef: MatDialogRef<BotStatsDialogComponent>,\n    private tradingBotsService: TradingBotsService,\n    @Inject(MAT_DIALOG_DATA) public data: TradingBot\n  ) { }\n\n  ngOnInit() {\n    this.getDescription(this.data.id);\n  }\n\n  getDescription(bot_id: string) {\n    this.tradingBotsService.getDescription(bot_id).subscribe(r => {\n      this.asset = r;\n      // this.industry = this.tradingBotsService.convertingIndustryToString(r.industry);\n      // this.financialInstrument = this.tradingBotsService.convertingFinancialInstrumentToString(r.financialInstrument);\n    });\n  }\n}\n","<mat-card>\n  <mat-card-header>\n    <mat-card-title>\n      <h2>\n        Статистика по торговому роботу <strong> \"{{ data.ticker }}\" </strong>\n      </h2>\n    </mat-card-title>\n  </mat-card-header>\n  <mat-card-content *ngIf=\"asset\" class=\"dashboard-card-content\">\n    <p>Финансовый инструмент Акции</p>\n    <p>Бумага {{ asset.name }}</p>\n    <p>Индустрия {{ industry }}</p>\n    <app-widgets [index]=\"'NASDAQ'\" [ticker]=\"'APPLE'\"></app-widgets>\n  </mat-card-content>\n</mat-card>","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { environment } from 'src/environments/environment';\nimport { UserProfile, UserProfileDto } from '../models/user';\nimport { AuthenticationService } from './authentication.service';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserService {\n  constructor(\n    private http: HttpClient,\n    private authenticationService: AuthenticationService\n  ) { }\n\n  get(): Observable<UserProfileDto> {\n    return this.http.get<UserProfileDto>(`${environment.apiUrl}/users/profile`);\n  }\n\n  update(profile: UserProfile) {\n    return this.http.put(`${environment.apiUrl}/users/profile`, profile);\n  }\n\n  delete(id: number) {\n    return this.http.delete(`${environment.apiUrl}/users/${id}`);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { environment } from 'src/environments/environment';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { Ticker } from '../../models/asset';\nimport { FinancialInstrument } from '../../models/enums';\nimport { BotDto } from 'src/app/models/trading-bot-model';\nimport { AuthenticationService } from 'src/app/services/authentication.service';\nimport { StrategyList, StrategyViewModel } from 'src/app/models/strategy';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CreateBotService {\n  constructor(\n    private http: HttpClient,\n    private authenticationService: AuthenticationService\n  ) { }\n\n  createBot(bot: BotDto): Observable<string> {\n    return this.http.post<string>(`${environment.apiUrl}/bot/create`, bot).pipe(\n      catchError(this.handleError),\n    );\n  }\n\n  getFinancialInstruments() {\n    return Object.values(FinancialInstrument).filter(val => typeof val === 'string') as string[];\n  }\n\n  public getSecurities(instument: FinancialInstrument): Ticker[] {\n    // todo формировать список на бэкенде\n    return [\n      {\n        name: 'FORD',\n        value: 'F'\n      },\n      {\n        name: 'AMD',\n        value: 'AMD'\n      },\n      {\n        name: 'Activision',\n        value: 'ATVI'\n      },\n      {\n        name: 'VEON',\n        value: 'VEON'\n      },\n    ]\n  }\n\n  public getStrategies(): StrategyViewModel[] {\n    return [\n      {\n        name: StrategyList.simpleTV,\n        description: 'Берет данные по техническому анализу с TradingView',\n        disabled: false\n      },\n      {\n        name: StrategyList.simpleRaddar,\n        description: 'Берет данные по техническому анализу с Raddar.io',\n        disabled: true\n      }\n    ]\n  }\n\n  // getIndustries() {\n  //   return Object.values(Industry).filter(val => typeof val === 'string') as string[];\n  // }\n\n  // getAssets(financialInstrument: number, industry: number): Observable<Asset[]> {\n  //   let params = new HttpParams();\n  //   params = params.append('fi', financialInstrument.toString());\n  //   params = params.append('ind', industry.toString());\n  //   return this.http.get<Asset[]>(`${environment.apiUrl}/api/robots/GetAssetsByFinancialInstrumentAndIndustry`, { params: params });\n  // }\n\n  private handleError(error: HttpErrorResponse) {\n    console.log(\"🚀 ~ file: create-bot.service.ts ~ line 78 ~ CreateBotService ~ handleError ~ error\", error)\n    let msg: string;\n\n    if (error.error) {\n      msg = 'Произошла ошибка:' + error.error.message;\n    } else {\n      msg = `Произошла ошибка: ${error.error}. Код ошибки ${error.status}`;\n    }\n\n    console.error('CreateBotService::handleError() ' + msg);\n\n    return throwError(msg);\n  }\n}\n","import { HttpErrorResponse } from '@angular/common/http';\nimport { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { first } from 'rxjs/operators';\nimport { UserProfileDto } from 'src/app/models/user';\nimport { UserService } from 'src/app/services/user.service';\n\n@Component({\n  selector: 'app-settings',\n  templateUrl: './settings.component.html',\n  styleUrls: ['./settings.component.css'],\n})\nexport class SettingsComponent implements OnInit {\n\n  profileForm: FormGroup;\n  hide = true;\n  submitted = false;\n  loading = false;\n\n  constructor(\n    private userService: UserService,\n    private snackbar: MatSnackBar,\n    private formBuilder: FormBuilder,\n  ) { }\n\n  get controls() {\n    return this.profileForm.controls;\n  }\n\n  ngOnInit() {\n    this.profileForm = this.formBuilder.group({\n      email: ['', Validators.email],\n      tinkoffToken: [''],\n      name: [''],\n      lastName: [''],\n      bitrhDate: [''],\n      location: [''],\n      gender: [''],\n    });\n\n    this.userService.get().subscribe(res => this.profileForm.patchValue(res))\n  }\n\n  onSubmit() {\n    this.submitted = true;\n\n    if (this.profileForm.invalid) {\n      return;\n    }\n\n    this.loading = true;\n    const profile = this.profileForm.value as UserProfileDto\n    // setTimeout(() => {\n    this.userService.update(profile)\n      .pipe(first())\n      .subscribe(_ => {\n        this.loading = false;\n        this.showMessage(\"Успешно сохранено\");\n      }, (error: HttpErrorResponse) => {\n        this.showErrorMessage(error);\n        // this.alertService.error(error);\n        this.loading = false;\n      });\n    // }, 1500);\n  }\n\n  private showErrorMessage(httpError: HttpErrorResponse) {\n    console.log(\"🚀 ~ file: login.component.ts ~ line 90 ~ LoginComponent ~ showErrorMessage ~ message.error\", httpError)\n    if (httpError.error.array && httpError.error.array.length) {\n      const arr = httpError.error.array as Array<any>;\n      arr.forEach(el => {\n        this.snackbar.open(el.msg, 'OK', { duration: 6000 });\n      })\n    } else {\n      this.snackbar.open(httpError.error.msg, 'OK', { duration: 6000 });\n    }\n  }\n  private showMessage(message: any) {\n    this.snackbar.open(message, 'OK', { duration: 3000 });\n  }\n}\n","<h1>Настройки пользователя</h1>\n<form [formGroup]=\"profileForm\" (ngSubmit)=\"onSubmit()\">\n  <mat-grid-list cols=\"2\" rowHeight=\"100px\">\n\n    <mat-grid-tile>\n      <mat-form-field appearance=\"outline\" style=\"width:90%\">\n        <mat-label>Фамилия</mat-label>\n        <input matInput formControlName=\"name\" />\n      </mat-form-field>\n    </mat-grid-tile>\n\n    <mat-grid-tile>\n      <mat-form-field appearance=\"outline\" style=\"width:90%\">\n        <mat-label>Имя</mat-label>\n        <input matInput formControlName=\"lastName\" />\n      </mat-form-field>\n    </mat-grid-tile>\n\n    <mat-grid-tile>\n      <mat-form-field appearance=\"outline\" style=\"width:90%\">\n        <mat-label>Email</mat-label>\n        <input matInput formControlName=\"email\" />\n      </mat-form-field>\n    </mat-grid-tile>\n\n    <mat-grid-tile>\n      <mat-form-field appearance=\"outline\" appearance=\"outline\" style=\"width:90%\">\n        <input matInput [matDatepicker]=\"datepicker\" formControlName=\"bitrhDate\">\n        <mat-label>Дата рождения</mat-label>\n        <mat-datepicker-toggle matSuffix [for]=\"datepicker\"></mat-datepicker-toggle>\n        <mat-datepicker #datepicker>\n          <mat-datepicker-actions>\n            <button mat-button matDatepickerCancel>Cancel</button>\n            <button mat-raised-button color=\"primary\" matDatepickerApply>Apply</button>\n          </mat-datepicker-actions>\n        </mat-datepicker>\n      </mat-form-field>\n    </mat-grid-tile>\n\n    <mat-grid-tile>\n      <mat-form-field appearance=\"outline\" style=\"width:90%\">\n        <mat-label>Город</mat-label>\n        <input matInput formControlName=\"location\" />\n      </mat-form-field>\n    </mat-grid-tile>\n\n    <mat-grid-tile>\n      <section class=\"example-section\">\n        <mat-radio-group formControlName=\"gender\">\n          <mat-radio-button style=\"margin: 0 10px;\" value=\"0\">Ж</mat-radio-button>\n          <mat-radio-button style=\"margin: 0 10px;\" value=\"1\">М</mat-radio-button>\n        </mat-radio-group>\n      </section>\n    </mat-grid-tile>\n\n    <mat-grid-tile>\n      <mat-form-field appearance=\"outline\" style=\"width:90%\">\n        <mat-label>Токен от Тинькофф инвестиций</mat-label>\n        <input matInput [type]=\"hide ? 'tinkoffToken' : 'text'\" formControlName=\"tinkoffToken\"\n          [ngClass]=\"{ 'is-invalid': submitted && controls.tinkoffToken.errors }\" />\n        <mat-icon matSuffix (click)=\"hide = !hide\">{{ hide ? 'visibility_off' : 'visibility' }}</mat-icon>\n      </mat-form-field>\n    </mat-grid-tile>\n  </mat-grid-list>\n\n  <div>\n    <button mat-raised-button color=\"accent\" type=\"submit\" [disabled]=\"!profileForm.valid\">\n      Обновить\n    </button>\n  </div>\n</form>","import { Component, Input, AfterViewInit } from '@angular/core';\n\ndeclare const TradingView: any;\n\n@Component({\n  selector: 'app-widgets',\n  templateUrl: './widgets.component.html',\n  styleUrls: ['./widgets.component.css'],\n})\nexport class WidgetsComponent implements AfterViewInit {\n  @Input() index: string;\n  @Input() ticker: string;\n\n  constructor() { }\n\n  ngAfterViewInit(): void {\n    const tradingView = new TradingView.widget({\n      container_id: 'technical-analysis-' + this.ticker,\n      autosize: true,\n      symbol: this.index + ':' + this.ticker,\n      interval: '120',\n      timezone: 'exchange',\n      theme: 'Light',\n      style: '1',\n      toolbar_bg: '#f1f3f6',\n      withdateranges: true,\n      hide_side_toolbar: false,\n      allow_symbol_change: true,\n      save_image: false,\n      hideideas: true,\n      studies: ['MASimple@tv-basicstudies'],\n      show_popup_button: true,\n      popup_width: '1000',\n      popup_height: '650',\n    });\n  }\n}\n","<div id=\"{{ 'technical-analysis-' + ticker }}\" style=\"height:235px\"></div>","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"]}